<?php

namespace app\controller\Admin;

use app\controller\AppController;
use app\core\Response;
use app\model\Opentest;
use app\model\User;
use app\Repository\OpenTestRepository;
use app\Services\Test\TestDoService;
use app\view\OpenTest\OpentestView1;
use JetBrains\PhpStorm\NoReturn;

class OpentestController extends AdminscController
{
   private TestDoService $service;
   public function __construct()
   {
      parent::__construct();
      $this->service = new TestDoService();
   }

   public function actionDo(): void
   {
      $testId = $this->route->id;
      $test   = $testId?OpenTestRepository::do($testId):null;

      $accordion = OpentestView1::oldDoAccordion();
      $pagination = OpentestView1::getPagination($test);

      $this->setVars(compact('test','accordion'));
   }

   public function actionPathshow(): void
   {
      $this->view = 'edit_show';

      $page_name = 'Создание открытого теста';
      $this->setVars(compact('page_name'));

      $isTest = 0;
      $this->setVars(compact('isTest'));

      $id = $this->route['id'] ?? null;

      $test                 = new Opentest;
      $test->fillable['id'] = $id;

      $item = OpentestView1::getShowView($test);
      $this->setVars(compact('item'));
   }

   #[NoReturn] public function actionDelete(): void
   {
      if ($user->can(['test_delete'])) {
         if (Opentest::delete($this->ajax['id'])) {
            Response::exitWithPopup('ok');
         }
      }
      $this->ajax['test']['enable'] = 0;
      $this->ajax['test']['id']     = $this->ajax['id'];
      Opentest::update($this->ajax['test']);
      exit(json_encode(['notAdmin' => true]));
   }

   public function actionQuestions(): void
   {
      $testId = (int)$this->route['id'];
      $html   = OpentestView1::getQuetionsView(Opentest::findOneModel($testId));
      $this->setVars(compact('html'));
   }

   public function actionEdit(): void
   {
      $id = $this->route->id;
      if ($id) {
         $page_name = 'Редактирование открытых тестов';
         $test      = Opentest::with('questions.answers')
            ->orderBy('sort')
            ->find($id);
         $item      = OpentestView1::item($test);

         OpentestView1::
         $parentSelector = \app\view\Opentest\OpentestView::questionParentSelector($test->id);

         $this->setVars(compact('test', 'parentSelector'));
      } else {

      }
   }

   public function actionTests()
   {
      Response::json(Opentest::findAllWhere('isTest', '1'));
   }

   public function actionPaths()
   {
      Response::json(Opentest::findAllWhere('isTest', '0'));
   }

   public function actionGetCorrectAnswers()
   {
      Opentest::getCorrectAnswers();
   }

}
