<?php

namespace app\controller;

use app\model\Model;
use app\model\Openanswer;
use app\model\Openquestion;
use app\model\Opentest;
use app\model\User;
use app\view\OpenTest\OpentestView;
use app\view\View;


class OpenTestController extends AppController
{
	public $model = 'opentest';
	public $table = 'opentests';

	public function __construct(array $route)
	{
		parent::__construct($route);
		$this->autorize();
		$this->layout = 'admin';
		View::setJs('admin.js');
		View::setCss('admin.css');
		View::setMeta('Система тестирования', 'Система тестирования', 'Система тестирования');
	}

	public function actionIndex()
	{
	}


	public function actionUpdate()
	{
		if ($this->ajax) {
			$id = Opentest::update($this->ajax);
			exit(json_encode(['id' => $id]));
		}

		$this->view = 'edit_update';

		$page_name = 'Редактирование открытых тестов';
		$this->set(compact('page_name'));

		$id = $this->route['id'];
		$test = Opentest::load($id);

		$item = OpentestView::getUpdateView($test);
		$this->set(compact('item'));
	}


	public function actionShow()
	{
		$this->view = 'edit_show';

		$page_name = 'Создание открытого теста';
		$this->set(compact('page_name'));

		$isTest = 1;
		$this->set(compact('isTest'));

		$id = $this->route['id'] ?? null;

		$test = new Opentest;
		$test->fillable['id'] = $id;

		$item = OpentestView::getShowView($test);
		$this->set(compact('item'));

	}

	public function actionPathshow()
	{
		$this->view = 'edit_show';

		$page_name = 'Создание открытого теста';
		$this->set(compact('page_name'));

		$isTest = 0;
		$this->set(compact('isTest'));

		$id = $this->route['id'] ?? null;

		$test = new Opentest;
		$test->fillable['id'] = $id;

		$item = OpentestView::getShowView($test);
		$this->set(compact('item'));

	}


//	public function actionCreate()
//	{
//		if ($this->ajax) {
//
//			if ($id = Opentest::create($this->ajax)) {
//				$q_id = Question::create();
//				exit(json_encode([
//					'id' => $id,
//				]));
//			}
//		}
//	}

	public function actionUpdateOrCreate()
	{
		if ($this->ajax) {
			if ($id = Opentest::updateOrCreate($this->ajax)) {
				$q_id = Openquestion::create(['opentest_id' => $id - 1]);
				exit(json_encode([
					'id' => $id,
				]));
			}
		}
	}

	public function actionDelete()
	{
		if (User::can($this->user, 'test_delete') || defined('SU')) {
			if (Opentest::delete($this->ajax['id'])) {
				$this->exitWith('ok');
			}
		}
		$this->ajax['test']['enable'] = 0;
		$this->ajax['test']['id'] = $this->ajax['id'];
		Opentest::update($this->ajax['test']);
		exit(json_encode(['notAdmin' => true]));
	}

	public function actionDo()
	{
		$page_name = 'Прохождение открытых тестов';
		$this->set(compact('page_name'));

		if (!isset($this->route['id'])) {
			$error = '<H1>Выберите тест</H1>';
			$this->set(compact('error'));

		} else {
			$testId = (int)$this->route['id'];
			$test = Opentest::find($testId);
			if (!$test) {
				$error = '<H1>Теста с таким номером нет.</H1>';
				$this->set(compact('error'));
			} else {
				$test = $test[0];

				$questions = Openquestion::where('opentest_id', '=',$testId)
					->orderBy('sort')->get();
				foreach ($questions as &$question) {
					$question['answers'] = Openanswer::where('openquestion_id', '=',$question['id'])
						->get();
				}
				$test['questions'] = $questions;

				$this->set(compact('test'));
			}
		}

	}

	public function actionQuestions()
	{
		$testId = (int)$this->route['id'];
		$html = OpentestView::getQuetionsView(Opentest::findOneModel($testId));
		$this->set(compact('html'));
	}

	private function getQuestions($testId){
		return Openquestion::where('opentest_id', '=', $testId)
			->orderBy('sort')
			->get();
	}

	public function actionEdit()
	{
		$test = '';
		$page_name = 'Редактирование открытых тестов';
		$this->set(compact('page_name'));

		if (!isset($this->route['id'])) {
			$error = 'Выберите тест';
			$this->set(compact('error'));

		} else {
			$testId = (int)$this->route['id'];
			$test = Opentest::find($testId);
			if (!$test) {
				$error = 'Теста с таким номером нет.';
				$this->set(compact('error'));
			} else {
				$test = $test[0];

				$questions = $this->getQuestions($testId);

				if (!$questions) {
					Openquestion::create(['opentest_id'=>$testId]);
					$questions = $this->getQuestions($testId);
				}
				foreach ($questions as &$question) {
					$question['answers'] = Openanswer::findAllWhere('openquestion_id', $question['id']);
				}
				$test['questions'] = $questions;

				$this->set(compact('test'));

				$tests = $this->opentests();
				$this->set(compact('tests'));
			}
		}

	}

	public function actionTests()
	{
		exit(json_encode($this->tests()));
	}


	public function actionPaths()
	{
		exit(json_encode($this->paths()));
	}

	private function paths()
	{
		return Opentest::findAllWhere('isTest', '0');
	}


	private function opentests()
	{
		return Opentest::findAllWhere('isTest', '1');
	}

	private function pathsTree(Model $model)
	{
		$model->data = $this->paths();
		return $model->tree('parent');
	}

	public function actionGetCorrectAnswers()
	{
		Opentest::getCorrectAnswers();
	}

}
