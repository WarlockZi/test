<?php

namespace app\controller;

use app\model\Model;
use app\model\Openanswer;
use app\model\Openquestion;
use app\model\Opentest;
use app\model\Question;
use app\model\Test;
use app\model\User;
use app\view\components\CustomCatalogItem\CustomCatalogItem;
use app\view\components\CustomSelect\CustomSelect;
use app\view\View;


class OpenTestController extends AppController
{
	public $model = 'opentest';
  public $table = 'opentests';

	public function __construct(array $route)
	{
		parent::__construct($route);
		$this->autorize();
		$this->layout = 'admin';
		View::setJs('admin.js');
		View::setCss('admin.css');
		View::setMeta('Система тестирования', 'Система тестирования', 'Система тестирования');
	}

	public function actionIndex()
	{
	}


	public function actionUpdate()
	{
		if ($this->ajax) {
			$id = Opentest::update($this->ajax);
			exit(json_encode(['id' => $id]));
		}

		$this->view = 'edit_update';

		$page_name = 'Редактирование тестов';
		$this->set(compact('page_name'));

		$id = $this->route['id'];
		$test = Opentest::findOneWhere('id', $id);
		$test['children'] = Test::findAllWhere('parent', $id);;
		$this->set(compact('test'));

//		$paths = $this->paths();
//		$this->set(compact('paths'));
//
//		$tree = [0 => 'да', 1 => 'нет'];
//		$enableSelect = $this->getEnableCustomSelect($tree, $test['enable']);
//		$this->set(compact('enableSelect'));
//
//		$pathsTree = $this->pathsTree(new Opentest());
//		$parentSelect = $this->getParentCustomSelect($pathsTree, $test['parent']);
//		$this->set(compact('parentSelect'));

    $item = $test;
    $item = include ROOT.'/app/view/OpenTest/getItem.php';;
    $this->set(compact('item'));
	}


	public function actionShow()
	{

		$this->view = 'edit_show';

		$page_name = 'Создание открытого теста';
		$this->set(compact('page_name'));

		$paths = $this->paths();
		$this->set(compact('paths'));

		$test['isTest'] = 1;
		$this->set(compact('test'));
	}

	public function actionPathshow()
	{
		$this->layout = 'admin';
		$this->view = 'edit_show';
		$page_name = 'Создание папки';
		$this->set(compact('page_name'));

		$paths = $this->paths();
		$this->set(compact('paths'));

		$test['isTest'] = 0;
		$rootTests = Test::findAllWhere('isTest', 0);
		$this->set(compact('rootTests', 'test'));
	}


	public function actionCreate()
	{
		if ($this->ajax) {

			if ($id = Test::create($this->ajax)) {
				$q_id = Question::create();
				exit(json_encode([
					'id' => $id,
				]));
			}
		}
	}

	public function actionUpdateOrCreate()
	{
		if ($this->ajax) {

			if ($id = Test::updateOrCreate($this->ajax)) {
				$q_id = Question::create(['parent' => $id - 1]);
				exit(json_encode([
					'id' => $id,
				]));
			}
		}
	}

	public function actionDelete()
	{

		if (User::can($this->user, 'test_delete') || defined('SU')) {
			if (Test::delete($this->ajax['id'])) {
				$this->exitWith('ok');
			}
		}
		$this->ajax['test']['enable'] = 0;
		$this->ajax['test']['id'] = $this->ajax['id'];
		Test::update($this->ajax['test']);
		exit(json_encode(['notAdmin' => true]));
	}

	public function actionDo()
	{

		$page_name = 'Прохождение открытых тестов';
		$this->set(compact('page_name'));

		if (!isset($this->route['id'])) {
			$error = '<H1>Выберите тест</H1>';
			$this->set(compact('error'));

		} else {
			$testId = (int)$this->route['id'];
			$test = Opentest::find($testId);
			if (!$test) {
				$error = '<H1>Теста с таким номером нет.</H1>';
				$this->set(compact('error'));
			} else {
				$test = $test[0];

				$questions = Openquestion::findAllWhere('opentest_id', $testId);
				foreach ($questions as &$question) {
					$question['answers'] = Openanswer::findAllWhere('openquestion_id', $question['id']);
				}
				$test['questions'] = $questions;

				$this->set(compact('test'));
			}
		}

	}

	public function actionEdit()
	{
		$test = '';
		$page_name = 'Редактирование открытых тестов';
		$this->set(compact('page_name'));

		if (!isset($this->route['id'])) {
			$error = 'Выберите тест';
			$this->set(compact('error'));

		} else {
			$testId = (int)$this->route['id'];
			$test = Opentest::find($testId);
			if (!$test) {
				$error = 'Теста с таким номером нет.';
				$this->set(compact('error'));
			} else {
				$test = $test[0];

				$questions = Openquestion::findAllWhere('opentest_id', $testId);
				foreach ($questions as &$question) {
					$question['answers'] = Openanswer::findAllWhere('openquestion_id', $question['id']);
				}
				$test['questions'] = $questions;

				$this->set(compact('test'));


				$tests = $this->opentests();
				$this->set(compact('tests'));
			}
		}

	}

	public function actionTests()
	{
		exit(json_encode($this->tests()));
	}





	public function actionPaths()
	{
		exit(json_encode($this->paths()));
	}

	private function paths()
	{
		return Opentest::findAllWhere('isTest', '0');
	}


	private function opentests()
	{
		return Opentest::findAllWhere('isTest', '1');
	}

	private function pathsTree(Model $model)
	{
		$model->data = $this->paths();
		return $model->tree('parent');
	}

	public function actionGetCorrectAnswers()
	{
		Test::getCorrectAnswers();
	}

}
