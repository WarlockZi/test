<?php


namespace app\view\OpenTest;


use app\controller\OpenquestionController;
use app\model\Model;
use app\model\Openanswer;
use app\model\Openquestion;
use app\model\Opentest;
use app\view\components\CustomCatalogItem\CustomCatalogItem;
use app\view\components\CustomSelect\CustomSelect;

class OpentestView
{
	private $model;
	public $html;

	public function __construct($model)
	{
		$this->model = $model;
	}

	public static function getUpdateView(Model $model): string
	{
		$view = new self($model);
		if ($model) {
			$view->getHtml();
		} else {
			$view->noElement();
		}
		return $view->html;
	}


	public static function getShowView(Model $model)
	{
		$view = new self($model);
		$view->getHtml($model->fillable, $model);
		return $view->html;
	}

	public static function getParentSelector(string $exclude)
	{

		$f = new CustomSelect([
			'tree' => Opentest::findAllWhere('isTest', '1'),
			'exclude' => $exclude,
			'initialOption' => true,
			'initialOptionValue' => 0,
			'initialOptionLabel' => '--',
		]);
		return $f->html;
	}

	public static function getQuetionsView(Model $model): string
	{
		$view = new self($model);
		$view->getQuestions();
		return $view->html;
	}

	private function getHtml(): void
	{
		$options = $this->getOptions();
		$t = new CustomCatalogItem($options);
		$this->html = $t->html;
	}

	private function getQuestions(): void
	{
		$page_name = 'Редактировать вопросы';
		$testId = $this->model->fillable['id'] ?? 0;
		if (!$testId) {
			$error = 'Теста с таким номером нет.';
		} else {
			$test = Opentest::find($testId)[0];
			$questions =
				Openquestion::where('opentest_id', '=', $testId)
					->orderBy('sort')
					->get();
			foreach ($questions as &$question) {
				$question['answers'] = Openanswer::findAllWhere('openquestion_id', $question['id']);
			}
			$test['questions'] = $questions;
//			$tests = Opentest::findAllWhere('isTest', '1');;
		}

		ob_start();
		include ROOT . '\app\view\Opentest\edit.php';
		$this->html = ob_get_clean();
	}



	private function getOptions()
	{
		return [
			'item' => $this->model->fillable,
			'modelName' => $this->model->model,
			'tableClassName' => $this->model->table,
			'pageTitle' => '',
//    'tabs' => [
//      ['title' => 'Права',
//        'html' => getRights($item),
//        'field' => 'rights'
//      ]
//    ],
			'fields' => [
				'ID' => [
					'field' => 'id',
					'contenteditable' => false,
				],
				$this->model->fillable['isTest'] ? 'Тест' : 'Папка' => [
					'field' => 'id',
					'contenteditable' => false,
				],
				'Имя' => [
					'field' => 'name',
					'contenteditable' => true,
					'required' => true,
				],

				'Показывать пользователю' => [
					'field' => 'enable',
					'html' => $this->getEbabled($this->model->fillable),
				],
				'Лежит в папке' => [
					'field' => 'opentest_id',
					'html' => $this->getParent($this->model->fillable),
				],
			],
			'delBttn' => true,
			'saveBttn' => true,

		];
	}

	private function getEbabled(array $item)
	{
		$enable = new \app\view\components\CustomSelect\CustomSelect([
			'title' => '',
			'field' => 'enable',
			'tree' => ['0' => 'не показывать', '1' => 'показывать'],
			'selected' => $item['enable'],
		]);
		return $enable->html;
	}

	private function getParent(array $item)
	{
		$opentest = new \app\model\Opentest();
		$array = $opentest::findAllWhere('isTest', '0');
		if ($array) {
			$opentest->data = $array;
			$tree = $opentest->tree('opentest_id');
		} else {
			$tree = [];
		}

		$parent = new \app\view\components\CustomSelect\CustomSelect([
			'title' => '',
			'field' => 'opentest_id',
			'optionName' => 'name',
			'initialOption' => true,
			'initialOptionLabel' => '',
			'initialOptionValue' => 0,
			'tree' => $tree,
			'selected' => $item['opentest_id'],
		]);
		return $parent->html;
	}


	private function noElement()
	{
		ob_start();
		?>
	  <div class="no-element">
		  <div class="error">Тест не найден</div>
	  </div>
		<?
		return ob_get_clean();
	}


}