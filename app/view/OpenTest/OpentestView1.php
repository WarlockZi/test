<?php

namespace app\view\OpenTest;

use app\model\Openanswer;
use app\model\Openquestion;
use app\model\Opentest;
use app\repository\OpenTestRepository;
use app\service\Fs\FS;
use app\view\Accordion\AccordionBuilder;
use app\view\components\Builders\CheckboxBuilder\CheckboxBuilder;
use app\view\components\Builders\ItemBuilder\ItemBuilder;
use app\view\components\Builders\ItemBuilder\ItemFieldBuilder;
use app\view\components\Builders\MyAccordion\MyAccordion;
use app\view\components\Builders\SelectBuilder\SelectBuilder;
use app\view\components\Icon\Icon;
use Illuminate\Database\Eloquent\Collection;

class OpentestView1
{
    public $html;

    public static function item($test)
    {
        $isTest = $test->isTest ? 'теста' : 'папки';
        return ItemBuilder::build($test, 'test')
            ->pageTitle("Редактирование {$isTest} - {$test['name']}")
            ->del()
            ->save()
            ->field(
                ItemFieldBuilder::build('id', $test)
                    ->name('ID')
                    ->get()
            )
            ->field(
                ItemFieldBuilder::build('name', $test)
                    ->name('Наименование')
                    ->contenteditable()
                    ->get()
            )
            ->field(
                ItemFieldBuilder::build('enable', $test)
                    ->name('Показывать')
                    ->html(
                        CheckboxBuilder::build(
                            'enable',
                            $test->enable,
                            'int'
                        )->get()
                    )
                    ->get()
            )
            ->field(
                ItemFieldBuilder::build('parent', $test)
                    ->name('Принадлежит')
                    ->html(self::getParentSelector($test))
                    ->get()
            )
            ->get();
    }

    public static function getShowView(Model $model)
    {
        $view = new self($model);
        $view->getHtml($model->fillable, $model);
        return $view->html;
    }

    public static function getParentSelector(int $selected, int $exclude = -1): string
    {
        $tests         = Opentest::where('isTest', '1')->get();
        $parent_select = '<select>';
        $parent_select .= "<option value=0>---</option>";
        foreach ($tests as $t) {
            if ((int)$t['id'] !== $exclude) {
                $selectedStr   = (int)$t['id'] === $selected ? 'selected' : '';
                $parent_select .= "<option value={$t['id']} {$selectedStr}>{$t['name']}</option>";
            }
        }
//		$parent_select .= "</select>";
        $parent_select = SelectBuilder::build()
            ->array($tests->toArray())
            ->get();


        return $parent_select;
    }

    public static function getSelectWithSelectedExcluded(int $selected, int $exclude = -1): string
    {
        $tests         = Opentest::where('isTest', '=', '1')->get();
        $parent_select = '<select>';
        $parent_select .= "<option value=0>---</option>";
        foreach ($tests as $t) {
            if ((int)$t['id'] !== $exclude) {
                $selectedStr   = (int)$t['id'] === $selected ? 'selected' : '';
                $parent_select .= "<option value={$t['id']} {$selectedStr}>{$t['name']}</option>";
            }
        }
        $parent_select .= "</select>";

        return $parent_select;
    }

    public static function getQuetionsView(Model $model): string
    {
        $view = new self($model);
        $view->getQuestions();
        return $view->html;
    }

    public static function getPagination(Collection $questions): string
    {
        $pagination = '';
        $i          = 0;
        foreach ($questions as $id => $el) {
            $i++;
            $pagination .= "<div data-pagination={$el['id']}>{$i}</div>";
        }

        return "<div class='pagination'>{$pagination}</div>";
    }

    public function pagination(Opentest $test): string
    {
        if (!$test) return '';
        $pagination = $this->getPagination($test->questions);
        $pagination = "<div class='navigation'>" .
            "<div class='test-name' data-test-id={$test->id}>{$test->name}</div>" .
            "{$pagination}</div>";
        return $this->pagination;
    }

    private static function getHtml($test): string
    {
        $testArr = $test->toArray();
        return ItemBuilder::build($test, 'opentest')
            ->del()
            ->save()
            ->toList()
            ->pageTitle('Редактирование открытых тестов')
            ->field(
                ItemFieldBuilder::build('id', $test)
                    ->class('opentests')
                    ->get()
            )
            ->field(
                ItemFieldBuilder::build('name', $test)
                    ->name('Имя')
                    ->contenteditable()
                    ->required()
                    ->get()
            )
            ->field(
                ItemFieldBuilder::build('isTest', $test)
                    ->name($testArr['isTest'] ? 'Тест' : 'Папка')
                    ->hidden()
                    ->get()
            )
            ->field(
                ItemFieldBuilder::build('enable', $test)
                    ->name('Показывать пользователю')
                    ->html(self::getEbabled($testArr))
                    ->get()
            )
            ->field(
                ItemFieldBuilder::build('opentest_id', $test)
                    ->name('Лежит в папке')
                    ->html(self::getParent($testArr))
                    ->get()
            )
            ->get();
    }

    private function getQuestions(): void
    {
        $page_name = 'Редактировать вопросы';
        $testId    = $this->model->fillable['id'] ?? 0;
        if (!$testId) {
            $error = 'Теста с таким номером нет.';
        } else {
            $test      = Opentest::findOneWhere('id', $testId);
            $questions =
                Openquestion::where('opentest_id', '=', $testId)
                    ->orderBy('sort')
                    ->get();
            foreach ($questions as &$question) {
                $question['answers'] = Openanswer::findAllWhere('openquestion_id', $question['id']);
            }
            $test['questions'] = $questions;
        }

        $this->html = FS::getFileContent(ROOT . '\app\view\Opentest\q-edit.php');
    }


    private static function getEbabled(array $item)
    {
        return SelectBuilder::build()
            ->field('enable')
            ->array(['0' => 'не показывать', '1' => 'показывать'])
            ->selected($item['enable'])
            ->get();
    }

    private static function getParent(array $item)
    {
        $testPaths = illuminateOpentest::whereNull('opentest_id')
            ->with('childs')
            ->get()
            ->toArray();

        $paths = SelectBuilder::build()
            ->field('opentest_id')
            ->tab('&nbsp;&nbsp;&nbsp;')
            ->tree2($testPaths)
            ->initialOption('', 0)
            ->selected($item['opentest_id'])
            ->get();
        return $paths;
    }


    private static function noElement()
    {
        return "
<div class='no-element'>" .
            "
	<div class='error'>Тест не найден</div>
	" .
            "
</div>";
    }

    public static function getUpdateView($id): string
    {

        $test    = illuminateOpentest::find($id);
        $testArr = $test->toArray();
        if ($test) {
            return self::getHtml($test);
        } else {
            return self::noElement();
        }

    }

    public static function doAccordion()
    {
        $tree = illuminateOpentest::whereNull('opentest_id')
            ->with('childs')
            ->get()
            ->toArray();

        return MyAccordion::build($tree)
            ->class('accordion_wrap')
            ->get();
    }

    public static function oldDoAccordion(): string
    {
        $accordion = AccordionBuilder::build(
            OpenTestRepository::tree(), '/adminsc/question/edit/'
        )
            ->relation('children')
            ->class('test-edit')
            ->ulBefore("<div class='arrow'></div>" . Icon::path())
            ->ulAfter(Icon::editWhite(), '/adminsc/test/edit/')
            ->liAfter(Icon::editWhite(), '/adminsc/test/edit/')
            ->isPathAttr("isTest")
            ->attachButtonAfter(ROOT . '/app/view/Accordion/Admin/edit_add-test-button.php')
            ->get();

        return "<div class='accordion_wrap'>{$accordion}</div>";
    }
}