<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'Redis' => 'get1',
  'app\\service\\Cache\\ICache' => 'get2',
  'app\\service\\Vite\\Vite' => 'get3',
  'subEntry1' => 'get4',
  'db.config' => 'get5',
  'Illuminate\\Database\\Capsule\\Manager' => 'get6',
  'app\\blade\\IView' => 'get7',
  'app\\service\\Router\\IRequest' => 'get8',
  'app\\service\\Router\\IRouteList' => 'get9',
  'orderItemsCount' => 'get10',
  'app\\blade\\Blade' => 'get11',
  'app\\service\\FS' => 'get12',
  'app\\service\\Logger\\ErrorLogger' => 'get13',
  'app\\service\\Router\\Router' => 'get14',
  'app\\service\\Vite\\ViteCompiler' => 'get15',
);

    protected function get1()
    {
        return $this->resolveFactory(static function () {
        return new \Predis\Client(
            [
                'scheme' => 'tcp',
                'host' => '127.0.0.1',
                'port' => 6379,
            ]
        );
    }, 'Redis');
    }

    protected function get2()
    {
        return $this->resolveFactory(static function () {
        return \app\service\Cache\Redis\Cache::getInstance();
    }, 'app\\service\\Cache\\ICache');
    }

    protected function get4()
    {
        return $this->delegateContainer->get('app\\service\\Vite\\ViteCompiler');
    }

    protected function get3()
    {
        $object = new app\service\Vite\Vite($this->get4());
        return $object;
    }

    protected function get5()
    {
        return [
            'driver' => 'mysql',
            'host' => 'localhost',
            'database' => 'vitex_test_3',
            'username' => 'root',
            'password' => '',
            'charset' => 'utf8',
            'collation' => 'utf8_unicode_ci',
            'prefix' => '',
        ];
    }

    protected function get6()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
        $capsule = new \Illuminate\Database\Capsule\Manager;
        $capsule->addConnection($c->get('db.config'));
        $capsule->setAsGlobal();
        $capsule->bootEloquent();
        return $capsule;
    }, 'Illuminate\\Database\\Capsule\\Manager');
    }

    protected function get7()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
        return new \app\blade\View(
            new \app\blade\Blade(),
            $c->get(\app\service\Router\IRequest::class)
        );
    }, 'app\\blade\\IView');
    }

    protected function get8()
    {
        return $this->resolveFactory(static function () {
        return \app\service\Router\Request::capture();
    }, 'app\\service\\Router\\IRequest');
    }

    protected function get9()
    {
        return $this->resolveFactory(static function () {
        return new \app\service\Router\RouteList();
    }, 'app\\service\\Router\\IRouteList');
    }

    protected function get10()
    {
        return $this->resolveFactory(static function () {
        return \app\repository\OrderRepository::count();
    }, 'orderItemsCount');
    }

    protected function get11()
    {
        $object = new app\blade\Blade();
        return $object;
    }

    protected function get12()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c, $dir) {
        return new \app\service\FS($dir . DIRECTORY_SEPARATOR,
            $c->get(\app\service\Logger\FileLogger::class),);
    }, 'app\\service\\FS');
    }

    protected function get13()
    {
        $object = new app\service\Logger\ErrorLogger('errors.txt');
        return $object;
    }

    protected function get14()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
        return new \app\service\Router\Router(
            $c->get(\app\service\Logger\ErrorLogger::class),
            $c->get(\app\service\Router\IRequest::class),
        );
    }, 'app\\service\\Router\\Router');
    }

    protected function get15()
    {
        $object = new app\service\Vite\ViteCompiler('', '', [
        ], '', '', '', '');
        return $object;
    }

}
