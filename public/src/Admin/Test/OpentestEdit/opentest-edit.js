import '../TestEdit/test-edit.scss'
import '../TestEdit/test-edit-menu.scss'
// import '../../components/popup.scss'

import './test-update.js.js'
import '../../admin.js'

import {$, debounce, post} from '../../../common.js'

import {_openquestion} from "../model/opentest/openquestion.js"
import sortable from "../../../components/sortable.js"
import _test from "../model/opentest/opentest.js";
import {_answer} from "../model/opentest/openanswer.js";
import pagination from "../../../components/pagination/pagination.js";

// debugger
let opentestEdit = $('.opentest-edit-wrapper')[0]
if (opentestEdit) {

  pagination()

  sortable('.opentest-edit-wrapper .questions',
    '.opentest-edit-wrapper .question-edit',
    'openquestion')

  $(opentestEdit).on('change', handleChange)

  $(opentestEdit).on('click', ({target}) => {
      const test = new _test()

      if (target.classList.contains('test-path__create')) {
        test.path_create()
      } else if (target.classList.contains('test__create')) {
        test.create()
      } else if (!!target.closest('.question__show-answers')) {
        _openquestion.showAnswers(target)
      } else if (!!target.closest('.question__delete')) {
        _openquestion.del(target)
      } else if (target.classList.contains('question__create-button')) {
        _openquestion.create(target)
      } else if (!!target.closest('.delete')) {
        _answer.del(target)
      } else if (target.classList.contains('answer__create-button')) {
        _answer.create(target)
      } else if (target.classList.contains('led')) {
        target.classList.toggle('animated')
      }
    }
  )

  let handleKeyup = async function ({target}) {
    if (target.classList.contains('text')) {
      let answer = target.closest('.answer')
      let quest = target.closest('.question-edit')
      if (answer) {
        saveAnswer(answer)
      } else if (quest) {
        let id = quest.dataset.id
        let question = target.innerText
        let res = await post('/adminsc/openquestion/updateOrCreate',
          {id, question})
      }
    }
  }

  let debouncedInput = debounce(handleKeyup)
  $(opentestEdit).on('keyup', debouncedInput)

}


async function saveAnswer(el) {
  let id = el.dataset.answerId
  let is_correct = +el.querySelector('input').checked
  let openquestion_id = el.closest('.question-edit').dataset.id
  let answer = el.querySelector('.text').innerText
  let res = await post('/adminsc/openanswer/updateOrCreate',
    {id, answer, openquestion_id, is_correct})

}

async function handleChange({target}) {
  let answer = target.closest('.answer')
  let parentSelect = target.closest('.question-edit__parent-select')

  if (answer) {
    saveAnswer(answer)
  }else if (parentSelect){
    _openquestion.changeParent(target)
  }

}



