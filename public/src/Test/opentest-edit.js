import './test-edit.scss'
import '../components/footer/footer.scss'

import './test-edit-menu.scss'
import '../components/popup.scss'

import './test-update'
import '../Admin/admin'

import {$, post, popup, debounce} from '../common'

import {_openquestion} from "./model/opentest/openquestion"
import sortable from "../components/sortable"
import _test from "./model/opentest/opentest";
import {_answer} from "./model/opentest/openanswer";


let opentestEdit = $('.opentest-edit-wrapper')[0]
if (opentestEdit) {
  sortable('.opentest-edit-wrapper .questions',
    '.opentest-edit-wrapper .question-edit',
    'openquestion')


  opentestEdit.addEventListener('click',
    ({target}) => {
      const test = new _test()
      switch (true) {
        case target.classList.contains('test-path__update'): {
          test.update()
          break;
        }
        case target.classList.contains('test__update'): {
          test.update()
          break;
        }
        case target.classList.contains('test__save'): {
          test.update()
          break;
        }
        case target.classList.contains('test__delete'): {
          test.delete()
          break;
        }
        case target.classList.contains('test-path__create'): {
          test.path_create()
          break;
        }
        case target.classList.contains('test__create'): {
          test.create()
          break;
        }


        // case !!target.closest('.question__save'): {
        //   _openquestion.save(target)
        //   break;
        // }
        case !!target.closest('.question__show-answers'): {
          _openquestion.showAnswers(target)
          break;
        }
        case !!target.closest('.question__delete'): {
          _openquestion.del(target)
          break;
        }
        case target.classList.contains('question__create-button'): {
          _openquestion.create(target)
          break;
        }
        case !!target.closest('.delete'): {
          _answer.del(target)
          break;
        }
        case target.classList.contains('answer__create-button'): {
          _answer.create(target)
          break;
        }

        case!!target.closest('.question-edit__parent-select'): {
          _openquestion.changeParent(target)
          break;
        }
      }

    }
  )

  let handleKeyup = async function ({target}) {

    if (target.classList.contains('text')) {
      let answer = target.closest('.answer')
      if (answer) {
        let id = answer.dataset.answerId
        let openquestion_id = target.closest('.question-edit').id
        answer = target.innerText
        // answer = answer.querySelector('.text').innerText
        let res = await post('/adminsc/openanswer/updateOrCreate',
          {id, answer,openquestion_id})
        res = JSON.parse(res)
        if (res.msg==='ok'){
          popup.show('Сохранен')
        }
      } else {
        let id = target.closest('.question-edit').id
        let question = target.innerText
        let res = await post('/adminsc/openquestion/updateOrCreate',
          {id, question})
        res = await JSON.parse(res)
        if (res.msg){
          popup.show(res.msg)
        }
      }

    }

  }

  let debouncedInput = debounce(handleKeyup)
  $(opentestEdit).on('keyup', debouncedInput)


}




