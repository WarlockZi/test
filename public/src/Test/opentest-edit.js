import './test-edit.scss'
import '../components/footer/footer.scss'

import './test-edit-menu.scss'
import '../components/popup.scss'

import './test-update'
import '../Admin/admin'

import {$, post, popup, debounce} from '../common'

import {_openquestion} from "./model/opentest/openquestion"
import sortable from "../components/sortable"
import _test from "./model/opentest/opentest";
import {_answer} from "./model/opentest/openanswer";


let opentestEdit = $('.opentest-edit-wrapper')[0]
if (opentestEdit) {

  sortable('.opentest-edit-wrapper .questions',
    '.opentest-edit-wrapper .question-edit',
    'openquestion')


  $(opentestEdit).on('change', handleChange)

  $(opentestEdit).on('click', ({target}) => {
      const test = new _test()
      if (target.classList.contains('test-path__update')) {
        test.update()
      } else if (target.classList.contains('test__update')) {
        test.update()
      } else if (target.classList.contains('test__save')) {
        test.update()
      } else if (target.classList.contains('test__delete')) {
        test.delete()
      } else if (target.classList.contains('test-path__create')) {
        test.path_create()
      } else if (target.classList.contains('test__create')) {
        test.create()
      } else if (!!target.closest('.question__show-answers')) {
        _openquestion.showAnswers(target)
      } else if (!!target.closest('.question__delete')) {
        _openquestion.del(target)
      } else if (target.classList.contains('question__create-button')) {
        _openquestion.create(target)
      } else if (!!target.closest('.delete')) {
        _answer.del(target)
      } else if (target.classList.contains('answer__create-button')) {
        _answer.create(target)
      } else if (!!target.closest('.question-edit__parent-select')) {
        _openquestion.changeParent(target)
      } else if (target.classList.contains('led')) {
        target.classList.toggle('animated')
      }
    }
  )

  let handleKeyup = async function ({target}) {

    if (target.classList.contains('text')) {
      let answer = target.closest('.answer')
      if (answer) {
        saveAnswer(answer)
      } else {
        let id = target.closest('.question-edit').id
        let question = target.innerText
        let res = await post('/adminsc/openquestion/updateOrCreate',
          {id, question})
        res = await JSON.parse(res)
      }
    }
  }

  let debouncedInput = debounce(handleKeyup)
  $(opentestEdit).on('keyup', debouncedInput)

}


async function saveAnswer(answerEl) {
  let id = answerEl.dataset.answerId
  let is_correct = +answerEl.querySelector('input').checked
  let openquestion_id = answerEl.closest('.question-edit').id
  let answer = answerEl.querySelector('.text').innerText
  let res = await post('/adminsc/openanswer/updateOrCreate',
    {id, answer, openquestion_id, is_correct})
  res = JSON.parse(res)
  if (res.msg === 'ok') {
    popup.show('Сохранен')
  }
}

async function handleChange({target}) {
  let answer = target.closest('.answer')

  if (answer) {
    saveAnswer(answer)
  }

}



