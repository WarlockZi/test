import {$, popup, post} from '../../../common'

export default class _test {

  constructor() {
    this.model = 'opentest'
  }

  async create() {
    let test = _test.serverModel()
    test.id = 0
    test.isTest = 1
    debugger
    let url = `/${this.model}/updateOrCreate`
    let res = await post(url, test)
    if (res) {
      window.location.href = `/adminsc/${model}/edit/${res.id}`
    }
  }

  id() {
    return id ?? $('.test-name')[0].dataset.testid
  }

  children() {
    let childrenLenght = $('.children').length
    if (childrenLenght)
      return childrenLenght
    return false
  }

  async path_create() {
    let test_path = _test.serverModel()
    test_path.id = 0
    test_path.isTest = 0
    let url = `/adminsc/${model}/create`
    let res = await post(url, test_path)
    if (res) {
      window.location.href = `/adminsc/${model}/edit/${res.id - 1}`
    }
  }

  name() {
    return $('.test-name')[0].innerText
  }

  async update() {
    let model = _test.serverModel()
    let url = `/adminsc/${model}/update/${model.id}`
    let res = await post(url, model)
    if (res) {
      window.location.href = `/adminsc/${model}/edit/${model.id}`
    }
  }

  async del() {
    if (_test.children()) {
      popup.show('Сначала удалите все тесты из папки')
      return false
    }

    let id = _test.id()
    let res = await post('/adminsc/${model}/delete', {id})
    if (res.notAdmin) {
      popup.show('Видимость теста скрыта. Чтобы удалить полностью - обратитесь к ГД')
      setTimeout(() => {
        window.location = `/adminsc/${model}/edit/400`
      }, 4000)
    } else {
      window.location = `/adminsc/${model}/edit/400`
    }

  }

  // currentQ() {
  //   return {
  //     id: $('.nav-active')[0].innerText - 1,
  //     QEl: $('.question.flex1')[0],
  //     navLength: $('[data-pagination]').length,
  //     QPrevc: $('.question.flex1')[0].previousElementSibling,
  //     QNextEl: $('.question.flex1')[0].nextElementSibling,
  //   }
  // }
  //
  //
  // viewModel() {
  //   return {
  //     id: +window.location.href.split('/').pop(),
  //     test_name: $('#test_name').text(),
  //     enable: $('#enable')[0],
  //     parent: $('select').selectedIndexValue(),
  //   }
  // }


  //
  // selectedValueCustomSelect(className) {
  //
  //   let select = $(`[data-field=${className}]`)[0]
  //   let selected = [...select.options].filter((opt) => opt.selected)
  //   if (selected) {
  //     return +selected[0].value
  //   }
  // }
  //
  //
  // serverModel() {
  //   let model = {
  //     id: +window.location.href.split('/').pop(),
  //     test_name: $('#test_name')[0].value,
  //     isTest: +$('[isTest]')[0].getAttribute('isTest'),
  //   }
  //
  //   let fields = $('.custom-select');
  //   [].forEach.call(fields, function (field) {
  //     model[field.dataset['field']] = field.dataset['id']
  //   })
  //   return model
  // }
}