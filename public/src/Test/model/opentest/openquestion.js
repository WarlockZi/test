import {$, popup, post, addTooltip} from "../../../common"

class openquestion {

  model = 'openquestion'
  questions = $('.questions>.question-edit')
  testId = +$('.questions')[0]?.dataset.testId ?? null
  questionCnt = $('.questions>.question-edit').length ?? null

  async create(target) {
    let id = 0
    let opentest_id = this.testId
    let sort = this.questionCnt+1
    let res = await post(`/adminsc/${this.model}/updateOrCreate`,
      {id,opentest_id,sort})
    res = await JSON.parse(res)

    if (res.id) {
      let clone = this.cloneEmptyModel()
      let addBtn = target.closest('.question__create-button')

      clone.querySelector('.sort').innerText = this.questionCnt + 1
      clone.querySelector('.text').innerText = ''
      clone.id = res.id
      addBtn.before(clone)
    }
  }

  cloneEmptyModel() {
    let question = $('.questions .question-edit')[0]
    if (question) {
      let q = question.cloneNode(true)
      let ans = q.querySelectorAll('.row .answer');
      [].forEach.call(ans, function (answer) {
        answer.remove()
      })
      return q
    }
  }

  async sort(upToQestionNumber) {

    let questionsEls = this.questions.filter(function (el, i) {
        if (i + 1 < upToQestionNumber) return el
      }
    )
    let toChange = questionsEls.map((el) => {
      return el.id
    })
    let res = await post(`/${this.model}/sort`, {toChange})
    // res = JSON.parse(res)
    // if (res.msg) {
    //   popup.show(res.msg)
    // }
    questionsEls.map((el, i) => {
      $(el).find('.sort').innerText = i + 1

    })
  }


  async changeParent(target) {
    // debugger

    if (target.tagName.toLowerCase() !== 'li') return

    let id = target.closest('.question-edit').id
    let test_id = target.dataset['value']
    let test_name = target.innerText
    if (!+id || !+test_id || !test_name) return
    let res = await post(`/adminsc/${this.model}/changeParent`, {id, test_id})
    res = JSON.parse(res)
    if (res.msg !== 'ok') throw (e);
    let question = target.closest('.question-edit')
    question.remove()
    popup.show('Перемещен в ' + test_name)
  }

  showAnswers(target) {
    let row = target.closest('.question-edit')
    let answers = $(row).find('.question__answers')
    answers.classList.toggle('height')
    answers.classList.toggle('scale')
    target.classList.toggle('rotate')
  }

  async del(target) {
    if (confirm("Удалить вопрос со всеми его ответами?")) {
      let question = target.closest('.question-edit')
      let id = question.id

      let res = await post(`/adminsc/${this.model}/delete`, {id})
      res = JSON.parse(res)
      if (res) {
        question.remove()
      }
    }
  }
}


export const _openquestion = new openquestion()