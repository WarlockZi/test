import {$, popup, post, addTooltip} from "../../../common"
import {_answer} from "./openanswer";


class openquestion {

  model = 'openquestion'
  questions = $('.questions>.question-edit')
  testId = +$('.questions')[0]?.dataset.testId??null
  questionCnt = $('.questions>.question-edit').length??null


  async sort(upToQestionNumber) {

    let questionsEls = this.questions.filter(function (el, i) {
        if (i + 1 < upToQestionNumber) return el
      }
    )
    let toChange = questionsEls.map((el) => {
      return el.id
    })
    let res = await post(`/${this.model}/sort`, {toChange})
    res = JSON.parse(res)
    if (res.msg) {
      popup.show(res.msg)
    }
    questionsEls.map((el, i) => {
      $(el).find('.sort').innerText = i + 1

    })
  }


  async changeParent(target) {
    // debugger

    if (target.tagName.toLowerCase()!=='li') return
    // let opt = target.options[target.selectedIndex]
    let id = target.closest('.question-edit').id
    let test_id = target.dataset['value']
    let test_name = target.innerText
    if (!+id||!+test_id||!test_name) return
    let res = await post(`/adminsc/${this.model}/changeParent`, {id, test_id})
    res = JSON.parse(res)
    if (res.msg !== 'ok') throw (e);
    let question = target.closest('.question-edit')
    question.remove()
    popup.show('Перемещен в ' + test_name)
  }


  showFirst() {
    let question = this.cloneEmptyModel()
    if (!question) return

    let model = this.viewModel(question)
    model.sort.innerText = '1'
    $(model.save).on('click', this.save)
    $(model.del).on('click', this.delete)

    $(question).addClass('question-edit')
    $(question).removeClass('question__create')

    let questions = $('.questions')[0]
    questions.prepend(question)
  }

  cloneEmptyModel() {
    let question = $('.questions .question-edit')[0]
    if (question) {
      let q = question.cloneNode(true)
      let ans = q.querySelectorAll('.row .answer');
        [].forEach.call(ans,function (answer) {
          answer.remove()
      })

    return q
    }
  }

  showAnswers(target) {
    let row = target.closest('.question-edit')
    let answers = $(row).find('.question__answers')
    answers.classList.toggle('height')
    answers.classList.toggle('scale')
    target.classList.toggle('rotate')
  }

  viewModel(el) {
    return {
      id: +el.id,
      el: el,
      sort: el.querySelector('.sort'),
      save: el.querySelector('.question__save'),
      text: el.querySelector('.question__text'),
      del: el.querySelector('.question__delete'),
      createAnswerButton: el.querySelector('.answer__create-button'),
      addButton: $($('.questions')[0]).find('.question__create-button'),
    }
  }

  serverModel() {
    return {
      question: {
        id: null,
        question: '',
        opentest_id: this.testId,
        sort: this.lastSort(),
      }
    }
  }

  lastSort() {
    let qs = this.questions
    let length = qs.length - 1
    let last = +this.viewModel(qs[length]).sort.innerText
    return last + 1
  }

  async create(e) {
    let q_id = await this.createOnServer(e)
    if (q_id) {
      this.createOnView(q_id)
    }
  }


  async createOnServer() {
    let question = this.serverModel()
    let res = await post(`/adminsc/${this.model}/updateOrCreate`, {question: question.question, answers: {}})
    res = await JSON.parse(res)

    return res.id
  }


  createOnView(q_id) {
    let clone = this.cloneEmptyModel()

    let model = this.viewModel(clone)
    model.sort.innerText = this.lastSort()
    model.text.innerText = ''
    model.el.id = q_id

    model.addButton.before(clone)
  }

  async save(target) {
    let question = target.closest('.question-edit')
    let res = await post(
      `/adminsc/${this.model}/updateOrCreate`,
      {
        question: this.getModelForServer(question),
        answers: this.getAnswers(question),
      })
    res = await JSON.parse(res)
    popup.show(res.msg)
  }

  async del(target) {
    if (confirm("Удалить вопрос со всеми его ответами?")) {
      let viewModel = this.viewModel(target.closest('.question-edit'))
      let id = viewModel.id

      let deleted = await this.deleteFromServer(id)
      if (deleted) {
        viewModel.el.remove()
        popup.show(deleted.msg)
      }
    }
  }

  async deleteFromServer(q_id) {
    let res = await post(`/adminsc/${this.model}/delete`, {q_id})
    return JSON.parse(res)
  }


  getModelForServer(question) {
    return {
      id: +question.id,
      opentest_id: this.testId,
      pic: '',
      question: $(question).find('.question__text').innerText,
      sort: +$(question).find('.sort').innerText,
    }
  }


  getAnswers(question) {
    let answerBlocks = question.querySelectorAll('.answer')
    return [...answerBlocks].map((a) => {
      return {
        id: +a.dataset['answerId'],
        answer: a.querySelector('.text').innerText,
        is_correct: +a.querySelector('[type="checkbox"]').checked,
        openquestion_id: +question.id,
        pic: '',
      }
    }, question)
  }
}

export const _openquestion = new openquestion()