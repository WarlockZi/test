import {$, popup, post} from '../../../common'

export let _answer = {

  el: (add_button) => {
    let answers = add_button.parentNode.querySelectorAll('.answer')
    let prev_sort = 0
    if (answers.length) {
      prev_sort = +$(answers[answers.length - 1]).find('.sort').innerText
    }
    let el = $('.answer__create-button')[0]
      .closest('.question__answers')
      .querySelector('.answer').cloneNode(true)

    return {
      el: el,
      id: 'new',
      q_id: +add_button.closest('.question-edit').id,
      previous_sort: prev_sort,
      answerCnt: answers.length,
      sort: $(el).find('.sort'),
      checked: $(el).find('input'),
      text: '',
      delete: $($(el).find('.delete')).on('click', function () {
        _answer.del(this)
      })
    }
  },
  getModelForServer(el) {
    return {
      answer: '',
      parent_question: el.q_id,
      correct_answer: 0,
      pica: ''
    }
  },

  async create(button) {

    let question = button.closest('.question-edit')
    let openquestion_id = question.id
    let sort = question.querySelectorAll('.answer').length + 1
    let res = await post('/openanswer/updateOrCreate',
      {openquestion_id, sort})
    res = JSON.parse(res)
    let id = +res.id
    if (id) {
      let html = res.html
      let el = _answer.el(button)
      button.insertAdjacentHTML("beforebegin", html)
    }else{
      popup.show('Сохранено')
    }
  },

  async del(target) {
    let del_button = target.closest('.delete')
    if (!del_button) return false
    if (confirm("Удалить этот ответ?")) {
      let answer = del_button.closest('.answer')
      let id = +answer.dataset['answerId']
      let res = await post('/openanswer/delete', {id})
      res = JSON.parse(res)
      if (res.msg === 'ok') {
        answer.remove()
        popup.show('Ответ удален')
      }
    }
  },
}
