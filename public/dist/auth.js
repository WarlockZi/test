(function(){"use strict";var __webpack_modules__={4:function(){eval("\n;// CONCATENATED MODULE: ./public/src/common.js\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nfunction dropDown(elementId) {\n  var dropdown = document.getElementById(elementId);\n\n  try {\n    showDropdown(dropdown);\n  } catch (e) {}\n\n  return false;\n}\n\n;\n\nfunction showDropdown(element) {\n  var event;\n  event = document.createEvent('MouseEvents');\n  event.initMouseEvent('mousedown', true, true, window);\n  element.dispatchEvent(event);\n}\n\n;\nlet validate = {\n  sort: () => {\n    let error = undefined.nextElementSibling;\n    let ar = undefined.value.match(/\\D+/);\n\n    if (ar) {\n      error.innerText = 'Только цифры';\n      error.style.opacity = '1';\n    } else {\n      if (error.style.opacity === \"1\") {\n        error.style.opacity = '0';\n      }\n    }\n  },\n  email: email => {\n    if (!email) return false;\n    let re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  },\n  password: password => {\n    if (!password) return false;\n    let re = /^[a-zA-Z\\-0-9]{6,20}$/;\n    return re.test(password);\n  }\n}; // function up() {\n//    var top = Math.max(document.body.scrollTop, document.documentElement.scrollTop);\n//    if (top > 0) {\n//       window.scrollBy(0, -100);\n//       var t = setTimeout('up()', 20);\n//    }\n//    else\n//       clearTimeout(t);\n//    return false;\n// }\n\nlet popup = {\n  show: function (txt, callback) {\n    let close = this.el('div', 'popup__close');\n    close.innerText = 'X';\n    let popup__item = this.el('div', 'popup__item');\n    popup__item.innerText = txt;\n    popup__item.append(close);\n    let popup = $('.popup').el[0];\n\n    if (!popup) {\n      popup = this.el('div', 'popup');\n    }\n\n    popup.append(popup__item);\n    popup.addEventListener('click', this.close, true);\n    document.body.append(popup);\n    let hideDelay = 5000;\n    setTimeout(() => {\n      popup__item.classList.remove('popup__item');\n      popup__item.classList.add('popup-hide');\n    }, hideDelay);\n    let removeDelay = hideDelay + 950;\n    setTimeout(() => {\n      popup__item.remove();\n\n      if (callback) {\n        callback();\n      }\n    }, removeDelay);\n  },\n  close: function (e) {\n    if (e.target.classList.contains('popup__close')) {\n      let popup = this.closest('.popup').remove();\n    }\n  },\n  el: function (tagName, className) {\n    let el = document.createElement(tagName);\n    el.classList.add(className);\n    return el;\n  }\n};\n\nconst uniq = array => Array.from(new Set(array));\n\nasync function get(key) {\n  let p = window.location.search;\n  p = p.match(new RegExp(key + '=([^&=]+)'));\n  return p ? p[1] : false;\n}\n\nasync function post(url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    data.token = document.querySelector('meta[name=\"token\"]').getAttribute('content');\n    let req = new XMLHttpRequest();\n    req.open('POST', url, true);\n    req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n    if (data instanceof FormData) {\n      req.send(data);\n    } else {\n      req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n      req.send('param=' + JSON.stringify(data));\n    }\n\n    req.onerror = function (e) {\n      reject(Error(\"Network Error\" + e));\n    };\n\n    req.onload = async function () {\n      resolve(req.response);\n    };\n  });\n}\n\nclass ElementCollection extends Array {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"el\", this);\n\n    _defineProperty(this, \"elType\", function () {\n      return {}.toString.call(this);\n    });\n\n    _defineProperty(this, \"value\", function () {\n      return this[0].getAttribute('value');\n    });\n\n    _defineProperty(this, \"attr\", function (attrName, attrVal) {\n      if (attrVal) {\n        this[0].setAttribute(attrName, attrVal);\n      }\n\n      return this[0].getAttribute(attrName);\n    });\n\n    _defineProperty(this, \"selectedIndexValue\", function () {\n      if (this.length) return this[0].selectedOptions[0].value;\n    });\n\n    _defineProperty(this, \"options\", function () {\n      if (this.length) return this[0].options;\n    });\n\n    _defineProperty(this, \"count\", function () {\n      return this.length;\n    });\n\n    _defineProperty(this, \"text\", function () {\n      if (this.length) return this[0].innerText;\n    });\n\n    _defineProperty(this, \"checked\", function () {\n      if (this.length) return this[0].checked;\n    });\n\n    _defineProperty(this, \"getWithStyle\", function (attr, val) {\n      let arr = [];\n      this.forEach(s => {\n        if (s.style[attr] === val) {\n          arr.push(s);\n        }\n      });\n      return arr;\n    });\n\n    _defineProperty(this, \"addClass\", function (className) {\n      this.forEach(s => {\n        s.classList.add(className);\n      });\n    });\n\n    _defineProperty(this, \"removeClass\", function (className) {\n      this.forEach(s => {\n        s.classList.remove(className);\n      });\n    });\n\n    _defineProperty(this, \"hasClass\", function (className) {\n      if (this.classList.contains(className)) return true;\n    });\n\n    _defineProperty(this, \"append\", function (el) {\n      this[0].appendChild(el);\n    });\n\n    _defineProperty(this, \"find\", function (selector) {\n      return this[0].querySelector(selector);\n    });\n\n    _defineProperty(this, \"css\", function (attr, val) {\n      if (!val) {\n        return this[0].style[attr];\n      }\n\n      this.forEach(s => {\n        s.style[attr] = val;\n      });\n    });\n  }\n\n  on(event, cbOrSelector, cb) {\n    if (typeof cbOrSelector === 'function') {\n      this.forEach(e => e.addEventListener(event, cbOrSelector));\n    } else {\n      this.forEach(elem => {\n        elem.addEventListener(event, e => {\n          if (e.target.matches(cbOrSelector)) cb(e);\n        });\n      });\n    }\n  }\n\n  ready(cb) {\n    const isReady = this.some(e => {\n      return e.readyState != null && e.readyState != 'loading';\n    });\n\n    if (isReady) {\n      cb();\n    } else {\n      document.addEventListener('DOMContentLoaded', cb);\n    }\n  }\n\n}\n\nfunction $(selector) {\n  if (typeof selector === 'string' || selector instanceof String) {\n    return new ElementCollection(...document.querySelectorAll(selector));\n  } else {\n    return new ElementCollection(selector);\n  }\n}\n\nfunction addTooltip(args) {\n  let ar = [...args.els];\n  ar.map(el => {\n    el.onmouseenter = function () {\n      let tip = document.createElement('div');\n      $(tip).addClass('tip');\n      tip.innerText = args.message;\n      el.append(tip);\n\n      let remove = () => tip.remove();\n\n      tip.addEventListener('mousemove', remove.bind(tip), true);\n    }.bind(args);\n\n    el.onmouseleave = () => {\n      let tip = el.querySelector('.tip');\n      tip.remove();\n    };\n  }, [args]);\n}\n\nclass test_delete_button {\n  constructor(elem) {\n    if (!elem) return;\n    this._elem = $(elem).el[0];\n    this._elem.onclick = this.delete;\n    this._elem.onmouseenter = this.showToolip;\n    this._elem.onmouseleave = this.hideTooltip;\n    this._elem.onmousemove = this.changeTooltipPos;\n  }\n\n  async delete() {\n    if (confirm('Удалить тест?')) {\n      let res = test.del();\n\n      if (res.msg === 'ok') {\n        window.location = '/test/edit';\n      }\n    }\n  }\n\n  showToolip(e) {\n    let x = e.clientX;\n    let y = e.clientY;\n    let tip = document.createElement('div');\n    $(tip).addClass('tip');\n    tip.style.top = y + 70 + 'px';\n    tip.style.left = x - 170 + 'px';\n    tip.innerText = this.getAttribute('tip');\n    this.tip = tip;\n    document.body.append(tip);\n  }\n\n  hideTooltip() {\n    this.tip.remove();\n  }\n\n  changeTooltipPos(e) {\n    this.tip.style.top = e.pageY + 35 + 'px';\n    this.tip.style.left = e.pageX - 170 + 'px';\n  }\n\n}\n\n\n;// CONCATENATED MODULE: ./public/src/components/header/header.js\n\n\nlet mobileMenu = $('.gamburger').on('click', mobile);\n\nfunction mobile(e) {\n  let mm = e.target.closest('.utils').querySelector('.mobile-menu');\n  mm.classList.toggle('show');\n}\n;// CONCATENATED MODULE: ./public/src/components/header/autocomplete.js\n\n\n[...$(\".search input\")].map(input => {\n  if (input) {\n    input.addEventListener('input', function () {\n      autocomplete(input);\n    }, true);\n  }\n});\n\nasync function autocomplete(input) {\n  let search = input.parentNode;\n  let result = $(search).find('.search__result');\n\n  if (input.value.length < 1) {\n    if (result) result.innerHTML = '';\n    return;\n  }\n\n  let data = await fetch('/search?q=' + input.value);\n  data = await data.json(data);\n\n  if (result.childNodes.length !== 0) {\n    result.innerHTML = '';\n  }\n\n  data.map(e => {\n    let a = document.createElement(\"a\");\n    a.href = e.alias;\n    a.innerHTML = `<img src='/pic/${e.preview_pic}' alt='${e.name}'>` + e.name;\n    result.appendChild(a);\n  });\n  $('body').on('click', function (e) {\n    if (result && e.target !== result) {\n      result.innerHTML = '';\n    }\n  });\n}\n;// CONCATENATED MODULE: ./public/src/components/alert/alert.js\n\n\n$(\"body\").on(\"click\", function (e) {\n  if (e.target.className === \"messageClose\") {\n    // alert(e.target.className)\n    window.location.href = \"/auth/cabinet\";\n  }\n});\n;// CONCATENATED MODULE: ./public/src/components/cookie/cookie.js\n\n\ncheck_cookie('cn');\n\nfunction check_cookie(cookie_name) {\n  if (getCookie(cookie_name)) $('#cookie-notice').css('bottom', '-100%');else $('#cookie-notice').css('bottom', \"0\");\n}\n\nfunction getCookie(cookie_name) {\n  return document.cookie.match('(^|;)?' + cookie_name + '=([^;]*)');\n}\n\n$('#cn-accept-cookie').on('click', clicked);\n\nfunction clicked() {\n  setCookie();\n  $('#cookie-notice').css('bottom', '-100%');\n}\n\nfunction setCookie() {\n  const date = new Date(),\n        minute = 60 * 1000,\n        day = minute * 60 * 24;\n  let days = 3;\n  date.setTime(date.getTime() + days * day);\n  document.cookie = \"cn=1; expires=\" + date + \"path=/; SameSite=lax\";\n}\n;// CONCATENATED MODULE: ./public/src/Auth/changepassword.js\n\n$('.changepassword').on('click', async function (e) {\n  e.preventDefault;\n  let res = await post('/auth/changepassword', {\n    'old_password': $('[name=\"old_password\"]').el[0].value,\n    'new_password': $('[name=\"new_password\"]').el[0].value\n  });\n\n  if (res === 'ok') {\n    let msg = $('.message').el[0];\n    msg.innerText = 'Пароль сменен';\n    $(msg).addClass('success');\n    $(msg).removeClass('error');\n  } else {\n    let msg = $('.message').el[0];\n    msg.innerText = 'Что-то пошло не так';\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  }\n});\n;// CONCATENATED MODULE: ./public/src/Auth/login.js\n\n\n$('.password-control').on('click', viewPassword);\n\nfunction viewPassword(event) {\n  let input = event.target.parentNode.querySelector('input');\n\n  if (input.getAttribute('type') == 'password') {\n    input.setAttribute('type', 'text');\n  } else {\n    input.setAttribute('type', 'password');\n  }\n\n  event.target.classList.toggle('view');\n}\n\n$(\"#login\").on('click', sendData);\n\nfunction sendData(e) {\n  e.preventDefault();\n  let email = $('input[type = email]').el[0].value;\n  let pass = $('input[name= password]').el[0].value;\n  if (validateEmailLogin(email, pass)) send(email, pass);\n}\n\nfunction validateEmailLogin(email, pass) {\n  let $message = $(\".message\").el[0];\n\n  if (!validate.email(email)) {\n    $message.innerText = \"Неправильный формат почты\";\n    $($message).addClass('error');\n    return false;\n  }\n\n  if (!validate.password(pass)) {\n    $message.innerText = \"Пароль может состоять из \\n \" + \"- Большие латинские бкувы \\n\" + \"- Маленькие латинские буквы \\n\" + \"- Цифры \\n\" + \"- Должен содержать не менее 6 символов\";\n    $($result).addClass('error');\n    return false;\n  }\n\n  return true;\n}\n\nasync function send(email, password) {\n  let res = await post('/auth/login', {\n    email,\n    password\n  });\n  res = JSON.parse(res);\n  let msg = $('.message').el[0];\n\n  if (res.msg === 'wrong pass') {\n    msg.innerHTML = 'Не верный email или пароль';\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  } else if (res.msg === 'not confirmed') {\n    msg.innerHTML = \"Зайдите на почту чтобы подтвердить регистрацию\";\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  } else if (res.msg === 'not_registered') {\n    msg.innerHTML = \"email не зарегистрирован <br> Для регистрации перейдите в раздел <a href = '/auth/register'>Регистрация</a>\";\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  } else if (res.msg === 'employee') {\n    window.location = '/adminsc';\n  } else if (res.msg === 'user') {\n    window.location = '/auth/cabinet';\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Auth/register.js\n\n$(\".forgot\").on(\"click\", async function () {\n  window.location.href = '/auth/returnpass';\n});\n$(\".login\").on(\"click\", async function () {\n  window.location.href = '/auth/login';\n});\n$(\".reg\").on(\"click\", async function () {\n  let email = $('input[type = email]')[0].value;\n  let password = $('input[name = password]')[0].value;\n  let msg = $(\".message\").el[0];\n\n  if (!email || !password) {\n    msg.innerText = \"Заполните email и пароль\";\n    $(msg).addClass('error');\n    return false;\n  }\n\n  if (email) {\n    if (!validate.email(email)) {\n      msg.innerText = \"Неправильный формат почты\";\n      $(msg).addClass('error');\n      return false;\n    }\n\n    if (password) {\n      if (!validate.password(password)) {\n        msg.innerText = \"Пароль может состоять из \\n \" + \"- больших латинских букв \\n\" + \"- маленьких латинских букв \\n\" + \"- цифр \\n\" + \"- должен содержать не менее 6 символов\";\n        $(msg).addClass('error');\n        return false;\n      }\n    }\n\n    let res = await register_send(email, password);\n  }\n});\n\nasync function register_send(email, password) {\n  let data = {\n    \"email\": email,\n    \"password\": password,\n    \"surName\": $(\"[name='surName']\").el[0].value,\n    \"name\": $(\"[name='name']\")[0].value,\n    \"token\": $('meta[name=\"token\"]')[0].getAttribute('content')\n  };\n  let res = await post('/auth/register', data);\n  let msg = $('.message');\n\n  if (res === 'confirm') {\n    msg.removeClass('error');\n    msg.addClass('success');\n    msg.el[0].innerHTML = '-Пользователь зарегистрирован.<br>' + '-Для подтверждения регистрации зайдите на почту, ' + '<bold>email</bold>.<br> ' + '-Перейдите по ссылке в письме.';\n  } else if (res === 'mail exists') {\n    msg.el[0].innerHTML = 'Эта почта уже зарегистрирована';\n    msg.removeClass('success');\n    msg.addClass('error');\n  } else if (res === 'empty password') {\n    msg.el[0].innerHTML = 'Зполните пароль';\n    msg.removeClass('success');\n    msg.addClass('error');\n  } else {\n    msg.el[0].innerHTML = res;\n    msg.removeClass('success');\n    msg.addClass('error');\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Auth/cabinet.js\n\n\n$('.form__button').on('submit', save);\n\nfunction save(e) {\n  let th = this;\n  let form = formData;\n}\n;// CONCATENATED MODULE: ./public/src/Auth/return_pass.js\n\n\n$('.returnpass').on('click', async function (e) {\n  let email = $('input[type=\"email\"]').el[0].value;\n  let res = await post('/auth/returnpass', {\n    email: email\n  });\n  res = await JSON.parse(res);\n\n  if (res) {\n    popup.show(res.msg, function () {\n      window.location = '/auth/login';\n    });\n  }\n});\n;// CONCATENATED MODULE: ./public/src/Auth/edit.js\n\n\n$(\"#save\").on(\"click\", async function (e) {\n  e.preventDefault();\n\n  function sex() {\n    const s = $('[name=\"sex\"]').el;\n\n    for (let f of s) {\n      if (f.checked) {\n        return f.value;\n      }\n    }\n\n    return 'm';\n  }\n\n  let data = {\n    // email: check_email(),\n    name: $('[name = \"name\"]').el[0].value,\n    surName: $('[name = \"surName\"]').el[0].value,\n    middleName: $('[name = \"middleName\"]').el[0].value,\n    birthDate: $('[name = \"birthDate\"]').el[0].value,\n    phone: $('[name = \"phone\"]').el[0].value,\n    sex: sex()\n  };\n  let res = await post('/user/edit', data);\n\n  if (res === 'ok') {\n    popup.show('Сохранено');\n  }\n}); // setTimeout(function () {\n//     let p = document.querySelector(\"p.result\");\n//     p.parentNode.remove();\n// }, 2000);\n;// CONCATENATED MODULE: ./public/src/Auth/auth.js\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")}},__webpack_exports__={};__webpack_modules__[4]()})();