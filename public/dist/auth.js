(function(){"use strict";var __webpack_modules__={941:function(){eval("\n;// CONCATENATED MODULE: ./public/src/common.js\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nfunction dropDown(elementId) {\n  var dropdown = document.getElementById(elementId);\n\n  try {\n    showDropdown(dropdown);\n  } catch (e) {}\n\n  return false;\n}\n\n;\n\nfunction showDropdown(element) {\n  var event;\n  event = document.createEvent('MouseEvents');\n  event.initMouseEvent('mousedown', true, true, window);\n  element.dispatchEvent(event);\n}\n\n;\nlet validate = {\n  sort: () => {\n    let error = undefined.nextElementSibling;\n    let ar = undefined.value.match(/\\D+/);\n\n    if (ar) {\n      error.innerText = 'Только цифры';\n      error.style.opacity = '1';\n    } else {\n      if (error.style.opacity === \"1\") {\n        error.style.opacity = '0';\n      }\n    }\n  },\n  email: email => {\n    if (!email) return false;\n    let text = \"Неправильный формат почты\";\n    let re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    let res = re.test(String(email).toLowerCase());\n    if (!res) return text;\n    return false;\n  },\n  password: password => {\n    if (!password) return false;\n    let text = \"Пароль может состоять из \\n \" + \"- Большие латинские бкувы \\n\" + \"- Маленькие латинские буквы \\n\" + \"- Цифры \\n\" + \"- Должен содержать не менее 6 символов\";\n    let res = /^[a-zA-Z\\-0-9]{6,20}$/.test(password);\n    if (!res) return text;\n    return false;\n  }\n}; // function up() {\n//    var top = Math.max(document.body.scrollTop, document.documentElement.scrollTop);\n//    if (top > 0) {\n//       window.scrollBy(0, -100);\n//       var t = setTimeout('up()', 20);\n//    }\n//    else\n//       clearTimeout(t);\n//    return false;\n// }\n\nlet popup = {\n  show: function (txt, callback) {\n    let close = this.el('div', 'popup__close');\n    close.innerText = 'X';\n    let popup__item = this.el('div', 'popup__item');\n    popup__item.innerText = txt;\n    popup__item.append(close);\n    let popup = $('.popup')[0];\n\n    if (!popup) {\n      popup = this.el('div', 'popup');\n    }\n\n    popup.append(popup__item);\n    popup.addEventListener('click', this.close, true);\n    document.body.append(popup);\n    let hideDelay = 5000;\n    setTimeout(() => {\n      popup__item.classList.remove('popup__item');\n      popup__item.classList.add('popup-hide');\n    }, hideDelay);\n    let removeDelay = hideDelay + 950;\n    setTimeout(() => {\n      popup__item.remove();\n\n      if (callback) {\n        callback();\n      }\n    }, removeDelay);\n  },\n  close: function (e) {\n    if (e.target.classList.contains('popup__close')) {\n      let popup = this.closest('.popup').remove();\n    }\n  },\n  el: function (tagName, className) {\n    let el = document.createElement(tagName);\n    el.classList.add(className);\n    return el;\n  }\n};\n\nconst uniq = array => Array.from(new Set(array));\n\nasync function get(key) {\n  let p = window.location.search;\n  p = p.match(new RegExp(key + '=([^&=]+)'));\n  return p ? p[1] : false;\n}\n\nasync function post(url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    data.token = document.querySelector('meta[name=\"token\"]').getAttribute('content');\n    let req = new XMLHttpRequest();\n    req.open('POST', url, true);\n    req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n    if (data instanceof FormData) {\n      req.send(data);\n    } else {\n      req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n      req.send('param=' + JSON.stringify(data));\n    }\n\n    req.onerror = function (e) {\n      reject(Error(\"Network Error\" + e));\n    };\n\n    req.onload = async function () {\n      resolve(req.response);\n    };\n  });\n}\n\nclass ElementCollection extends Array {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"value\", function () {\n      return this[0].getAttribute('value');\n    });\n\n    _defineProperty(this, \"attr\", function (attrName, attrVal) {\n      if (attrVal) {\n        this[0].setAttribute(attrName, attrVal);\n      }\n\n      return this[0].getAttribute(attrName);\n    });\n\n    _defineProperty(this, \"selectedIndexValue\", function () {\n      if (this.length) return this[0].selectedOptions[0].value;\n    });\n\n    _defineProperty(this, \"options\", function () {\n      if (this.length) return this[0].options;\n    });\n\n    _defineProperty(this, \"count\", function () {\n      return this.length;\n    });\n\n    _defineProperty(this, \"text\", function () {\n      if (this.length) return this[0].innerText;\n    });\n\n    _defineProperty(this, \"checked\", function () {\n      if (this.length) return this[0].checked;\n    });\n\n    _defineProperty(this, \"getWithStyle\", function (attr, val) {\n      let arr = [];\n      this.forEach(s => {\n        if (s.style[attr] === val) {\n          arr.push(s);\n        }\n      });\n      return arr;\n    });\n\n    _defineProperty(this, \"addClass\", function (className) {\n      this.forEach(s => {\n        s.classList.add(className);\n      });\n    });\n\n    _defineProperty(this, \"removeClass\", function (className) {\n      this.forEach(s => {\n        s.classList.remove(className);\n      });\n    });\n\n    _defineProperty(this, \"hasClass\", function (className) {\n      if (this.classList.contains(className)) return true;\n    });\n\n    _defineProperty(this, \"append\", function (el) {\n      this[0].appendChild(el);\n    });\n\n    _defineProperty(this, \"find\", function (item) {\n      if (typeof item === 'string') {\n        return this[0].querySelector(item);\n      } else {\n        let filtered = this[0].filter(el => {\n          return el === item;\n        });\n        return filtered[0];\n      }\n    });\n\n    _defineProperty(this, \"findAll\", function (item) {\n      if (typeof item === 'string') {\n        return this[0].querySelectorAll(item);\n      }\n    });\n\n    _defineProperty(this, \"css\", function (attr, val) {\n      if (!val) {\n        return this[0].style[attr];\n      }\n\n      this.forEach(s => {\n        s.style[attr] = val;\n      });\n    });\n  }\n\n  // el = this\n  // elType = function(){return {}.toString.call(this)}\n  on(event, cbOrSelector, cb) {\n    if (typeof cbOrSelector === 'function') {\n      this.forEach(e => e.addEventListener(event, cbOrSelector));\n    } else {\n      this.forEach(elem => {\n        elem.addEventListener(event, e => {\n          if (e.target === cbOrSelector) cb(e);\n        });\n      });\n    }\n  }\n\n  ready(cb) {\n    const isReady = this.some(e => {\n      return e.readyState != null && e.readyState != 'loading';\n    });\n\n    if (isReady) {\n      cb();\n    } else {\n      document.addEventListener('DOMContentLoaded', cb);\n    }\n  }\n\n}\n\nfunction $(selector) {\n  if (typeof selector === 'string' || selector instanceof String) {\n    return new ElementCollection(...document.querySelectorAll(selector));\n  } else {\n    return new ElementCollection(selector);\n  }\n}\n\nfunction addTooltip(args) {\n  [].forEach.call(args, el => {\n    el.onmouseenter = function () {\n      let tip = document.createElement('div');\n      tip.classList.add('tip');\n      tip.innerText = args.message;\n      el.append(tip);\n\n      let remove = () => tip.remove();\n\n      tip.addEventListener('mousemove', remove.bind(tip), true);\n    }.bind(args);\n\n    el.onmouseleave = () => {\n      let tip = el.querySelector('.tip');\n      tip.remove();\n    };\n  });\n}\n\n\n;// CONCATENATED MODULE: ./public/src/components/header/header.js\n\n // debugger\n\nlet gumburger = $('.gamburger')[0];\n\nif (gumburger) {\n  let mobileMenu = $('.gamburger').on('click', mobile);\n}\n\nfunction mobile(e) {\n  let mm = e.target.closest('.utils').querySelector('.mobile-menu');\n  mm.classList.toggle('show');\n}\n;// CONCATENATED MODULE: ./public/src/components/header/autocomplete.js\n\n\n[...$(\".search input\")].map(input => {\n  if (input) {\n    input.addEventListener('input', function () {\n      autocomplete(input);\n    }, true);\n  }\n});\n\nasync function autocomplete(input) {\n  let search = input.parentNode;\n  let result = $(search).find('.search__result');\n\n  if (input.value.length < 1) {\n    if (result) result.innerHTML = '';\n    return;\n  }\n\n  let data = await fetch('/search?q=' + input.value);\n  data = await data.json(data);\n\n  if (result.childNodes.length !== 0) {\n    result.innerHTML = '';\n  }\n\n  data.map(e => {\n    let a = document.createElement(\"a\");\n    a.href = e.alias;\n    a.innerHTML = `<img src='/pic/${e.preview_pic}' alt='${e.name}'>` + e.name;\n    result.appendChild(a);\n  });\n  $('body').on('click', function (e) {\n    if (result && e.target !== result) {\n      result.innerHTML = '';\n    }\n  });\n}\n;// CONCATENATED MODULE: ./public/src/components/showPassword/showPassword.js\n\n\nfunction showPassword() {\n  let showPassword = $('.password-control')[0];\n\n  if (showPassword) {\n    $(showPassword).on('click', viewPassword);\n\n    function viewPassword(_ref) {\n      let {\n        target\n      } = _ref;\n      let input = target.parentNode.querySelector('input');\n\n      if (input.getAttribute('type') === 'password') {\n        input.setAttribute('type', 'text');\n      } else {\n        input.setAttribute('type', 'password');\n      }\n\n      target.classList.toggle('view');\n    }\n  }\n}\n;// CONCATENATED MODULE: ./public/src/components/cookie/cookie.js\n\n\ncheck_cookie('cn');\n\nfunction check_cookie(cookie_name) {\n  if (getCookie(cookie_name)) $('#cookie-notice').css('bottom', '-100%');else $('#cookie-notice').css('bottom', \"0\");\n}\n\nfunction getCookie(cookie_name) {\n  return document.cookie.match('(^|;)?' + cookie_name + '=([^;]*)');\n}\n\n$('#cn-accept-cookie').on('click', clicked);\n\nfunction clicked() {\n  setCookie();\n  $('#cookie-notice').css('bottom', '-100%');\n}\n\nfunction setCookie() {\n  const date = new Date(),\n        minute = 60 * 1000,\n        day = minute * 60 * 24;\n  let days = 3;\n  date.setTime(date.getTime() + days * day);\n  document.cookie = \"cn=1; expires=\" + date + \"path=/; SameSite=lax\";\n}\n;// CONCATENATED MODULE: ./public/src/Auth/changepassword.js\n\n$('.changepassword').on('click', async function (e) {\n  let data = {\n    'old_password': $('[name=\"old_password\"]')[0].value,\n    'new_password': $('[name=\"new_password\"]')[0].value\n  };\n  let msg = $('.message')[0];\n  let res = await post('/auth/changepassword', data);\n\n  if (res === 'ok') {\n    msg.innerText = 'Пароль сменен';\n    $(msg).addClass('success');\n    $(msg).removeClass('error');\n  } else {\n    msg.innerText = 'Что-то пошло не так';\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  }\n});\n;// CONCATENATED MODULE: ./public/src/Auth/login.js\n\n\nlet loginForm = $(\"[data-auth='login']\")[0];\n\nif (loginForm) {\n  $(loginForm).on('click', sendData.bind(undefined));\n}\n\nlet email = $('input[type = email]')[0];\nlet login_pass = $('input[name= password]')[0];\nlet msg = $('.message')[0];\n\nfunction sendData(_ref) {\n  let {\n    target\n  } = _ref;\n\n  if (target.classList.contains('submit__button')) {\n    if (validateData()) parseLoginResponse();\n  }\n}\n\nfunction validateData() {\n  let error = validate.email(email.value);\n\n  if (error) {\n    msg.innerText = msg.innerText + error;\n    $(msg).addClass('error');\n    return false;\n  }\n\n  let su = \"vvoronik@yandex.ru\" === email.value;\n\n  if (!su) {\n    error = validate.password(login_pass.value);\n\n    if (error) {\n      msg.innerText = msg.innerText + error;\n      $(msg).addClass('error');\n      return false;\n    }\n  }\n\n  return true;\n}\n\nasync function parseLoginResponse() {\n  let data = {\n    \"email\": email.value,\n    \"password\": login_pass.value\n  };\n  let res = await post('/auth/login', data);\n  res = JSON.parse(res);\n\n  if (res.msg === 'Не верный email или пароль') {\n    msg.innerHTML = res.msg;\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  } else if (res.msg === 'Пользователь не зарегистрирован') {\n    msg.innerHTML = \"email не зарегистрирован <br> Для регистрации перейдите в раздел <a href = '/auth/register'>Регистрация</a>\";\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  } else if (res.msg === 'Зайдите на почту чтобы подтвердить регистрацию') {\n    msg.innerHTML = res.msg;\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  } else if (res.msg === 'employee') {\n    window.location = '/adminsc';\n  } else if (res.msg === 'user') {\n    window.location = '/auth/cabinet';\n  } else {\n    msg.innerText = res.msg;\n    $(msg).addClass('error');\n    $(msg).removeClass('success');\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Auth/register.js\n\nlet registerForm = $(\"[data-auth='register']\")[0];\n\nif (registerForm) {\n  $(registerForm).on('click', register_sendData.bind(undefined));\n}\n\nlet register_email = $('input[type = email]')[0];\nlet register_password = $('input[name = password]')[0];\nlet register_msg = $(\".message\")[0];\n\nfunction register_sendData() {\n  if (register_validateData()) parseRegisterResponse();\n}\n\nfunction register_validateData() {\n  let error = validate.email(register_email.value);\n\n  if (error) {\n    register_msg.innerText = register_msg.innerText + error;\n    $(register_msg).addClass('error');\n    return false;\n  }\n\n  error = validate.password(pass.value);\n\n  if (error) {\n    register_msg.innerText = register_msg.innerText + error;\n    $(register_msg).addClass('error');\n    return false;\n  }\n\n  return true;\n}\n\nasync function parseRegisterResponse() {\n  let data = {\n    \"email\": register_email.value,\n    \"password\": register_password.value,\n    \"surName\": $(\"[name='surName']\")[0].value,\n    \"name\": $(\"[name='name']\")[0].value\n  };\n  let res = await post('/auth/register', data);\n\n  if (res === 'confirm') {\n    register_msg.removeClass('error');\n    register_msg.addClass('success');\n    register_msg[0].innerHTML = '-Пользователь зарегистрирован.<br>' + '-Для подтверждения регистрации зайдите на почту, ' + '<bold>email</bold>.<br> ' + '-Перейдите по ссылке в письме.';\n  } else if (res === 'mail exists') {\n    register_msg[0].innerHTML = 'Эта почта уже зарегистрирована';\n    register_msg.removeClass('success');\n    register_msg.addClass('error');\n  } else {\n    register_msg[0].innerHTML = res;\n    register_msg.removeClass('success');\n    register_msg.addClass('error');\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Auth/return_pass.js\n\n\n$('.returnpass').on('click', async function (e) {\n  let email = $('input[type=\"email\"]')[0].value;\n  let res = await post('/auth/returnpass', {\n    email: email\n  });\n  res = await JSON.parse(res);\n\n  if (res) {\n    popup.show(res.msg, function () {\n      window.location = '/auth/login';\n    });\n  }\n});\n;// CONCATENATED MODULE: ./public/src/Auth/getSex.js\n\nfunction getSex() {\n  function sex() {\n    const s = $('[name=\"sex\"]');\n\n    for (let f of s) {\n      if (f.checked) {\n        return f.value;\n      }\n    }\n\n    return 'm';\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Auth/edit.js\n\n\n\n$(\"#save\").on(\"click\", async function (e) {\n  e.preventDefault();\n  let data = {\n    name: $('[name = \"name\"]')[0].value,\n    surName: $('[name = \"surName\"]')[0].value,\n    middleName: $('[name = \"middleName\"]')[0].value,\n    birthDate: $('[name = \"birthDate\"]')[0].value,\n    phone: $('[name = \"phone\"]')[0].value,\n    sex: getSex()\n  };\n  let res = await post('/user/edit', data);\n\n  if (res === 'ok') {\n    popup.show('Сохранено');\n  }\n});\n;// CONCATENATED MODULE: ./public/src/components/list/list.js\n\n\nfunction list() {\n  // debugger;\n  // $('html').ready(function () {\n  const tables = $('.custom-list__wrapper');\n\n  if (tables) {\n    [].forEach.call(tables, function (table) {\n      const contenteditable = $('[contenteditable]');\n      const headers = table.querySelectorAll('.head');\n      const sortables = table.querySelectorAll('[data-sort]');\n      const inputs = $(table).findAll('.head input');\n      const ids = $(table)[0].querySelectorAll('.id:not(.head');\n      const modelName = table.dataset['model'];\n      const rows = [];\n      $(table).on('click', handleClick.bind(this));\n      $(table).on('keyup', handleKeyUp.bind(this)); /// DEBOUNCE\n\n      const debounce = function (fn) {\n        let time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 700;\n        let timeout;\n        return function () {\n          const functionCall = () => fn.apply(this, arguments);\n\n          clearTimeout(timeout);\n          timeout = setTimeout(functionCall, time);\n        };\n      };\n\n      let debouncedInput = debounce(handleInput);\n\n      function handleKeyUp(_ref) {\n        let {\n          target\n        } = _ref;\n\n        // contenteditable\n        if (target.hasAttribute('contenteditable')) {\n          debouncedInput(table, contenteditable, target); /// search\n        } else if (target.closest('.head')) {\n          let header = target.closest('.head');\n          let index = [].findIndex.call(headers, (el, i, inputs) => {\n            return el === header;\n          });\n          search(index, target);\n        }\n      }\n\n      function handleClick(_ref2) {\n        let {\n          target\n        } = _ref2;\n\n        /// create\n        if (target.className === 'add-model') {\n          modelCreate(modelName); /// delete\n        } else if (target.className === '.del:not(.head)' || target.closest('.del:not(.head)')) {\n          modelDel(target.closest('.del:not(.head)')); /// edit\n        } else if (target.className === '.edit:not(.head)' || target.closest('.edit:not(.head)')) {\n          let id = target.closest('.edit:not(.head)').dataset['id'];\n          window.location = `/adminsc/${modelName}/edit/${id}`; /// sort\n        } else if (target.classList.contains('head')) {\n          let header = target.closest('.head');\n          let index = [].findIndex.call(headers, (el, i, inputs) => {\n            return el === header;\n          });\n          sortColumn(index);\n        }\n      } // DELETE\n\n\n      async function modelDel(el) {\n        // debugger\n        let id = el.dataset['id'];\n        let res = await post(`/adminsc/${modelName}/delete`, {\n          id\n        });\n        res = JSON.parse(res);\n\n        if (res.msg === 'ok') {\n          delView(id);\n          popup.show(`id : ${id} удалено`);\n        }\n      }\n\n      function delView(id) {\n        let arr = $(`[data-id='${id}']`);\n        [].forEach.call(arr, function (el) {\n          el.remove();\n        });\n      } // CREATE\n\n\n      async function modelCreate(modelName, e) {\n        let res = await post(`/adminsc/${modelName}/create`, {});\n        res = JSON.parse(res);\n\n        if (res.id) {\n          newRow(res.id - 1);\n        }\n      }\n\n      function newRow(id) {\n        let Row = [...rows[0]];\n        [].forEach.call(Row, function (el) {\n          let newEl = el.cloneNode(true);\n          let tableContent = $(table).find('.custom-list');\n          tableContent.appendChild(newEl);\n\n          if (['id'].includes(newEl.className)) {\n            newEl.innerText = id;\n          } else if (!['del', 'edit', 'save'].includes(newEl.className)) {\n            newEl.innerText = '';\n          }\n\n          newEl.dataset['id'] = id;\n        });\n      } /// SEARCH\n\n\n      function showAllRows() {\n        [].forEach.call(rows, row => {\n          [].forEach.call(row, el => {\n            el.style.display = 'flex';\n          });\n        });\n      }\n\n      function search(index, input) {\n        showAllRows();\n        const value = input.value;\n        [].forEach.call(inputs, inp => {\n          if (inp !== input) inp.value = '';\n        });\n        [].forEach.call(rows, function (row) {\n          const str = row[index].innerText;\n          const regexp = new RegExp(`${value}`, 'gi');\n\n          if (!str.match(regexp)) {\n            [].forEach.call(row, el => {\n              el.style.display = 'none';\n            });\n          }\n        });\n      }\n\n      ; // SORT\n\n      function sortColumn(index) {\n        // Получить текущее направление\n        const direction = directions[index] || 'asc'; // Фактор по направлению\n\n        const multiplier = direction === 'asc' ? 1 : -1;\n        const newRows = Array.from(rows);\n        newRows.sort(function (rowA, rowB) {\n          const cellA = rowA[index].innerHTML;\n          const cellB = rowB[index].innerHTML;\n          const a = transform(index, cellA);\n          const b = transform(index, cellB);\n\n          switch (true) {\n            case a > b:\n              return 1 * multiplier;\n\n            case a < b:\n              return -1 * multiplier;\n\n            case a === b:\n              return 0;\n          }\n        }); // Удалить старые строки\n\n        [].forEach.call(rows, function (nodeList) {\n          [].forEach.call(nodeList, el => {\n            el.remove();\n          });\n        }); // Поменять направление\n\n        directions[index] = direction === 'asc' ? 'desc' : 'asc'; // Добавить новую строку\n\n        newRows.forEach(function (newRow) {\n          newRow = Array.from(newRow);\n          newRow.reverse();\n          [].forEach.call(newRow, el => {\n            headers[headers.length - 1].after(el);\n          });\n        });\n      }\n\n      ; /// get table rows array\n\n      for (let i = 0; i < ids.length; i++) {\n        let id = ids[i].dataset.id;\n        let row = $(table)[0].querySelectorAll(`[data-id='${id}']`);\n        rows.push(row);\n      } // Направление сортировки\n\n\n      const directions = Array.from(sortables).map(function (sortable) {\n        return '';\n      }); // Преобразовать содержимое данной ячейки в заданном столбце\n\n      function transform(index, content) {\n        // Получить тип данных столбца\n        const type = sortables[index].getAttribute('data-type');\n\n        switch (type) {\n          case 'number':\n            return parseFloat(content);\n\n          case 'string':\n          default:\n            return content;\n        }\n      }\n\n      ; /// INPUT\n\n      function handleInput(table, contenteditable, target) {\n        if (!target.hasAttribute('contenteditable')) return false;\n        let model = makeServerModel(target, modelName);\n        save(model);\n      }\n\n      async function save(model) {\n        let url = `/adminsc/${model.modelName}/update`;\n        let res = await post(url, model.model);\n        res = JSON.parse(res);\n\n        if (res.msg === 'ok') {\n          popup.show('Сохранено!');\n        }\n      }\n\n      function makeServerModel(el, modelName) {\n        let field = el.dataset['field'];\n        return {\n          model: {\n            token: $(),\n            id: el.dataset.id,\n            [field]: el.innerText\n          },\n          modelName\n        };\n      }\n    });\n  } // })\n\n}\n;// CONCATENATED MODULE: ./public/src/components/multiselect/multiselect.js\n\n\nfunction multiselect() {\n  function getSelected() {\n    if (multi) {\n      let selected = [].map.call(multi, function (select) {\n        let chips = select.querySelectorAll('.chip-wrap');\n        let objs = [].map.call(chips, function (chip) {\n          return chip.dataset.id;\n        });\n        let obj = {};\n        obj.field = select.dataset.field;\n        obj.ids = objs;\n        return obj;\n      });\n    }\n\n    debugger;\n  }\n\n  let multi = $('[multi-select] ');\n\n  if (multi) {\n    [].forEach.call(multi, function (select) {\n      select.addEventListener('click', handleClick, false);\n      select.addEventListener('blur', handleBlur, false);\n\n      function handleBlur(_ref) {\n        let {\n          target\n        } = _ref;\n        let show = $(this).find('.show');\n\n        if (show) {\n          show.classList.remove('show');\n        }\n      }\n\n      function handleClick(_ref2) {\n        let {\n          target\n        } = _ref2;\n        let multi = target.closest('[multi-select]'); // открыть выбор элементов\n\n        if (target.closest('.wrap') && target.tagName.toLowerCase() === 'svg') {\n          // let multiselect = target.closest('[multi-select] ')\n          let ul = multi.querySelector('ul');\n          ul.classList.toggle('show'); // нажатие по крестику чипа\n        } else if (['del'].includes(target.className)) {\n          let id = target.closest('.chip').dataset.id;\n          toggleBackground(id);\n          let chip = target.closest('.chip');\n          chip.remove(); // выбор элемента, проверка существования чипа и его добавление\n        } else if (target.tagName.toLowerCase() === 'label') {\n          let id = target.dataset.id; // let m = target.closest('[multi-select] ')\n\n          let chips = multi.querySelectorAll('.chip');\n          let exist = [].some.call(chips, chip => {\n            return chip.dataset.id === id;\n          });\n          let wrap = $(multi).find('.chip-wrap');\n\n          if (!exist) {\n            target.classList.toggle('selected');\n            let chip = createChip(id);\n            wrap.append(chip);\n          } else {\n            target.classList.toggle('selected');\n            wrap.querySelector(`[data-id='${id}']`).remove();\n          }\n        }\n\n        function toggleBackground(id) {\n          // let multi = target.closest('[multi-select] ')\n          $(multi).find(`label[data-id='${id}']`).classList.remove('selected');\n        }\n\n        function createChip(id) {\n          let chip = document.createElement('div');\n          chip.classList.add('chip');\n          chip.innerText = target.innerText;\n          chip.dataset['id'] = id;\n          let del = document.createElement('div');\n          del.classList.add('del');\n          del.innerText = 'X';\n          chip.append(del);\n          return chip;\n        }\n      }\n    });\n  }\n}\n;// CONCATENATED MODULE: ./public/src/components/catalog-item/catalog-item.js\n\n\nfunction catalogItem() {\n  let customCatalogItem = $('.custom-catalog-item__wrapper')[0];\n\n  if (customCatalogItem) {\n    $(customCatalogItem).on('click', handleClick);\n  }\n\n  async function handleClick(_ref) {\n    let {\n      target\n    } = _ref;\n    let item = $(customCatalogItem).find('.custom-catalog-item');\n    let modelName = item.dataset.model;\n\n    if (target.closest('.save')) {\n      let model = getModel();\n      let res = await post(`/adminsc/${modelName}/updateorcreate`, {\n        model\n      });\n      res = JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        popup.show('Сохранено');\n      }\n    } else if (target.closest('.del')) {\n      let id = item.dataset.id;\n      let res = await post(`/adminsc/${modelName}/delete`, {\n        id\n      });\n      res = JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        window.location.href = `/adminsc/${modelName}/list`;\n      }\n    }\n  }\n\n  function getModel() {\n    let fields = $('[data-field]');\n    let obj = {}; // debugger;\n\n    [].map.call(fields, field => {\n      if (field.hasAttribute('multi-select')) {\n        let chips = field.querySelectorAll('.chip');\n        let ids = [].map.call(chips, chip => {\n          return chip.dataset.id;\n        });\n        obj[field.dataset.field] = ids.toString();\n      } else {\n        obj[field.dataset.field] = field.innerText;\n      }\n    }, obj);\n    return obj;\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Auth/auth.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlist();\nmultiselect();\ncatalogItem();\nshowPassword();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///941\n")}},__webpack_exports__={};__webpack_modules__[941]()})();