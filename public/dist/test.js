(function(){"use strict";var __webpack_modules__={645:function(){eval("\n;// CONCATENATED MODULE: ./public/src/common.js\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nfunction dropDown(elementId) {\n  var dropdown = document.getElementById(elementId);\n\n  try {\n    showDropdown(dropdown);\n  } catch (e) {}\n\n  return false;\n}\n\n;\n\nfunction showDropdown(element) {\n  var event;\n  event = document.createEvent('MouseEvents');\n  event.initMouseEvent('mousedown', true, true, window);\n  element.dispatchEvent(event);\n}\n\n;\nlet validate = {\n  sort: () => {\n    let error = undefined.nextElementSibling;\n    let ar = undefined.value.match(/\\D+/);\n\n    if (ar) {\n      error.innerText = 'Только цифры';\n      error.style.opacity = '1';\n    } else {\n      if (error.style.opacity === \"1\") {\n        error.style.opacity = '0';\n      }\n    }\n  },\n  email: email => {\n    if (!email) return false;\n    let re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  },\n  password: password => {\n    if (!password) return false;\n    let re = /^[a-zA-Z\\-0-9]{6,20}$/;\n    return re.test(password);\n  }\n}; // function up() {\n//    var top = Math.max(document.body.scrollTop, document.documentElement.scrollTop);\n//    if (top > 0) {\n//       window.scrollBy(0, -100);\n//       var t = setTimeout('up()', 20);\n//    }\n//    else\n//       clearTimeout(t);\n//    return false;\n// }\n\nlet popup = {\n  show: function (txt, callback) {\n    let close = this.el('div', 'popup__close');\n    close.innerText = 'X';\n    let popup__item = this.el('div', 'popup__item');\n    popup__item.innerText = txt;\n    popup__item.append(close);\n    let popup = common_$('.popup').el[0];\n\n    if (!popup) {\n      popup = this.el('div', 'popup');\n    }\n\n    popup.append(popup__item);\n    popup.addEventListener('click', this.close, true);\n    document.body.append(popup);\n    let hideDelay = 5000;\n    setTimeout(() => {\n      popup__item.classList.remove('popup__item');\n      popup__item.classList.add('popup-hide');\n    }, hideDelay);\n    let removeDelay = hideDelay + 950;\n    setTimeout(() => {\n      popup__item.remove();\n\n      if (callback) {\n        callback();\n      }\n    }, removeDelay);\n  },\n  close: function (e) {\n    if (e.target.classList.contains('popup__close')) {\n      let popup = this.closest('.popup').remove();\n    }\n  },\n  el: function (tagName, className) {\n    let el = document.createElement(tagName);\n    el.classList.add(className);\n    return el;\n  }\n};\n\nconst uniq = array => Array.from(new Set(array));\n\nasync function get(key) {\n  let p = window.location.search;\n  p = p.match(new RegExp(key + '=([^&=]+)'));\n  return p ? p[1] : false;\n}\n\nasync function common_post(url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    data.token = document.querySelector('meta[name=\"token\"]').getAttribute('content');\n    let req = new XMLHttpRequest();\n    req.open('POST', url, true);\n    req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n    if (data instanceof FormData) {\n      req.send(data);\n    } else {\n      req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n      req.send('param=' + JSON.stringify(data));\n    }\n\n    req.onerror = function (e) {\n      reject(Error(\"Network Error\" + e));\n    };\n\n    req.onload = async function () {\n      resolve(req.response);\n    };\n  });\n}\n\nclass ElementCollection extends Array {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"el\", this);\n\n    _defineProperty(this, \"elType\", function () {\n      return {}.toString.call(this);\n    });\n\n    _defineProperty(this, \"value\", function () {\n      return this[0].getAttribute('value');\n    });\n\n    _defineProperty(this, \"attr\", function (attrName, attrVal) {\n      if (attrVal) {\n        this[0].setAttribute(attrName, attrVal);\n      }\n\n      return this[0].getAttribute(attrName);\n    });\n\n    _defineProperty(this, \"selectedIndexValue\", function () {\n      if (this.length) return this[0].selectedOptions[0].value;\n    });\n\n    _defineProperty(this, \"options\", function () {\n      if (this.length) return this[0].options;\n    });\n\n    _defineProperty(this, \"count\", function () {\n      return this.length;\n    });\n\n    _defineProperty(this, \"text\", function () {\n      if (this.length) return this[0].innerText;\n    });\n\n    _defineProperty(this, \"checked\", function () {\n      if (this.length) return this[0].checked;\n    });\n\n    _defineProperty(this, \"getWithStyle\", function (attr, val) {\n      let arr = [];\n      this.forEach(s => {\n        if (s.style[attr] === val) {\n          arr.push(s);\n        }\n      });\n      return arr;\n    });\n\n    _defineProperty(this, \"addClass\", function (className) {\n      this.forEach(s => {\n        s.classList.add(className);\n      });\n    });\n\n    _defineProperty(this, \"removeClass\", function (className) {\n      this.forEach(s => {\n        s.classList.remove(className);\n      });\n    });\n\n    _defineProperty(this, \"hasClass\", function (className) {\n      if (this.classList.contains(className)) return true;\n    });\n\n    _defineProperty(this, \"append\", function (el) {\n      this[0].appendChild(el);\n    });\n\n    _defineProperty(this, \"find\", function (selector) {\n      return this[0].querySelector(selector);\n    });\n\n    _defineProperty(this, \"css\", function (attr, val) {\n      if (!val) {\n        return this[0].style[attr];\n      }\n\n      this.forEach(s => {\n        s.style[attr] = val;\n      });\n    });\n  }\n\n  on(event, cbOrSelector, cb) {\n    if (typeof cbOrSelector === 'function') {\n      this.forEach(e => e.addEventListener(event, cbOrSelector));\n    } else {\n      this.forEach(elem => {\n        elem.addEventListener(event, e => {\n          if (e.target.matches(cbOrSelector)) cb(e);\n        });\n      });\n    }\n  }\n\n  ready(cb) {\n    const isReady = this.some(e => {\n      return e.readyState != null && e.readyState != 'loading';\n    });\n\n    if (isReady) {\n      cb();\n    } else {\n      document.addEventListener('DOMContentLoaded', cb);\n    }\n  }\n\n}\n\nfunction common_$(selector) {\n  if (typeof selector === 'string' || selector instanceof String) {\n    return new ElementCollection(...document.querySelectorAll(selector));\n  } else {\n    return new ElementCollection(selector);\n  }\n}\n\nfunction addTooltip(args) {\n  let ar = [...args.els];\n  ar.map(el => {\n    el.onmouseenter = function () {\n      let tip = document.createElement('div');\n      common_$(tip).addClass('tip');\n      tip.innerText = args.message;\n      el.append(tip);\n\n      let remove = () => tip.remove();\n\n      tip.addEventListener('mousemove', remove.bind(tip), true);\n    }.bind(args);\n\n    el.onmouseleave = () => {\n      let tip = el.querySelector('.tip');\n      tip.remove();\n    };\n  }, [args]);\n}\n\nclass test_delete_button {\n  constructor(elem) {\n    if (!elem) return;\n    this._elem = common_$(elem).el[0];\n    this._elem.onclick = this.delete;\n    this._elem.onmouseenter = this.showToolip;\n    this._elem.onmouseleave = this.hideTooltip;\n    this._elem.onmousemove = this.changeTooltipPos;\n  }\n\n  async delete() {\n    if (confirm('Удалить тест?')) {\n      let res = test.del();\n\n      if (res.msg === 'ok') {\n        window.location = '/test/edit';\n      }\n    }\n  }\n\n  showToolip(e) {\n    let x = e.clientX;\n    let y = e.clientY;\n    let tip = document.createElement('div');\n    common_$(tip).addClass('tip');\n    tip.style.top = y + 70 + 'px';\n    tip.style.left = x - 170 + 'px';\n    tip.innerText = this.getAttribute('tip');\n    this.tip = tip;\n    document.body.append(tip);\n  }\n\n  hideTooltip() {\n    this.tip.remove();\n  }\n\n  changeTooltipPos(e) {\n    this.tip.style.top = e.pageY + 35 + 'px';\n    this.tip.style.left = e.pageX - 170 + 'px';\n  }\n\n}\n\n\n;// CONCATENATED MODULE: ./public/src/Test/model/test.js\n\nconst test_test = {\n  markCurrentInMenu: () => {\n    let currentTestId = common_$('.test-name').el[0];\n\n    if (currentTestId) {\n      currentTestId = +currentTestId.getAttribute('value');\n      let menuItemCollection = common_$('.accordion a').el;\n      Array.from(menuItemCollection).filter(a => {\n        if (+a.dataset.id === currentTestId) {\n          a.classList.add('current');\n        }\n      });\n    }\n  },\n  nextQ: () => {\n    let current = test_test.currentQ();\n\n    if (current.id > current.navLength - 2) return false;\n\n    let aimNavId = test_test.aimNavIdFunction(current.id, 'next');\n\n    let aimQEl = test_test.aimQElFunction(current, 'next');\n\n    test_test.pushNav(current.id, aimNavId);\n\n    test_test.pushQ(current.QEl, aimQEl);\n  },\n  prevQ: () => {\n    let current = test_test.currentQ();\n\n    if (current.id < 1) return false;\n\n    let aimNavId = test_test.aimNavIdFunction(current.id, 'back');\n\n    let aimQEl = test_test.aimQElFunction(current, 'back');\n\n    test_test.pushNav(current.id, aimNavId);\n\n    test_test.pushQ(current.QEl, aimQEl);\n  },\n  pushNav: (currentId, aimNavId) => {\n    let currNavEl = common_$('[data-pagination]').el[currentId];\n    currNavEl.classList.toggle('nav-active');\n    let NavEl = common_$('[data-pagination]').el[aimNavId];\n    NavEl.classList.toggle('nav-active');\n  },\n  pushQ: (currentEl, aimQEl) => {\n    currentEl.classList.toggle('flex1');\n    aimQEl.classList.toggle('flex1');\n  },\n  aimNavIdFunction: (currentId, direction) => {\n    let dir = currentId;\n\n    switch (true) {\n      case direction === 'next':\n        return dir += 1;\n        break;\n\n      case direction === 'back':\n        return dir -= 1;\n        break;\n    }\n  },\n  aimQElFunction: (current, direction) => {\n    switch (true) {\n      case direction === 'next':\n        return current.QNextEl;\n        break;\n\n      case direction === 'back':\n        return current.QPrevc;\n        break;\n    }\n  },\n  currentQ: () => {\n    return {\n      id: common_$('.nav-active').el[0].innerText - 1,\n      QEl: common_$('.question.flex1').el[0],\n      navLength: common_$('[data-pagination]').length,\n      QPrevc: common_$('.question.flex1').el[0].previousElementSibling,\n      QNextEl: common_$('.question.flex1').el[0].nextElementSibling\n    };\n  },\n  viewModel: () => {\n    return {\n      id: +window.location.href.split('/').pop(),\n      test_name: common_$('#test_name').text(),\n      enable: common_$('#enable')[0],\n      parent: common_$('select').selectedIndexValue()\n    };\n  },\n  id: id => {\n    return id ?? common_$('.test-name').value();\n  },\n  children: () => {\n    let childrenLenght = common_$('.children').length;\n    if (childrenLenght) return childrenLenght;\n    return false;\n  },\n  path_create: async () => {\n    let test_path = test_test.serverModel();\n\n    test_path.id = 0;\n    test_path.isTest = 0;\n    let url = `/test/create`;\n    let res = await common_post(url, test_path);\n    res = await JSON.parse(res);\n\n    if (res) {\n      window.location.href = `/adminsc/test/edit/${res.id - 1}`;\n    }\n  },\n  name: () => {\n    return common_$('.test-name').el[0].innerText;\n  },\n  create: async () => {\n    let test = test_test.serverModel();\n\n    test.id = 0;\n    test.isTest = 1;\n    let url = `/test/updateOrCreate`;\n    let res = await common_post(url, test);\n    res = await JSON.parse(res);\n\n    if (res) {\n      window.location.href = `/adminsc/test/edit/${res.id - 1}`;\n    }\n  },\n\n  selectedValueCustomSelect(className) {\n    let select = common_$(`[data-custom-${className}]`)[0];\n    let selected = [...select.options].filter(opt => opt.selected);\n\n    if (selected) {\n      return +selected[0].value;\n    }\n  },\n\n  serverModel: () => {\n    return {\n      id: +window.location.href.split('/').pop(),\n      test_name: common_$('#test_name').el[0].value,\n      isTest: +common_$('[isTest]').el[0].getAttribute('isTest'),\n      enable: test_test.selectedValueCustomSelect('enable'),\n      parent: test_test.selectedValueCustomSelect('parent')\n    };\n  },\n  update: async (parent, enable) => {\n    debugger;\n\n    let model = test_test.serverModel(parent, enable);\n\n    let url = `/adminsc/test/update/${model.id}`;\n    let res = await common_post(url, model);\n    res = await JSON.parse(res); // if (res) {\n    //   window.location.href = `/adminsc/test/edit/${model.id}`\n    // }\n  },\n  delete: async function () {\n    if (test_test.children()) {\n      popup.show('Сначала удалите все тесты из папки');\n      return false;\n    }\n\n    let viewModel = test_test.viewModel(); // viewModel.enable.checked = false\n\n\n    let serverModel = test_test.serverModel();\n\n    let res = await common_post('/test/delete', {\n      test: serverModel\n    });\n    res = await JSON.parse(res);\n\n    if (res.notAdmin) {\n      popup.show('Видимость теста скрыта. Чтобы удалить полностью - обратитесь к ГД');\n      setTimeout(() => {\n        window.location = '/adminsc/test/edit/400';\n      }, 4000);\n    } else {\n      window.location = '/adminsc/test/edit/400';\n    }\n  }\n};\n;// CONCATENATED MODULE: ./public/src/Test/model/answer.js\n\nlet answer_answer = {\n  el: add_button => {\n    let answers = add_button.parentNode.querySelectorAll('.answer');\n    let prev_sort = 0;\n\n    if (answers.length) {\n      prev_sort = +common_$(answers[answers.length - 1]).find('.answer__sort').innerText;\n    }\n\n    let el = common_$('.answer__create').find('.answer').cloneNode(true);\n    el.classList.add('answer');\n    el.classList.remove('answer__create'); // let delBtn = $(el).find('.answer__delete')\n    // $(delBtn).on('click', _answer.del)\n\n    return {\n      el: el,\n      id: 'new',\n      q_id: +add_button.closest('.question-edit').id,\n      previous_sort: prev_sort,\n      answerCnt: answers.length,\n      sort: common_$(el).find('.answer__sort'),\n      checked: common_$(el).find('input'),\n      text: common_$(el).find('.answer__text'),\n      delete: common_$(common_$(el).find('.answer__delete')).on('click', function () {\n        answer_answer.del(this);\n      })\n    };\n  },\n\n  getModelForServer(el) {\n    return {\n      answer: '',\n      parent_question: el.q_id,\n      correct_answer: 0,\n      pica: ''\n    };\n  },\n\n  async create(e) {\n    let button = e.target; // debugger\n\n    let a_id = await createOnServer(button);\n    show(a_id);\n\n    async function createOnServer(button) {\n      let newEl = answer_answer.getModelForServer(answer_answer.el(button));\n\n      let res = await common_post('/answer/create', newEl);\n      res = JSON.parse(res);\n      return res.id;\n    }\n\n    function show(a_id) {\n      let el = answer_answer.el(button);\n\n      el.checked.checked = false;\n      el.el.dataset['answerId'] = a_id;\n      el.text.innerText = '';\n      el.sort.innerText = el.answerCnt + 1;\n      el.el.style.display = 'flex';\n      button.before(el.el);\n      el.el.style.opacity = 1;\n    }\n  },\n\n  async del(e) {\n    let del_button = e.type === \"click\" ? e.target : e;\n\n    if (confirm(\"Удалить этот ответ?\")) {\n      let res = await deleteFromServer(del_button);\n      deleteFromView(del_button);\n    }\n\n    function deleteFromView(del_button) {\n      del_button.closest('.answer').remove();\n    }\n\n    async function deleteFromServer(del_button) {\n      let a_id = +del_button.closest('.answer').dataset['answerId'];\n      let res = await common_post('/answer/delete', {\n        a_id\n      });\n      res = JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        popup.show('Ответ удален');\n      }\n    }\n  }\n\n};\n;// CONCATENATED MODULE: ./public/src/Test/model/question.js\n\n\nlet question_question = {\n  sort: async function (upToQestionNumber) {\n    let questions = [...question_question.questions()];\n    let questionsEls = questions.filter(function (el, i) {\n      if (i + 1 < upToQestionNumber) return el;\n    });\n    let toChange = questionsEls.map(el => {\n      return el.id;\n    });\n    let res = await common_post('/question/sort', {\n      toChange\n    });\n    res = JSON.parse(res);\n\n    if (res.msg) {\n      popup.show(res.msg);\n    }\n\n    questionsEls.map((el, i) => {\n      common_$(el).find('.question__sort').innerText = i + 1;\n    });\n  },\n  changeParent: async function (e) {\n    let sel = e.target;\n    let opt = sel.options[sel.selectedIndex];\n    let id = sel.closest('.question-edit').id;\n    let test_id = opt.dataset['questionParentId'];\n    let test_name = opt.value;\n    let res = await common_post('/question/changeParent', {\n      id,\n      test_id\n    });\n    res = JSON.parse(res);\n    if (res.msg !== 'ok') throw e;\n    let question = sel.closest('.question-edit');\n    question.remove();\n    popup.show('Перемещен в ' + test_name); // debugger\n  },\n  showTip: (action, event) => {\n    let el = event.target;\n    let tip = document.createElement(\"div\");\n\n    if (action === 'save.svg') {\n      addTooltip(el, 'сохранить');\n    }\n  },\n  showFirst: () => {\n    let question = question_question.cloneEmptyModel();\n\n    if (!question) return;\n\n    let model = question_question.viewModel(question);\n\n    model.sort.innerText = '1';\n    common_$(model.save).on('click', question_question.save);\n    common_$(model.del).on('click', question_question.delete);\n    common_$(question).addClass('question-edit');\n    common_$(question).removeClass('question__create');\n    let questions = common_$('.questions').el[0];\n    questions.prepend(question);\n  },\n  cloneEmptyModel: () => {\n    let question = common_$('.questions .question__create .question-edit').el[0];\n    if (question) return question.cloneNode(true);\n  },\n  showAnswers: e => {\n    let text = e.target;\n    let parent = text.parentNode.parentNode;\n    let answers = common_$(parent).find('.question__answers');\n    answers.classList.toggle('height');\n    answers.classList.toggle('scale');\n    text.classList.toggle('rotate');\n  },\n  viewModel: el => {\n    return {\n      id: +el.id,\n      el: el,\n      sort: el.querySelector('.question__sort'),\n      save: el.querySelector('.question__save'),\n      text: el.querySelector('.question__text'),\n      del: el.querySelector('.question__delete'),\n      createAnswerButton: el.querySelector('.answer__create-button'),\n      addButton: common_$(common_$('.questions').el[0]).find('.question__create-button')\n    };\n  },\n  serverModel: () => {\n    return {\n      question: {\n        id: null,\n        qustion: '',\n        parent: +window.location.href.split('/').pop(),\n        sort: question_question.lastSort()\n      }\n    };\n  },\n  questions: () => {\n    let qs = common_$('.questions>.question-edit'); // debugger\n\n    return common_$('.questions>.question-edit'); // return $('.questions>.question-edit').el\n  },\n  questionsCount: () => {\n    return common_$('.questions>.question-edit').el.length;\n  },\n  lastSort: () => {\n    let qs = question_question.questions();\n\n    let length = qs.length - 1;\n    let last = +question_question.viewModel(qs[length]).sort.innerText;\n    return last + 1;\n  },\n  create: async e => {\n    let q_id = await question_question.createOnServer(e);\n\n    if (q_id) {\n      question_question.createOnView(q_id);\n    }\n  },\n  createOnServer: async () => {\n    let question = question_question.serverModel();\n\n    let res = await common_post('/question/updateOrCreate', {\n      question: question.question,\n      answers: {}\n    });\n    res = await JSON.parse(res);\n    return res.id;\n  },\n  createOnView: q_id => {\n    let clone = question_question.cloneEmptyModel();\n\n    let model = question_question.viewModel(clone);\n\n    common_$(model.save).on('click', question_question.save);\n    common_$(model.del).on('click', question_question.delete);\n    common_$(model.text).on('click', question_question.showAnswers);\n    common_$(model.createAnswerButton).on('click', answer_answer.create);\n    model.sort.innerText = question_question.lastSort();\n    model.text.innerText = '';\n    model.el.id = q_id;\n    model.addButton.before(clone);\n  },\n  save: async e => {\n    let question = e.target.closest('.question-edit');\n    let res = await common_post('/question/UpdateOrCreate', {\n      question: question_question.getModelForServer(question),\n      answers: question_question.getAnswers(question)\n    });\n    res = await JSON.parse(res);\n    popup.show(res.msg);\n  },\n  delete: async e => {\n    if (confirm(\"Удалить вопрос со всеми его ответами?\")) {\n      let viewModel = question_question.viewModel(e.target.closest('.question-edit'));\n\n      let id = viewModel.id;\n      let deleted = await question_question.deleteFromServer(id);\n\n      if (deleted) {\n        question_question.deleteFromView(viewModel);\n\n        popup.show(deleted.msg);\n      }\n    }\n  },\n  deleteFromView: async viewModel => {\n    viewModel.el.remove();\n  },\n  deleteFromServer: async q_id => {\n    let res = await common_post('/question/delete', {\n      q_id\n    });\n    return JSON.parse(res);\n  },\n  getModelForServer: question => {\n    return {\n      id: +question.id,\n      parent: +common_$('.test-name').el[0].getAttribute('value'),\n      picq: '',\n      qustion: common_$(question).find('.question__text').innerText,\n      sort: +common_$(question).find('.question__sort').innerText\n    };\n  },\n  getAnswers: question => {\n    let answerBlocks = question.querySelectorAll('.answer');\n    return [...answerBlocks].map(a => {\n      return {\n        id: +a.dataset['answerId'],\n        answer: a.querySelector('.answer__text').innerText,\n        correct_answer: +a.querySelector('[type=\"checkbox\"]').checked,\n        parent_question: +question.id,\n        pica: ''\n      };\n    }, question);\n  }\n};\n;// CONCATENATED MODULE: ./public/src/components/test-pagination/test-pagination.js\n\n\n\n // Показать первую кнопку\n\ncommon_$('[data-pagination]:first-child').addClass('nav-active'); // $('.test-edit__content').addClass('flex1')\n//// add question\n\ncommon_$('.pagination').on('click', function (e) {\n  if (e.target.classList.contains('add-question')) {\n    debugger;\n    show();\n    return;\n  } //// paginate\n\n\n  if (e.target.getAttribute('data-pagination')) {\n    paginate(e.target);\n    return;\n  }\n});\n\nfunction paginate(self) {\n  /// get clicked button Return if clicked is active\n  if (self.classList.contains('nav-active')) return;\n  let active_btn = common_$('.pagination .nav-active').el[0]; //// change active button\n\n  active_btn.classList.remove('nav-active');\n  self.classList.add('nav-active'); //// hide the card\n\n  let id_to_hide = active_btn.dataset['pagination'];\n  common_$(`#question-${id_to_hide}`).removeClass('flex1'); //// show the card\n\n  let id_to_show = self.dataset['pagination'];\n  common_$(`#question-${id_to_show}`).addClass('flex1');\n} //// добавление вопроса\n\n\nasync function show(e) {\n  let testid = +common_$('.test-name').value();\n  let questCount = common_$(\"[data-pagination]\").count();\n  let res = await common_post('/question/show', {\n    testid,\n    questCount\n  });\n  res = JSON.parse(res);\n  let Block = res.block;\n  let blocks = common_$('.blocks').el[0];\n  blocks.insertAdjacentHTML('afterBegin', Block);\n  let newBlock = common_$('.blocks .block:first-child').el[0];\n  document.querySelector('.flex1').classList.remove('flex1');\n  common_$(newBlock).addClass('flex1');\n  let save_button = common_$(newBlock).find('.question__save');\n  common_$(save_button).on('click', question_question().save);\n}\n\nfunction showHidePaginBtn(pagItem) {\n  let activePaginBtn = $('.pagination .nav-active').el[0];\n\n  if (activePaginBtn) {\n    activePaginBtn.classList.remove('nav-active');\n  }\n\n  $('.add-question').el[0].insertAdjacentHTML('beforeBegin', pagItem);\n}\n\nfunction appendBlock() {\n  let block = $('.overlay').find('.block');\n  $('.blocks').append(block);\n  $(block).addClass('flex1');\n  $('.a-add').on('click', _answer.create);\n  $('.q-delete').on('click', _question().delete());\n  $('.a-del').on('click', _answer.delete());\n}\n\nfunction test_pagination_navInit() {\n  let nav_buttons = $('[data-pagination]');\n  if (!nav_buttons[0]) return false;\n  Array.from(nav_buttons).map(el => {\n    el.classList.remove('nav-active');\n  });\n  nav_buttons[0].classList.add('nav-active');\n}\n\n\n;// CONCATENATED MODULE: ./public/src/Test/accordion-show.js\n\nfunction accordion_show_accordionShow() {\n  let button = $('.test-edit__menu-toggle')[0];\n\n  if (button) {\n    $(button).on('click', function () {\n      let menu = $('.test-edit__accordion')[0];\n      menu.classList.toggle('open');\n    });\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Test/do.js\n\n\n\n\n\nfunction testDo() {\n  accordionShow(); //Скрыть все вопросы\n\n  $('.question').removeClass(\"flex1\"); //Показть первый вопрос\n\n  $('.question:first-child').addClass(\"flex1\"); // Нажать первуюкнопку navigation\n\n  navInit();\n  $('.test-do__content [type=\"checkbox\"]').on('click', function (e) {\n    let a = e.target.labels[0];\n    a.classList.toggle('pushed');\n  });\n  $('#prev').on('click', _test.prevQ);\n  $('#next').on('click', _test.nextQ); /////////////////////////////////////////////////////////////////////////////\n  ///////////  RESULTS  TEST  Закончить тест/////////////////////////////\n  /////////////////////////////////////////////////////////////////////////////\n  // если это результат теста, деактивирукм кнопку Закончить тест\n\n  let button = $('.test-do__finish-btn').el[0];\n\n  if (button) {\n    if (window.location.pathname.match('^/test/result/.?')) {\n      button.classList.add('inactive');\n    }\n  }\n\n  $('.test-do__finish-btn').on('click', async function (e) {\n    let button = e.target;\n    if (button.classList.contains('inactive')) return false;\n    if (button.id !== 'btnn') return false;\n\n    if (button.text == \"ПРОЙТИ ТЕСТ ЗАНОВО\") {\n      location.reload();\n      return;\n    }\n\n    let corrAnswers = await post('/test/getCorrectAnswers', {});\n    corrAnswers = JSON.parse(corrAnswers);\n    let errorCnt = colorView(corrAnswers);\n    let data = objToServer(errorCnt);\n    let res = await post('/test/cachePageSendEmail', data);\n\n    if (res) {\n      $(\"#btnn\").el[0].href = location.href;\n      $(\"#btnn\").el[0].text = \"ПРОЙТИ ТЕСТ ЗАНОВО\";\n    }\n  });\n\n  function objToServer(errorCnt) {\n    let obj = {\n      token: document.querySelector('meta[name=\"token\"]').getAttribute('content'),\n      questionCnt: $('.question').el.length,\n      errorCnt: errorCnt,\n      pageCache: `<!DOCTYPE ${document.doctype.name}>` + document.documentElement.outerHTML,\n      testId: $('[data-test-id]').el[0].dataset.testId,\n      test_name: $('.test-name').el[0].innerText,\n      userName: $('.user-menu__fio').el[0].innerText\n    };\n    let formData = new FormData();\n    formData.append('token', obj.token);\n    formData.append('questionCnt', obj.questionCnt);\n    formData.append('errorCnt', obj.errorCnt);\n    formData.append('pageCache', obj.pageCache);\n    formData.append('testId', obj.testId);\n    formData.append('test_name', obj.test_name);\n    formData.append('userName', obj.userName);\n    return formData;\n    return obj;\n  }\n\n  function colorView(correctAnswers) {\n    let q = $('.question').el;\n    Array.from(q).map((question, i) => {\n      let answers = question.querySelectorAll('.a'),\n          errors = [];\n      Array.from(answers).map(answer => {\n        let input = answer.getElementsByTagName('input')[0],\n            answerId = input.id.replace(\"answer-\", \"\"),\n            // id question\n        label = answer.getElementsByTagName('label')[0],\n            // Чтобы прикрепить зеленый значек к этому элементу\n        correctAnser = correctAnswers.indexOf(answerId) !== -1;\n\n        if (!checkCorrectAnswers(correctAnser, input, label)) {\n          errors.push(true);\n        }\n      });\n      let questId = +question.dataset['id'],\n          // id question\n      paginItem = $('.pagination [data-pagination=\"' + questId + '\"]').el[0];\n\n      if (errors.length) {\n        $(paginItem).addClass('redShadow');\n      } else {\n        $(paginItem).addClass('greenShadow');\n      }\n    });\n    return $('.redShadow').el.length;\n  }\n\n  function checkCorrectAnswers(correctAnser, input, label) {\n    if (input.checked && correctAnser) {\n      // checkbox нажат. а в correct answer нету. в correct_answers есть, его всегда подсвечиваем зеленым\n      label.classList.add('done'); //green check зеленый значек\n\n      return true;\n    } else if (input.checked && !correctAnser) {\n      // checkbox нажат,и есть в correct answer. в correct_answers нет, кнопка не нажата\n      return false;\n    } else if (!input.checked && correctAnser) {\n      // кнопка не нажата, в correct_answers есть\n      label.classList.add('done'); //green check зеленый значек\n\n      label.classList.add('done'); // green check зеленый значек\n\n      return false;\n    } else if (!input.checked && !correctAnser) {\n      // кнопка не нажата, в correct_answers нет\n      return true;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./public/src/components/header/autocomplete.js\n\n\n[...common_$(\".search input\")].map(input => {\n  if (input) {\n    input.addEventListener('input', function () {\n      autocomplete(input);\n    }, true);\n  }\n});\n\nasync function autocomplete(input) {\n  let search = input.parentNode;\n  let result = common_$(search).find('.search__result');\n\n  if (input.value.length < 1) {\n    if (result) result.innerHTML = '';\n    return;\n  }\n\n  let data = await fetch('/search?q=' + input.value);\n  data = await data.json(data);\n\n  if (result.childNodes.length !== 0) {\n    result.innerHTML = '';\n  }\n\n  data.map(e => {\n    let a = document.createElement(\"a\");\n    a.href = e.alias;\n    a.innerHTML = `<img src='/pic/${e.preview_pic}' alt='${e.name}'>` + e.name;\n    result.appendChild(a);\n  });\n  common_$('body').on('click', function (e) {\n    if (result && e.target !== result) {\n      result.innerHTML = '';\n    }\n  });\n}\n;// CONCATENATED MODULE: ./public/src/components/accordion/accordion.js\n\n\ncommon_$('.accordion label').on('click', handleToggle);\n\nwindow.onload = function () {\n  // debugger\n  let checkboxes = common_$('.admin-layout__sidebar.accordion input[type=checkbox]').el;\n\n  if (checkboxes) {\n    [...checkboxes].filter(ch => {\n      ch.checked = false;\n    });\n  }\n};\n\nfunction handleToggle(e) {\n  let checkbox = e.target.previousElementSibling;\n  let parent = checkbox.closest('ul');\n  let ul = common_$(checkbox.parentNode).find('ul');\n\n  if (checkbox.checked) {\n    slideUp(ul, 0);\n  } else {\n    parent.style.height = \"auto\";\n    slideDown(ul);\n    let ulHeight = ul.scrollHeight;\n    increaseParent(parent, ulHeight); // debugger\n\n    closeSiblings(parent);\n  }\n}\n\nfunction increaseParent(parent, ulHeight) {\n  if (!parent.classList.contains('accordion')) {\n    let parentHeight = parseInt(parent.style.maxHeight) + ulHeight;\n    parent.style.maxHeight = parentHeight + \"px\";\n  }\n}\n\nfunction slideDown(ul, callback) {\n  ul.style.maxHeight = ul.scrollHeight + \"px\";\n\n  if (callback) {\n    callback();\n  }\n}\n\nfunction closeSiblings(parent) {\n  Array.from(parent.children).map(el => {\n    let elArr = Array.from(el.children);\n    elArr.map(ch => {\n      if (ch.type && ch.type === 'checkbox' && ch.checked) {\n        let ul = common_$(ch.parentNode).find('ul');\n        slideUp(ul, 0, function () {\n          ch.checked = false;\n        });\n      }\n    });\n  });\n}\n\nfunction slideUp(ul, interval, callback) {\n  ul.style.maxHeight = 0 + \"px\";\n\n  if (callback) {\n    callback();\n  }\n}\n;// CONCATENATED MODULE: ./public/src/components/cookie/cookie.js\n\n\ncheck_cookie('cn');\n\nfunction check_cookie(cookie_name) {\n  if (getCookie(cookie_name)) common_$('#cookie-notice').css('bottom', '-100%');else common_$('#cookie-notice').css('bottom', \"0\");\n}\n\nfunction getCookie(cookie_name) {\n  return document.cookie.match('(^|;)?' + cookie_name + '=([^;]*)');\n}\n\ncommon_$('#cn-accept-cookie').on('click', clicked);\n\nfunction clicked() {\n  setCookie();\n  common_$('#cookie-notice').css('bottom', '-100%');\n}\n\nfunction setCookie() {\n  const date = new Date(),\n        minute = 60 * 1000,\n        day = minute * 60 * 24;\n  let days = 3;\n  date.setTime(date.getTime() + days * day);\n  document.cookie = \"cn=1; expires=\" + date + \"path=/; SameSite=lax\";\n}\n;// CONCATENATED MODULE: ./public/src/components/header/header.js\n\n\nlet mobileMenu = common_$('.gamburger').on('click', mobile);\n\nfunction mobile(e) {\n  let mm = e.target.closest('.utils').querySelector('.mobile-menu');\n  mm.classList.toggle('show');\n}\n;// CONCATENATED MODULE: ./public/src/Test/test.js\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUlFLElBQUksR0FBRyxDQUFYO0FBQ0FKLEVBQUFBLElBQUksQ0FBQ0ssT0FBTCxDQUFhTCxJQUFJLENBQUNNLE9BQUwsS0FBa0JGLElBQUksR0FBR0QsR0FBdEM7QUFDQW5WLEVBQUFBLFFBQVEsQ0FBQzZVLE1BQVQsR0FBa0IsbUJBQW1CRyxJQUFuQixHQUEwQixzQkFBNUM7QUFDSCxDOztBQ3RDRDtBQUNBO0FBRUEsSUFBSU8sVUFBVSxHQUFHclQsUUFBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQmlFLEVBQWhCLENBQW1CLE9BQW5CLEVBQTRCcVAsTUFBNUIsQ0FBakI7O0FBRUEsU0FBU0EsTUFBVCxDQUFnQnJWLENBQWhCLEVBQW1CO0FBQ2pCLE1BQUlzVixFQUFFLEdBQUd0VixDQUFDLENBQUN3QyxNQUFGLENBQVNFLE9BQVQsQ0FBaUIsUUFBakIsRUFBMkJzQixhQUEzQixDQUF5QyxjQUF6QyxDQUFUO0FBQ0VzUixFQUFBQSxFQUFFLENBQUNsVCxTQUFILENBQWEySCxNQUFiLENBQW9CLE1BQXBCO0FBQ0gsQzs7QUNSRDtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL2NvbW1vbi5qcz81OTIxIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvVGVzdC9tb2RlbC90ZXN0LmpzPzlhNmEiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L21vZGVsL2Fuc3dlci5qcz85OWFkIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvVGVzdC9tb2RlbC9xdWVzdGlvbi5qcz8yM2Q5Iiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvY29tcG9uZW50cy90ZXN0LXBhZ2luYXRpb24vdGVzdC1wYWdpbmF0aW9uLmpzPzRhZTIiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L2FjY29yZGlvbi1zaG93LmpzPzQwMWUiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L2RvLmpzPzRjMzUiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9jb21wb25lbnRzL2hlYWRlci9hdXRvY29tcGxldGUuanM/ZGYxOCIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL2NvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbi5qcz8yNWI1Iiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvY29tcG9uZW50cy9jb29raWUvY29va2llLmpzP2Y5ZTgiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIuanM/MjYzNSIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL1Rlc3QvdGVzdC5qcz85NWJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9jb21tb24uc2NzcydcclxuXHJcbmZ1bmN0aW9uIGRyb3BEb3duIChlbGVtZW50SWQpIHtcclxuICB2YXIgZHJvcGRvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xyXG4gIHRyeSB7XHJcbiAgICBzaG93RHJvcGRvd24oZHJvcGRvd24pO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuXHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNob3dEcm9wZG93bihlbGVtZW50KSB7XHJcbiAgdmFyIGV2ZW50O1xyXG4gIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XHJcbiAgZXZlbnQuaW5pdE1vdXNlRXZlbnQoJ21vdXNlZG93bicsIHRydWUsIHRydWUsIHdpbmRvdyk7XHJcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxufTtcclxuXHJcblxyXG5sZXQgdmFsaWRhdGUgPSB7XHJcbiAgc29ydDogKCkgPT4ge1xyXG4gICAgbGV0IGVycm9yID0gdGhpcy5uZXh0RWxlbWVudFNpYmxpbmdcclxuICAgIGxldCBhciA9IHRoaXMudmFsdWUubWF0Y2goL1xcRCsvKVxyXG4gICAgaWYgKGFyKSB7XHJcbiAgICAgIGVycm9yLmlubmVyVGV4dCA9ICfQotC+0LvRjNC60L4g0YbQuNGE0YDRiydcclxuICAgICAgZXJyb3Iuc3R5bGUub3BhY2l0eSA9ICcxJ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGVycm9yLnN0eWxlLm9wYWNpdHkgPT09IFwiMVwiKSB7XHJcbiAgICAgICAgZXJyb3Iuc3R5bGUub3BhY2l0eSA9ICcwJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBlbWFpbDogKGVtYWlsKSA9PiB7XHJcbiAgICBpZiAoIWVtYWlsKSByZXR1cm4gZmFsc2VcclxuICAgIGxldCByZSA9IC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcclxuICAgIHJldHVybiByZS50ZXN0KFN0cmluZyhlbWFpbCkudG9Mb3dlckNhc2UoKSk7XHJcbiAgfSxcclxuICBwYXNzd29yZDogKHBhc3N3b3JkKSA9PiB7XHJcbiAgICBpZiAoIXBhc3N3b3JkKSByZXR1cm4gZmFsc2VcclxuICAgIGxldCByZSA9IC9eW2EtekEtWlxcLTAtOV17NiwyMH0kL1xyXG4gICAgcmV0dXJuIHJlLnRlc3QocGFzc3dvcmQpXHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gZnVuY3Rpb24gdXAoKSB7XHJcbi8vICAgIHZhciB0b3AgPSBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCk7XHJcbi8vICAgIGlmICh0b3AgPiAwKSB7XHJcbi8vICAgICAgIHdpbmRvdy5zY3JvbGxCeSgwLCAtMTAwKTtcclxuLy8gICAgICAgdmFyIHQgPSBzZXRUaW1lb3V0KCd1cCgpJywgMjApO1xyXG4vLyAgICB9XHJcbi8vICAgIGVsc2VcclxuLy8gICAgICAgY2xlYXJUaW1lb3V0KHQpO1xyXG4vLyAgICByZXR1cm4gZmFsc2U7XHJcbi8vIH1cclxuXHJcbmxldCBwb3B1cCA9IHtcclxuXHJcbiAgc2hvdzogZnVuY3Rpb24gKHR4dCwgY2FsbGJhY2spIHtcclxuICAgIGxldCBjbG9zZSA9IHRoaXMuZWwoJ2RpdicsICdwb3B1cF9fY2xvc2UnKVxyXG4gICAgY2xvc2UuaW5uZXJUZXh0ID0gJ1gnXHJcbiAgICBsZXQgcG9wdXBfX2l0ZW0gPSB0aGlzLmVsKCdkaXYnLCAncG9wdXBfX2l0ZW0nKVxyXG5cclxuICAgIHBvcHVwX19pdGVtLmlubmVyVGV4dCA9IHR4dFxyXG4gICAgcG9wdXBfX2l0ZW0uYXBwZW5kKGNsb3NlKVxyXG4gICAgbGV0IHBvcHVwID0gJCgnLnBvcHVwJykuZWxbMF1cclxuICAgIGlmICghcG9wdXApIHtcclxuICAgICAgcG9wdXAgPSB0aGlzLmVsKCdkaXYnLCAncG9wdXAnKVxyXG4gICAgfVxyXG4gICAgcG9wdXAuYXBwZW5kKHBvcHVwX19pdGVtKVxyXG4gICAgcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlLCB0cnVlKVxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQocG9wdXApXHJcbiAgICBsZXQgaGlkZURlbGF5ID0gNTAwMDtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBwb3B1cF9faXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9faXRlbScpXHJcbiAgICAgIHBvcHVwX19pdGVtLmNsYXNzTGlzdC5hZGQoJ3BvcHVwLWhpZGUnKVxyXG4gICAgfSwgaGlkZURlbGF5KVxyXG4gICAgbGV0IHJlbW92ZURlbGF5ID0gaGlkZURlbGF5ICsgOTUwO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHBvcHVwX19pdGVtLnJlbW92ZSgpXHJcbiAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgIGNhbGxiYWNrKClcclxuICAgICAgfVxyXG4gICAgfSwgcmVtb3ZlRGVsYXkpXHJcbiAgfSxcclxuXHJcbiAgY2xvc2U6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9fY2xvc2UnKSkge1xyXG4gICAgICBsZXQgcG9wdXAgPSB0aGlzLmNsb3Nlc3QoJy5wb3B1cCcpLnJlbW92ZSgpXHJcbiAgICB9XHJcbiAgfSxcclxuICBlbDogZnVuY3Rpb24gKHRhZ05hbWUsIGNsYXNzTmFtZSkge1xyXG4gICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKVxyXG4gICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXHJcbiAgICByZXR1cm4gZWxcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHVuaXEgPSAoYXJyYXkpID0+IEFycmF5LmZyb20obmV3IFNldChhcnJheSkpO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0KGtleSkge1xyXG4gIGxldCBwID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcclxuICBwID0gcC5tYXRjaChuZXcgUmVnRXhwKGtleSArICc9KFteJj1dKyknKSk7XHJcbiAgcmV0dXJuIHAgPyBwWzFdIDogZmFsc2U7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHBvc3QodXJsLCBkYXRhID0ge30pIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgZGF0YS50b2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cInRva2VuXCJdJykuZ2V0QXR0cmlidXRlKCdjb250ZW50JylcclxuICAgIGxldCByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHJlcS5vcGVuKCdQT1NUJywgdXJsLCB0cnVlKTtcclxuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLCBcIlhNTEh0dHBSZXF1ZXN0XCIpO1xyXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xyXG4gICAgICByZXEuc2VuZChkYXRhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XHJcbiAgICAgIHJlcS5zZW5kKCdwYXJhbT0nICsgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgfVxyXG4gICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICByZWplY3QoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIgKyBlKSk7XHJcbiAgICB9O1xyXG4gICAgcmVxLm9ubG9hZCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmVzb2x2ZShyZXEucmVzcG9uc2UpO1xyXG4gICAgfTtcclxuICB9KTtcclxufVxyXG5cclxuY2xhc3MgRWxlbWVudENvbGxlY3Rpb24gZXh0ZW5kcyBBcnJheSAge1xyXG5cclxuICBlbCA9IHRoaXNcclxuICBlbFR5cGUgPSBmdW5jdGlvbigpe3JldHVybiB7fS50b1N0cmluZy5jYWxsKHRoaXMpfVxyXG5cclxuICBvbihldmVudCwgY2JPclNlbGVjdG9yLCBjYikge1xyXG4gICAgaWYgKHR5cGVvZiBjYk9yU2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhpcy5mb3JFYWNoKGUgPT4gZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYk9yU2VsZWN0b3IpKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIHRoaXMuZm9yRWFjaChlbGVtPT57XHJcbiAgICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBlID0+e1xyXG4gICAgICAgICAgaWYgKGUudGFyZ2V0Lm1hdGNoZXMoY2JPclNlbGVjdG9yKSkgY2IoZSlcclxuICAgICAgICB9KX0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YWx1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzWzBdLmdldEF0dHJpYnV0ZSgndmFsdWUnKVxyXG4gIH1cclxuXHJcbiAgYXR0ciA9IGZ1bmN0aW9uIChhdHRyTmFtZSwgYXR0clZhbCkge1xyXG4gICAgaWYgKGF0dHJWYWwpIHtcclxuICAgICAgdGhpc1swXS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWwpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpXHJcbiAgfVxyXG5cclxuICBzZWxlY3RlZEluZGV4VmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5sZW5ndGgpXHJcbiAgICAgIHJldHVybiB0aGlzWzBdLnNlbGVjdGVkT3B0aW9uc1swXS52YWx1ZVxyXG4gIH1cclxuICBvcHRpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMubGVuZ3RoKSByZXR1cm4gdGhpc1swXS5vcHRpb25zXHJcbiAgfVxyXG4gIGNvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoXHJcbiAgfVxyXG4gIHRleHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5sZW5ndGgpIHJldHVybiB0aGlzWzBdLmlubmVyVGV4dFxyXG4gIH1cclxuICBjaGVja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMubGVuZ3RoKSByZXR1cm4gdGhpc1swXS5jaGVja2VkXHJcbiAgfVxyXG5cclxuICBnZXRXaXRoU3R5bGUgPSBmdW5jdGlvbiAoYXR0ciwgdmFsKSB7XHJcbiAgICBsZXQgYXJyID0gW11cclxuICAgIHRoaXMuZm9yRWFjaCgocykgPT4ge1xyXG4gICAgICBpZiAocy5zdHlsZVthdHRyXSA9PT0gdmFsKSB7XHJcbiAgICAgICAgYXJyLnB1c2gocylcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBhcnJcclxuICB9XHJcbiAgYWRkQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICAgIHRoaXMuZm9yRWFjaCgocykgPT4ge1xyXG4gICAgICAgIHMuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXHJcbiAgICAgIH0pXHJcbiAgfVxyXG4gIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICB0aGlzLmZvckVhY2goKHMpID0+IHtcclxuICAgICAgICBzLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKVxyXG4gICAgICB9KVxyXG4gIH1cclxuICBoYXNDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICBhcHBlbmQgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgIHRoaXNbMF0uYXBwZW5kQ2hpbGQoZWwpXHJcbiAgfVxyXG5cclxuICBmaW5kID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XHJcbiAgICAgIHJldHVybiB0aGlzWzBdLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXHJcbiAgfVxyXG5cclxuXHJcbiAgY3NzID0gZnVuY3Rpb24gKGF0dHIsIHZhbCkge1xyXG4gICAgaWYgKCF2YWwpIHtcclxuICAgICAgcmV0dXJuIHRoaXNbMF0uc3R5bGVbYXR0cl1cclxuICAgIH1cclxuICAgICAgdGhpcy5mb3JFYWNoKChzKSA9PiB7XHJcbiAgICAgICAgcy5zdHlsZVthdHRyXSA9IHZhbFxyXG4gICAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmVhZHkoY2IpIHtcclxuICAgIGNvbnN0IGlzUmVhZHkgPSB0aGlzLnNvbWUoZSA9PiB7XHJcbiAgICAgIHJldHVybiBlLnJlYWR5U3RhdGUgIT0gbnVsbCAmJiBlLnJlYWR5U3RhdGUgIT0gJ2xvYWRpbmcnXHJcbiAgICB9KVxyXG4gICAgaWYgKGlzUmVhZHkpIHtcclxuICAgICAgY2IoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGNiKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiAkKHNlbGVjdG9yKSB7XHJcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuICAgIHJldHVybiBuZXcgRWxlbWVudENvbGxlY3Rpb24oLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBuZXcgRWxlbWVudENvbGxlY3Rpb24oc2VsZWN0b3IpXHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBhZGRUb29sdGlwKGFyZ3MpIHtcclxuICBsZXQgYXIgPSBbLi4uYXJncy5lbHNdXHJcbiAgYXIubWFwKChlbCkgPT4ge1xyXG4gICAgZWwub25tb3VzZWVudGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgICAgJCh0aXApLmFkZENsYXNzKCd0aXAnKVxyXG4gICAgICB0aXAuaW5uZXJUZXh0ID0gYXJncy5tZXNzYWdlXHJcbiAgICAgIGVsLmFwcGVuZCh0aXApXHJcbiAgICAgIGxldCByZW1vdmUgPSAoKSA9PiB0aXAucmVtb3ZlKClcclxuICAgICAgdGlwLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHJlbW92ZS5iaW5kKHRpcCksIHRydWUpXHJcbiAgICB9LmJpbmQoYXJncylcclxuXHJcbiAgICBlbC5vbm1vdXNlbGVhdmUgPSAoKSA9PiB7XHJcbiAgICAgIGxldCB0aXAgPSBlbC5xdWVyeVNlbGVjdG9yKCcudGlwJylcclxuICAgICAgdGlwLnJlbW92ZSgpXHJcbiAgICB9XHJcbiAgfSwgW2FyZ3NdKVxyXG59XHJcblxyXG5jbGFzcyB0ZXN0X2RlbGV0ZV9idXR0b24ge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW0pIHtcclxuICAgIGlmICghZWxlbSkgcmV0dXJuXHJcbiAgICB0aGlzLl9lbGVtID0gJChlbGVtKS5lbFswXTtcclxuICAgIHRoaXMuX2VsZW0ub25jbGljayA9IHRoaXMuZGVsZXRlXHJcbiAgICB0aGlzLl9lbGVtLm9ubW91c2VlbnRlciA9IHRoaXMuc2hvd1Rvb2xpcFxyXG4gICAgdGhpcy5fZWxlbS5vbm1vdXNlbGVhdmUgPSB0aGlzLmhpZGVUb29sdGlwXHJcbiAgICB0aGlzLl9lbGVtLm9ubW91c2Vtb3ZlID0gdGhpcy5jaGFuZ2VUb29sdGlwUG9zXHJcbiAgfVxyXG5cclxuICBhc3luYyBkZWxldGUoKSB7XHJcbiAgICBpZiAoY29uZmlybSgn0KPQtNCw0LvQuNGC0Ywg0YLQtdGB0YI/JykpIHtcclxuICAgICAgbGV0IHJlcyA9IHRlc3QuZGVsKClcclxuICAgICAgaWYgKHJlcy5tc2cgPT09ICdvaycpIHtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAnL3Rlc3QvZWRpdCdcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2hvd1Rvb2xpcChlKSB7XHJcbiAgICBsZXQgeCA9IGUuY2xpZW50WFxyXG4gICAgbGV0IHkgPSBlLmNsaWVudFlcclxuICAgIGxldCB0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgJCh0aXApLmFkZENsYXNzKCd0aXAnKVxyXG4gICAgdGlwLnN0eWxlLnRvcCA9IHkgKyA3MCArICdweCdcclxuICAgIHRpcC5zdHlsZS5sZWZ0ID0geCAtIDE3MCArICdweCdcclxuICAgIHRpcC5pbm5lclRleHQgPSB0aGlzLmdldEF0dHJpYnV0ZSgndGlwJylcclxuICAgIHRoaXMudGlwID0gdGlwXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aXApXHJcbiAgfVxyXG5cclxuICBoaWRlVG9vbHRpcCgpIHtcclxuICAgIHRoaXMudGlwLnJlbW92ZSgpXHJcbiAgfVxyXG5cclxuICBjaGFuZ2VUb29sdGlwUG9zKGUpIHtcclxuICAgIHRoaXMudGlwLnN0eWxlLnRvcCA9IGUucGFnZVkgKyAzNSArICdweCdcclxuICAgIHRoaXMudGlwLnN0eWxlLmxlZnQgPSBlLnBhZ2VYIC0gMTcwICsgJ3B4J1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IHtkcm9wRG93bixcclxuICBhZGRUb29sdGlwLFxyXG4gIHBvcHVwLFxyXG4gIHRlc3RfZGVsZXRlX2J1dHRvbixcclxuICBwb3N0LCBnZXQsIHVuaXEsXHJcbiAgdmFsaWRhdGUsICR9XHJcbiIsImltcG9ydCB7JCwgcG9wdXAsIHBvc3R9IGZyb20gJy4uLy4uL2NvbW1vbidcclxuXHJcbmV4cG9ydCBjb25zdCBfdGVzdCA9IHtcclxuXHJcbiAgbWFya0N1cnJlbnRJbk1lbnU6ICgpID0+IHtcclxuICAgIGxldCBjdXJyZW50VGVzdElkID0gJCgnLnRlc3QtbmFtZScpLmVsWzBdXHJcbiAgICBpZiAoY3VycmVudFRlc3RJZCkge1xyXG4gICAgICBjdXJyZW50VGVzdElkID0gK2N1cnJlbnRUZXN0SWQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpXHJcbiAgICAgIGxldCBtZW51SXRlbUNvbGxlY3Rpb24gPSAkKCcuYWNjb3JkaW9uIGEnKS5lbFxyXG4gICAgICBBcnJheS5mcm9tKG1lbnVJdGVtQ29sbGVjdGlvbikuZmlsdGVyKChhKSA9PiB7XHJcbiAgICAgICAgaWYgKCthLmRhdGFzZXQuaWQgPT09IGN1cnJlbnRUZXN0SWQpIHtcclxuICAgICAgICAgIGEuY2xhc3NMaXN0LmFkZCgnY3VycmVudCcpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIG5leHRROiAoKSA9PiB7XHJcbiAgICBsZXQgY3VycmVudCA9IF90ZXN0LmN1cnJlbnRRKClcclxuICAgIGlmIChjdXJyZW50LmlkID4gY3VycmVudC5uYXZMZW5ndGggLSAyKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBsZXQgYWltTmF2SWQgPSBfdGVzdC5haW1OYXZJZEZ1bmN0aW9uKGN1cnJlbnQuaWQsICduZXh0JylcclxuICAgIGxldCBhaW1RRWwgPSBfdGVzdC5haW1RRWxGdW5jdGlvbihjdXJyZW50LCAnbmV4dCcpXHJcblxyXG4gICAgX3Rlc3QucHVzaE5hdihjdXJyZW50LmlkLCBhaW1OYXZJZClcclxuICAgIF90ZXN0LnB1c2hRKGN1cnJlbnQuUUVsLCBhaW1RRWwpXHJcbiAgfSxcclxuXHJcbiAgcHJldlE6ICgpID0+IHtcclxuICAgIGxldCBjdXJyZW50ID0gX3Rlc3QuY3VycmVudFEoKVxyXG4gICAgaWYgKGN1cnJlbnQuaWQgPCAxKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBsZXQgYWltTmF2SWQgPSBfdGVzdC5haW1OYXZJZEZ1bmN0aW9uKGN1cnJlbnQuaWQsICdiYWNrJylcclxuICAgIGxldCBhaW1RRWwgPSBfdGVzdC5haW1RRWxGdW5jdGlvbihjdXJyZW50LCAnYmFjaycpXHJcblxyXG4gICAgX3Rlc3QucHVzaE5hdihjdXJyZW50LmlkLCBhaW1OYXZJZClcclxuICAgIF90ZXN0LnB1c2hRKGN1cnJlbnQuUUVsLCBhaW1RRWwpXHJcbiAgfSxcclxuXHJcbiAgcHVzaE5hdjogKGN1cnJlbnRJZCwgYWltTmF2SWQpID0+IHtcclxuICAgIGxldCBjdXJyTmF2RWwgPSAkKCdbZGF0YS1wYWdpbmF0aW9uXScpXHJcbiAgICAgIC5lbFtjdXJyZW50SWRdXHJcbiAgICBjdXJyTmF2RWwuY2xhc3NMaXN0LnRvZ2dsZSgnbmF2LWFjdGl2ZScpXHJcblxyXG4gICAgbGV0IE5hdkVsID0gJCgnW2RhdGEtcGFnaW5hdGlvbl0nKVxyXG4gICAgICAuZWxbYWltTmF2SWRdXHJcbiAgICBOYXZFbC5jbGFzc0xpc3QudG9nZ2xlKCduYXYtYWN0aXZlJylcclxuICB9LFxyXG5cclxuICBwdXNoUTogKGN1cnJlbnRFbCwgYWltUUVsKSA9PiB7XHJcbiAgICBjdXJyZW50RWwuY2xhc3NMaXN0LnRvZ2dsZSgnZmxleDEnKVxyXG4gICAgYWltUUVsLmNsYXNzTGlzdC50b2dnbGUoJ2ZsZXgxJylcclxuICB9LFxyXG5cclxuICBhaW1OYXZJZEZ1bmN0aW9uOiAoY3VycmVudElkLCBkaXJlY3Rpb24pID0+IHtcclxuICAgIGxldCBkaXIgPSBjdXJyZW50SWRcclxuICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICBjYXNlIGRpcmVjdGlvbiA9PT0gJ25leHQnOlxyXG4gICAgICAgIHJldHVybiBkaXIgKz0gMVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgZGlyZWN0aW9uID09PSAnYmFjayc6XHJcbiAgICAgICAgcmV0dXJuIGRpciAtPSAxXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBhaW1RRWxGdW5jdGlvbjogKGN1cnJlbnQsIGRpcmVjdGlvbikgPT4ge1xyXG4gICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgIGNhc2UgZGlyZWN0aW9uID09PSAnbmV4dCc6XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQuUU5leHRFbFxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgZGlyZWN0aW9uID09PSAnYmFjayc6XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQuUVByZXZjXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBjdXJyZW50UTogKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6ICQoJy5uYXYtYWN0aXZlJykuZWxbMF0uaW5uZXJUZXh0IC0gMSxcclxuICAgICAgUUVsOiAkKCcucXVlc3Rpb24uZmxleDEnKS5lbFswXSxcclxuICAgICAgbmF2TGVuZ3RoOiAkKCdbZGF0YS1wYWdpbmF0aW9uXScpLmxlbmd0aCxcclxuICAgICAgUVByZXZjOiAkKCcucXVlc3Rpb24uZmxleDEnKS5lbFswXS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLFxyXG4gICAgICBRTmV4dEVsOiAkKCcucXVlc3Rpb24uZmxleDEnKS5lbFswXS5uZXh0RWxlbWVudFNpYmxpbmcsXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcblxyXG4gIHZpZXdNb2RlbDogKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6ICt3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnLycpLnBvcCgpLFxyXG4gICAgICB0ZXN0X25hbWU6ICQoJyN0ZXN0X25hbWUnKS50ZXh0KCksXHJcbiAgICAgIGVuYWJsZTogJCgnI2VuYWJsZScpWzBdLFxyXG4gICAgICBwYXJlbnQ6ICQoJ3NlbGVjdCcpLnNlbGVjdGVkSW5kZXhWYWx1ZSgpLFxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGlkOiAoaWQpID0+IHtcclxuICAgIHJldHVybiBpZCA/PyAkKCcudGVzdC1uYW1lJykudmFsdWUoKVxyXG4gIH0sXHJcbiAgY2hpbGRyZW46ICgpID0+IHtcclxuICAgIGxldCBjaGlsZHJlbkxlbmdodCA9ICQoJy5jaGlsZHJlbicpLmxlbmd0aFxyXG4gICAgaWYgKGNoaWxkcmVuTGVuZ2h0KVxyXG4gICAgICByZXR1cm4gY2hpbGRyZW5MZW5naHRcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH0sXHJcblxyXG4gIHBhdGhfY3JlYXRlOiBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgdGVzdF9wYXRoID0gX3Rlc3Quc2VydmVyTW9kZWwoKVxyXG4gICAgdGVzdF9wYXRoLmlkID0gMFxyXG4gICAgdGVzdF9wYXRoLmlzVGVzdCA9IDBcclxuICAgIGxldCB1cmwgPSBgL3Rlc3QvY3JlYXRlYFxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QodXJsLCB0ZXN0X3BhdGgpXHJcbiAgICByZXMgPSBhd2FpdCBKU09OLnBhcnNlKHJlcylcclxuICAgIGlmIChyZXMpIHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgL2FkbWluc2MvdGVzdC9lZGl0LyR7cmVzLmlkIC0gMX1gXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgbmFtZTogKCkgPT4ge1xyXG4gICAgcmV0dXJuICQoJy50ZXN0LW5hbWUnKS5lbFswXS5pbm5lclRleHRcclxuICB9LFxyXG5cclxuICBjcmVhdGU6IGFzeW5jICgpID0+IHtcclxuICAgIGxldCB0ZXN0ID0gX3Rlc3Quc2VydmVyTW9kZWwoKVxyXG4gICAgdGVzdC5pZCA9IDBcclxuICAgIHRlc3QuaXNUZXN0ID0gMVxyXG4gICAgbGV0IHVybCA9IGAvdGVzdC91cGRhdGVPckNyZWF0ZWBcclxuICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KHVybCwgdGVzdClcclxuICAgIHJlcyA9IGF3YWl0IEpTT04ucGFyc2UocmVzKVxyXG4gICAgaWYgKHJlcykge1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYWRtaW5zYy90ZXN0L2VkaXQvJHtyZXMuaWQgLSAxfWBcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBzZWxlY3RlZFZhbHVlQ3VzdG9tU2VsZWN0KGNsYXNzTmFtZSkge1xyXG4gICAgbGV0IHNlbGVjdCA9ICQoYFtkYXRhLWN1c3RvbS0ke2NsYXNzTmFtZX1dYClbMF1cclxuICAgIGxldCBzZWxlY3RlZCA9IFsuLi5zZWxlY3Qub3B0aW9uc10uZmlsdGVyKChvcHQpPT5vcHQuc2VsZWN0ZWQpXHJcbiAgICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgICAgcmV0dXJuICtzZWxlY3RlZFswXS52YWx1ZVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHNlcnZlck1vZGVsOiAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogK3dpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcvJykucG9wKCksXHJcbiAgICAgIHRlc3RfbmFtZTogJCgnI3Rlc3RfbmFtZScpLmVsWzBdLnZhbHVlLFxyXG4gICAgICBpc1Rlc3Q6ICskKCdbaXNUZXN0XScpLmVsWzBdLmdldEF0dHJpYnV0ZSgnaXNUZXN0JyksXHJcbiAgICAgIGVuYWJsZTogX3Rlc3Quc2VsZWN0ZWRWYWx1ZUN1c3RvbVNlbGVjdCgnZW5hYmxlJyksXHJcbiAgICAgIHBhcmVudDogX3Rlc3Quc2VsZWN0ZWRWYWx1ZUN1c3RvbVNlbGVjdCgncGFyZW50JyksXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlOiBhc3luYyAocGFyZW50LCBlbmFibGUpID0+IHtcclxuICAgIGRlYnVnZ2VyXHJcbiAgICBsZXQgbW9kZWwgPSBfdGVzdC5zZXJ2ZXJNb2RlbChwYXJlbnQsIGVuYWJsZSlcclxuICAgIGxldCB1cmwgPSBgL2FkbWluc2MvdGVzdC91cGRhdGUvJHttb2RlbC5pZH1gXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCh1cmwsIG1vZGVsKVxyXG4gICAgcmVzID0gYXdhaXQgSlNPTi5wYXJzZShyZXMpXHJcbiAgICAvLyBpZiAocmVzKSB7XHJcbiAgICAvLyAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9hZG1pbnNjL3Rlc3QvZWRpdC8ke21vZGVsLmlkfWBcclxuICAgIC8vIH1cclxuICB9LFxyXG5cclxuICBkZWxldGU6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICBpZiAoX3Rlc3QuY2hpbGRyZW4oKSkge1xyXG4gICAgICBwb3B1cC5zaG93KCfQodC90LDRh9Cw0LvQsCDRg9C00LDQu9C40YLQtSDQstGB0LUg0YLQtdGB0YLRiyDQuNC3INC/0LDQv9C60LgnKVxyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdmlld01vZGVsID0gX3Rlc3Qudmlld01vZGVsKClcclxuICAgIC8vIHZpZXdNb2RlbC5lbmFibGUuY2hlY2tlZCA9IGZhbHNlXHJcbiAgICBsZXQgc2VydmVyTW9kZWwgPSBfdGVzdC5zZXJ2ZXJNb2RlbCgpXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL3Rlc3QvZGVsZXRlJywge1xyXG4gICAgICB0ZXN0OiBzZXJ2ZXJNb2RlbFxyXG4gICAgfSlcclxuICAgIHJlcyA9IGF3YWl0IEpTT04ucGFyc2UocmVzKVxyXG4gICAgaWYgKHJlcy5ub3RBZG1pbikge1xyXG4gICAgICBwb3B1cC5zaG93KCfQktC40LTQuNC80L7RgdGC0Ywg0YLQtdGB0YLQsCDRgdC60YDRi9GC0LAuINCn0YLQvtCx0Ysg0YPQtNCw0LvQuNGC0Ywg0L/QvtC70L3QvtGB0YLRjNGOIC0g0L7QsdGA0LDRgtC40YLQtdGB0Ywg0Log0JPQlCcpXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcvYWRtaW5zYy90ZXN0L2VkaXQvNDAwJ1xyXG4gICAgICB9LCA0MDAwKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uID0gJy9hZG1pbnNjL3Rlc3QvZWRpdC80MDAnXHJcbiAgICB9XHJcblxyXG5cclxuICB9LFxyXG5cclxufSIsImltcG9ydCB7JCwgcG9wdXAsIHBvc3R9IGZyb20gJy4uLy4uL2NvbW1vbidcclxuXHJcbmV4cG9ydCBsZXQgX2Fuc3dlciA9IHtcclxuXHJcbiAgICBlbDogKGFkZF9idXR0b24pID0+IHtcclxuICAgICAgICBsZXQgYW5zd2VycyA9IGFkZF9idXR0b24ucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuYW5zd2VyJylcclxuICAgICAgICBsZXQgcHJldl9zb3J0ID0gMFxyXG4gICAgICAgIGlmIChhbnN3ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBwcmV2X3NvcnQgPSArJChhbnN3ZXJzW2Fuc3dlcnMubGVuZ3RoIC0gMV0pLmZpbmQoJy5hbnN3ZXJfX3NvcnQnKS5pbm5lclRleHRcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGVsID0gJCgnLmFuc3dlcl9fY3JlYXRlJykuZmluZCgnLmFuc3dlcicpLmNsb25lTm9kZSh0cnVlKVxyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2Fuc3dlcicpXHJcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnYW5zd2VyX19jcmVhdGUnKVxyXG4gICAgICAgIC8vIGxldCBkZWxCdG4gPSAkKGVsKS5maW5kKCcuYW5zd2VyX19kZWxldGUnKVxyXG4gICAgICAgIC8vICQoZGVsQnRuKS5vbignY2xpY2snLCBfYW5zd2VyLmRlbClcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBlbDogZWwsXHJcbiAgICAgICAgICAgIGlkOiAnbmV3JyxcclxuICAgICAgICAgICAgcV9pZDogK2FkZF9idXR0b24uY2xvc2VzdCgnLnF1ZXN0aW9uLWVkaXQnKS5pZCxcclxuICAgICAgICAgICAgcHJldmlvdXNfc29ydDogcHJldl9zb3J0LFxyXG4gICAgICAgICAgICBhbnN3ZXJDbnQ6IGFuc3dlcnMubGVuZ3RoLFxyXG4gICAgICAgICAgICBzb3J0OiAkKGVsKS5maW5kKCcuYW5zd2VyX19zb3J0JyksXHJcbiAgICAgICAgICAgIGNoZWNrZWQ6ICQoZWwpLmZpbmQoJ2lucHV0JyksXHJcbiAgICAgICAgICAgIHRleHQ6ICQoZWwpLmZpbmQoJy5hbnN3ZXJfX3RleHQnKSxcclxuICAgICAgICAgICAgZGVsZXRlOiAkKCQoZWwpLmZpbmQoJy5hbnN3ZXJfX2RlbGV0ZScpKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYW5zd2VyLmRlbCh0aGlzKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXRNb2RlbEZvclNlcnZlcihlbCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFuc3dlcjogJycsXHJcbiAgICAgICAgICAgIHBhcmVudF9xdWVzdGlvbjogZWwucV9pZCxcclxuICAgICAgICAgICAgY29ycmVjdF9hbnN3ZXI6IDAsXHJcbiAgICAgICAgICAgIHBpY2E6ICcnXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBhc3luYyBjcmVhdGUoZSkge1xyXG4gICAgICAgIGxldCBidXR0b24gPSBlLnRhcmdldFxyXG4gICAgICAgIC8vIGRlYnVnZ2VyXHJcbiAgICAgICAgbGV0IGFfaWQgPSBhd2FpdCBjcmVhdGVPblNlcnZlcihidXR0b24pXHJcbiAgICAgICAgc2hvdyhhX2lkKVxyXG5cclxuICAgICAgICBhc3luYyBmdW5jdGlvbiBjcmVhdGVPblNlcnZlcihidXR0b24pIHtcclxuICAgICAgICAgICAgbGV0IG5ld0VsID0gX2Fuc3dlci5nZXRNb2RlbEZvclNlcnZlcihfYW5zd2VyLmVsKGJ1dHRvbikpXHJcblxyXG4gICAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL2Fuc3dlci9jcmVhdGUnLCBuZXdFbClcclxuICAgICAgICAgICAgcmVzID0gSlNPTi5wYXJzZShyZXMpXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzLmlkXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzaG93KGFfaWQpIHtcclxuICAgICAgICAgICAgbGV0IGVsID0gX2Fuc3dlci5lbChidXR0b24pXHJcblxyXG4gICAgICAgICAgICBlbC5jaGVja2VkLmNoZWNrZWQgPSBmYWxzZVxyXG4gICAgICAgICAgICBlbC5lbC5kYXRhc2V0WydhbnN3ZXJJZCddID0gYV9pZFxyXG4gICAgICAgICAgICBlbC50ZXh0LmlubmVyVGV4dCA9ICcnXHJcbiAgICAgICAgICAgIGVsLnNvcnQuaW5uZXJUZXh0ID0gZWwuYW5zd2VyQ250ICsgMVxyXG5cclxuICAgICAgICAgICAgZWwuZWwuc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xyXG4gICAgICAgICAgICBidXR0b24uYmVmb3JlKGVsLmVsKVxyXG4gICAgICAgICAgICBlbC5lbC5zdHlsZS5vcGFjaXR5ID0gMVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgZGVsKGUpIHtcclxuICAgICAgICBsZXQgZGVsX2J1dHRvbiA9IChlLnR5cGUgPT09IFwiY2xpY2tcIik/ZS50YXJnZXQ6ZVxyXG4gICAgICAgIGlmIChjb25maXJtKFwi0KPQtNCw0LvQuNGC0Ywg0Y3RgtC+0YIg0L7RgtCy0LXRgj9cIikpIHtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGRlbGV0ZUZyb21TZXJ2ZXIoZGVsX2J1dHRvbilcclxuICAgICAgICAgICAgZGVsZXRlRnJvbVZpZXcoZGVsX2J1dHRvbilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZUZyb21WaWV3KGRlbF9idXR0b24pIHtcclxuICAgICAgICAgICAgZGVsX2J1dHRvbi5jbG9zZXN0KCcuYW5zd2VyJykucmVtb3ZlKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUZyb21TZXJ2ZXIoZGVsX2J1dHRvbikge1xyXG5cclxuICAgICAgICAgICAgbGV0IGFfaWQgPSArZGVsX2J1dHRvbi5jbG9zZXN0KCcuYW5zd2VyJykuZGF0YXNldFsnYW5zd2VySWQnXVxyXG4gICAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL2Fuc3dlci9kZWxldGUnLCB7YV9pZH0pXHJcbiAgICAgICAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgICAgICAgICBpZiAocmVzLm1zZyA9PT0gJ29rJykge1xyXG4gICAgICAgICAgICAgICAgcG9wdXAuc2hvdygn0J7RgtCy0LXRgiDRg9C00LDQu9C10L0nKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufVxyXG4iLCJpbXBvcnQgeyQsIHBvcHVwLCBwb3N0LCBhZGRUb29sdGlwfSBmcm9tIFwiLi4vLi4vY29tbW9uXCJcclxuaW1wb3J0IHtfYW5zd2VyfSBmcm9tIFwiLi9hbnN3ZXJcIjtcclxuXHJcbmV4cG9ydCBsZXQgX3F1ZXN0aW9uID0ge1xyXG5cclxuICBzb3J0OiBhc3luYyBmdW5jdGlvbiAodXBUb1Flc3Rpb25OdW1iZXIpIHtcclxuICAgIGxldCBxdWVzdGlvbnMgPSBbLi4uX3F1ZXN0aW9uLnF1ZXN0aW9ucygpXVxyXG4gICAgbGV0IHF1ZXN0aW9uc0VscyA9IHF1ZXN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGVsLCBpKSB7XHJcbiAgICAgICAgaWYgKGkgKyAxIDwgdXBUb1Flc3Rpb25OdW1iZXIpIHJldHVybiBlbFxyXG4gICAgICB9XHJcbiAgICApXHJcbiAgICBsZXQgdG9DaGFuZ2UgPSBxdWVzdGlvbnNFbHMubWFwKChlbCkgPT4ge1xyXG4gICAgICByZXR1cm4gZWwuaWRcclxuICAgIH0pXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL3F1ZXN0aW9uL3NvcnQnLCB7dG9DaGFuZ2V9KVxyXG4gICAgcmVzID0gSlNPTi5wYXJzZShyZXMpXHJcbiAgICBpZiAocmVzLm1zZykge1xyXG4gICAgICBwb3B1cC5zaG93KHJlcy5tc2cpXHJcbiAgICB9XHJcbiAgICBxdWVzdGlvbnNFbHMubWFwKChlbCwgaSkgPT4ge1xyXG4gICAgICAkKGVsKS5maW5kKCcucXVlc3Rpb25fX3NvcnQnKS5pbm5lclRleHQgPSBpICsgMVxyXG5cclxuICAgIH0pXHJcbiAgfSxcclxuXHJcblxyXG4gIGNoYW5nZVBhcmVudDogYXN5bmMgZnVuY3Rpb24gKGUpIHtcclxuICAgIGxldCBzZWwgPSBlLnRhcmdldFxyXG4gICAgbGV0IG9wdCA9IHNlbC5vcHRpb25zW3NlbC5zZWxlY3RlZEluZGV4XVxyXG4gICAgbGV0IGlkID0gc2VsLmNsb3Nlc3QoJy5xdWVzdGlvbi1lZGl0JykuaWRcclxuICAgIGxldCB0ZXN0X2lkID0gb3B0LmRhdGFzZXRbJ3F1ZXN0aW9uUGFyZW50SWQnXVxyXG4gICAgbGV0IHRlc3RfbmFtZSA9IG9wdC52YWx1ZVxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9xdWVzdGlvbi9jaGFuZ2VQYXJlbnQnLHtpZCwgdGVzdF9pZH0pXHJcbiAgICByZXMgPSBKU09OLnBhcnNlKHJlcylcclxuICAgIGlmIChyZXMubXNnICE9PSdvaycpIHRocm93IChlKTtcclxuICAgIGxldCBxdWVzdGlvbiA9IHNlbC5jbG9zZXN0KCcucXVlc3Rpb24tZWRpdCcpXHJcbiAgICBxdWVzdGlvbi5yZW1vdmUoKVxyXG4gICAgcG9wdXAuc2hvdygn0J/QtdGA0LXQvNC10YnQtdC9INCyICcrdGVzdF9uYW1lKVxyXG4gICAgLy8gZGVidWdnZXJcclxuICB9LFxyXG5cclxuXHJcbiAgc2hvd1RpcDogKGFjdGlvbiwgZXZlbnQpID0+IHtcclxuICAgIGxldCBlbCA9IGV2ZW50LnRhcmdldFxyXG4gICAgbGV0IHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuXHJcbiAgICBpZiAoYWN0aW9uID09PSAnc2F2ZS5zdmcnKSB7XHJcbiAgICAgIGFkZFRvb2x0aXAoZWwsICfRgdC+0YXRgNCw0L3QuNGC0YwnKVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHNob3dGaXJzdDogKCkgPT4ge1xyXG4gICAgbGV0IHF1ZXN0aW9uID0gX3F1ZXN0aW9uLmNsb25lRW1wdHlNb2RlbCgpXHJcbiAgICBpZiAoIXF1ZXN0aW9uKSByZXR1cm5cclxuXHJcbiAgICBsZXQgbW9kZWwgPSBfcXVlc3Rpb24udmlld01vZGVsKHF1ZXN0aW9uKVxyXG4gICAgbW9kZWwuc29ydC5pbm5lclRleHQgPSAnMSdcclxuICAgICQobW9kZWwuc2F2ZSkub24oJ2NsaWNrJywgX3F1ZXN0aW9uLnNhdmUpXHJcbiAgICAkKG1vZGVsLmRlbCkub24oJ2NsaWNrJywgX3F1ZXN0aW9uLmRlbGV0ZSlcclxuXHJcbiAgICAkKHF1ZXN0aW9uKS5hZGRDbGFzcygncXVlc3Rpb24tZWRpdCcpXHJcbiAgICAkKHF1ZXN0aW9uKS5yZW1vdmVDbGFzcygncXVlc3Rpb25fX2NyZWF0ZScpXHJcblxyXG4gICAgbGV0IHF1ZXN0aW9ucyA9ICQoJy5xdWVzdGlvbnMnKS5lbFswXVxyXG4gICAgcXVlc3Rpb25zLnByZXBlbmQocXVlc3Rpb24pXHJcbiAgfSxcclxuXHJcbiAgY2xvbmVFbXB0eU1vZGVsOiAoKSA9PiB7XHJcbiAgICBsZXQgcXVlc3Rpb24gPSAkKCcucXVlc3Rpb25zIC5xdWVzdGlvbl9fY3JlYXRlIC5xdWVzdGlvbi1lZGl0JykuZWxbMF1cclxuICAgIGlmIChxdWVzdGlvbikgcmV0dXJuIHF1ZXN0aW9uLmNsb25lTm9kZSh0cnVlKVxyXG4gIH0sXHJcblxyXG4gIHNob3dBbnN3ZXJzOiAoZSkgPT4ge1xyXG4gICAgbGV0IHRleHQgPSBlLnRhcmdldFxyXG4gICAgbGV0IHBhcmVudCA9IHRleHQucGFyZW50Tm9kZS5wYXJlbnROb2RlXHJcbiAgICBsZXQgYW5zd2VycyA9ICQocGFyZW50KS5maW5kKCcucXVlc3Rpb25fX2Fuc3dlcnMnKVxyXG4gICAgYW5zd2Vycy5jbGFzc0xpc3QudG9nZ2xlKCdoZWlnaHQnKVxyXG4gICAgYW5zd2Vycy5jbGFzc0xpc3QudG9nZ2xlKCdzY2FsZScpXHJcbiAgICB0ZXh0LmNsYXNzTGlzdC50b2dnbGUoJ3JvdGF0ZScpXHJcbiAgfSxcclxuXHJcbiAgdmlld01vZGVsOiAoZWwpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiArZWwuaWQsXHJcbiAgICAgIGVsOiBlbCxcclxuICAgICAgc29ydDogZWwucXVlcnlTZWxlY3RvcignLnF1ZXN0aW9uX19zb3J0JyksXHJcbiAgICAgIHNhdmU6IGVsLnF1ZXJ5U2VsZWN0b3IoJy5xdWVzdGlvbl9fc2F2ZScpLFxyXG4gICAgICB0ZXh0OiBlbC5xdWVyeVNlbGVjdG9yKCcucXVlc3Rpb25fX3RleHQnKSxcclxuICAgICAgZGVsOiBlbC5xdWVyeVNlbGVjdG9yKCcucXVlc3Rpb25fX2RlbGV0ZScpLFxyXG4gICAgICBjcmVhdGVBbnN3ZXJCdXR0b246IGVsLnF1ZXJ5U2VsZWN0b3IoJy5hbnN3ZXJfX2NyZWF0ZS1idXR0b24nKSxcclxuICAgICAgYWRkQnV0dG9uOiAkKCQoJy5xdWVzdGlvbnMnKS5lbFswXSkuZmluZCgnLnF1ZXN0aW9uX19jcmVhdGUtYnV0dG9uJyksXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgc2VydmVyTW9kZWw6ICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHF1ZXN0aW9uOiB7XHJcbiAgICAgICAgaWQ6IG51bGwsXHJcbiAgICAgICAgcXVzdGlvbjogJycsXHJcbiAgICAgICAgcGFyZW50OiArd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJy8nKS5wb3AoKSxcclxuICAgICAgICBzb3J0OiBfcXVlc3Rpb24ubGFzdFNvcnQoKSxcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHF1ZXN0aW9uczogKCkgPT4ge1xyXG4gICAgbGV0IHFzID0gJCgnLnF1ZXN0aW9ucz4ucXVlc3Rpb24tZWRpdCcpXHJcbiAgICAvLyBkZWJ1Z2dlclxyXG4gICAgcmV0dXJuICQoJy5xdWVzdGlvbnM+LnF1ZXN0aW9uLWVkaXQnKVxyXG4gICAgLy8gcmV0dXJuICQoJy5xdWVzdGlvbnM+LnF1ZXN0aW9uLWVkaXQnKS5lbFxyXG4gIH0sXHJcblxyXG4gIHF1ZXN0aW9uc0NvdW50OiAoKSA9PiB7XHJcbiAgICByZXR1cm4gJCgnLnF1ZXN0aW9ucz4ucXVlc3Rpb24tZWRpdCcpLmVsLmxlbmd0aFxyXG4gIH0sXHJcblxyXG4gIGxhc3RTb3J0OiAoKSA9PiB7XHJcbiAgICBsZXQgcXMgPSBfcXVlc3Rpb24ucXVlc3Rpb25zKClcclxuICAgIGxldCBsZW5ndGggPSBxcy5sZW5ndGgtMVxyXG4gICAgbGV0IGxhc3QgPSAgK19xdWVzdGlvbi52aWV3TW9kZWwocXNbbGVuZ3RoXSkuc29ydC5pbm5lclRleHRcclxuICAgIHJldHVybiBsYXN0KzFcclxuICB9LFxyXG5cclxuICBjcmVhdGU6XHJcbiAgICBhc3luYyAoZSkgPT4ge1xyXG4gICAgICBsZXQgcV9pZCA9IGF3YWl0IF9xdWVzdGlvbi5jcmVhdGVPblNlcnZlcihlKVxyXG4gICAgICBpZiAocV9pZCkge1xyXG4gICAgICAgIF9xdWVzdGlvbi5jcmVhdGVPblZpZXcocV9pZClcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgY3JlYXRlT25TZXJ2ZXI6XHJcbiAgICBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGxldCBxdWVzdGlvbiA9IF9xdWVzdGlvbi5zZXJ2ZXJNb2RlbCgpXHJcbiAgICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KCcvcXVlc3Rpb24vdXBkYXRlT3JDcmVhdGUnLCB7cXVlc3Rpb246IHF1ZXN0aW9uLnF1ZXN0aW9uLCBhbnN3ZXJzOiB7fX0pXHJcbiAgICAgIHJlcyA9IGF3YWl0IEpTT04ucGFyc2UocmVzKVxyXG5cclxuICAgICAgcmV0dXJuIHJlcy5pZFxyXG4gICAgfSxcclxuXHJcbiAgY3JlYXRlT25WaWV3OlxyXG4gICAgKHFfaWQpID0+IHtcclxuICAgICAgbGV0IGNsb25lID0gX3F1ZXN0aW9uLmNsb25lRW1wdHlNb2RlbCgpXHJcblxyXG4gICAgICBsZXQgbW9kZWwgPSBfcXVlc3Rpb24udmlld01vZGVsKGNsb25lKVxyXG4gICAgICAkKG1vZGVsLnNhdmUpLm9uKCdjbGljaycsIF9xdWVzdGlvbi5zYXZlKVxyXG4gICAgICAkKG1vZGVsLmRlbCkub24oJ2NsaWNrJywgX3F1ZXN0aW9uLmRlbGV0ZSlcclxuICAgICAgJChtb2RlbC50ZXh0KS5vbignY2xpY2snLCBfcXVlc3Rpb24uc2hvd0Fuc3dlcnMpXHJcbiAgICAgICQobW9kZWwuY3JlYXRlQW5zd2VyQnV0dG9uKS5vbignY2xpY2snLCBfYW5zd2VyLmNyZWF0ZSlcclxuXHJcbiAgICAgIG1vZGVsLnNvcnQuaW5uZXJUZXh0ID0gX3F1ZXN0aW9uLmxhc3RTb3J0KClcclxuICAgICAgbW9kZWwudGV4dC5pbm5lclRleHQgPSAnJ1xyXG4gICAgICBtb2RlbC5lbC5pZCA9IHFfaWRcclxuXHJcbiAgICAgIG1vZGVsLmFkZEJ1dHRvbi5iZWZvcmUoY2xvbmUpXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgc2F2ZTpcclxuICAgIGFzeW5jIChlKSA9PiB7XHJcbiAgICAgIGxldCBxdWVzdGlvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5xdWVzdGlvbi1lZGl0JylcclxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoXHJcbiAgICAgICAgJy9xdWVzdGlvbi9VcGRhdGVPckNyZWF0ZScsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcXVlc3Rpb246IF9xdWVzdGlvbi5nZXRNb2RlbEZvclNlcnZlcihxdWVzdGlvbiksXHJcbiAgICAgICAgICBhbnN3ZXJzOiBfcXVlc3Rpb24uZ2V0QW5zd2VycyhxdWVzdGlvbiksXHJcbiAgICAgICAgfSlcclxuICAgICAgcmVzID0gYXdhaXQgSlNPTi5wYXJzZShyZXMpXHJcbiAgICAgIHBvcHVwLnNob3cocmVzLm1zZylcclxuICAgIH0sXHJcblxyXG4gIGRlbGV0ZTpcclxuICAgIGFzeW5jIChlKSA9PiB7XHJcbiAgICAgIGlmIChjb25maXJtKFwi0KPQtNCw0LvQuNGC0Ywg0LLQvtC/0YDQvtGBINGB0L4g0LLRgdC10LzQuCDQtdCz0L4g0L7RgtCy0LXRgtCw0LzQuD9cIikpIHtcclxuICAgICAgICBsZXQgdmlld01vZGVsID0gX3F1ZXN0aW9uLnZpZXdNb2RlbChlLnRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb24tZWRpdCcpKVxyXG4gICAgICAgIGxldCBpZCA9IHZpZXdNb2RlbC5pZFxyXG5cclxuICAgICAgICBsZXQgZGVsZXRlZCA9IGF3YWl0IF9xdWVzdGlvbi5kZWxldGVGcm9tU2VydmVyKGlkKVxyXG4gICAgICAgIGlmIChkZWxldGVkKSB7XHJcbiAgICAgICAgICBfcXVlc3Rpb24uZGVsZXRlRnJvbVZpZXcodmlld01vZGVsKVxyXG4gICAgICAgICAgcG9wdXAuc2hvdyhkZWxldGVkLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gIGRlbGV0ZUZyb21WaWV3OlxyXG4gICAgYXN5bmMgKHZpZXdNb2RlbCkgPT4ge1xyXG4gICAgICB2aWV3TW9kZWwuZWwucmVtb3ZlKClcclxuICAgIH0sXHJcblxyXG4gIGRlbGV0ZUZyb21TZXJ2ZXI6XHJcbiAgICBhc3luYyAocV9pZCkgPT4ge1xyXG4gICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL3F1ZXN0aW9uL2RlbGV0ZScsIHtxX2lkfSlcclxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKVxyXG4gICAgfSxcclxuXHJcbiAgZ2V0TW9kZWxGb3JTZXJ2ZXI6XHJcbiAgICAocXVlc3Rpb24pID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBpZDogK3F1ZXN0aW9uLmlkLFxyXG4gICAgICAgIHBhcmVudDogKyQoJy50ZXN0LW5hbWUnKS5lbFswXS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyksXHJcbiAgICAgICAgcGljcTogJycsXHJcbiAgICAgICAgcXVzdGlvbjogJChxdWVzdGlvbikuZmluZCgnLnF1ZXN0aW9uX190ZXh0JykuaW5uZXJUZXh0LFxyXG4gICAgICAgIHNvcnQ6ICskKHF1ZXN0aW9uKS5maW5kKCcucXVlc3Rpb25fX3NvcnQnKS5pbm5lclRleHQsXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgZ2V0QW5zd2VyczpcclxuICAgIChxdWVzdGlvbikgPT4ge1xyXG4gICAgICBsZXQgYW5zd2VyQmxvY2tzID0gcXVlc3Rpb24ucXVlcnlTZWxlY3RvckFsbCgnLmFuc3dlcicpXHJcbiAgICAgIHJldHVybiBbLi4uYW5zd2VyQmxvY2tzXS5tYXAoKGEpID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgaWQ6ICthLmRhdGFzZXRbJ2Fuc3dlcklkJ10sXHJcbiAgICAgICAgICBhbnN3ZXI6IGEucXVlcnlTZWxlY3RvcignLmFuc3dlcl9fdGV4dCcpLmlubmVyVGV4dCxcclxuICAgICAgICAgIGNvcnJlY3RfYW5zd2VyOiArYS5xdWVyeVNlbGVjdG9yKCdbdHlwZT1cImNoZWNrYm94XCJdJykuY2hlY2tlZCxcclxuICAgICAgICAgIHBhcmVudF9xdWVzdGlvbjogK3F1ZXN0aW9uLmlkLFxyXG4gICAgICAgICAgcGljYTogJycsXHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBxdWVzdGlvbilcclxuICAgIH0sXHJcbn1cclxuXHJcbiIsImltcG9ydCAnLi90ZXN0LXBhZ2luYXRpb24uc2NzcydcclxuaW1wb3J0IHskLCBwb3B1cCwgcG9zdH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xyXG5pbXBvcnQge19xdWVzdGlvbn0gZnJvbSBcIi4uLy4uL1Rlc3QvbW9kZWwvcXVlc3Rpb25cIjtcclxuaW1wb3J0IHtfYW5zd2VyfSBmcm9tIFwiLi4vLi4vVGVzdC9tb2RlbC9hbnN3ZXJcIjtcclxuXHJcbi8vINCf0L7QutCw0LfQsNGC0Ywg0L/QtdGA0LLRg9GOINC60L3QvtC/0LrRg1xyXG4kKCdbZGF0YS1wYWdpbmF0aW9uXTpmaXJzdC1jaGlsZCcpLmFkZENsYXNzKCduYXYtYWN0aXZlJylcclxuLy8gJCgnLnRlc3QtZWRpdF9fY29udGVudCcpLmFkZENsYXNzKCdmbGV4MScpXHJcblxyXG4vLy8vIGFkZCBxdWVzdGlvblxyXG4kKCcucGFnaW5hdGlvbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhZGQtcXVlc3Rpb24nKSkge1xyXG4gICAgICAgIGRlYnVnZ2VyXHJcbiAgICAgICAgc2hvdygpXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbi8vLy8gcGFnaW5hdGVcclxuICAgIGlmIChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFnaW5hdGlvbicpKSB7XHJcbiAgICAgICAgcGFnaW5hdGUoZS50YXJnZXQpXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn0pXHJcblxyXG5mdW5jdGlvbiBwYWdpbmF0ZShzZWxmKSB7XHJcbi8vLyBnZXQgY2xpY2tlZCBidXR0b24gUmV0dXJuIGlmIGNsaWNrZWQgaXMgYWN0aXZlXHJcbiAgICBpZiAoc2VsZi5jbGFzc0xpc3QuY29udGFpbnMoJ25hdi1hY3RpdmUnKSkgcmV0dXJuXHJcbiAgICBsZXQgYWN0aXZlX2J0biA9ICQoJy5wYWdpbmF0aW9uIC5uYXYtYWN0aXZlJykuZWxbMF1cclxuLy8vLyBjaGFuZ2UgYWN0aXZlIGJ1dHRvblxyXG4gICAgYWN0aXZlX2J0bi5jbGFzc0xpc3QucmVtb3ZlKCduYXYtYWN0aXZlJylcclxuICAgIHNlbGYuY2xhc3NMaXN0LmFkZCgnbmF2LWFjdGl2ZScpXHJcbi8vLy8gaGlkZSB0aGUgY2FyZFxyXG4gICAgbGV0IGlkX3RvX2hpZGUgPSBhY3RpdmVfYnRuLmRhdGFzZXRbJ3BhZ2luYXRpb24nXVxyXG4gICAgJChgI3F1ZXN0aW9uLSR7aWRfdG9faGlkZX1gKS5yZW1vdmVDbGFzcygnZmxleDEnKVxyXG4vLy8vIHNob3cgdGhlIGNhcmRcclxuICAgIGxldCBpZF90b19zaG93ID0gc2VsZi5kYXRhc2V0WydwYWdpbmF0aW9uJ11cclxuICAgICQoYCNxdWVzdGlvbi0ke2lkX3RvX3Nob3d9YCkuYWRkQ2xhc3MoJ2ZsZXgxJylcclxufVxyXG5cclxuLy8vLyDQtNC+0LHQsNCy0LvQtdC90LjQtSDQstC+0L/RgNC+0YHQsFxyXG5hc3luYyBmdW5jdGlvbiBzaG93KGUpIHtcclxuICAgIGxldCB0ZXN0aWQgPSArJCgnLnRlc3QtbmFtZScpLnZhbHVlKClcclxuICAgIGxldCBxdWVzdENvdW50ID0gJChcIltkYXRhLXBhZ2luYXRpb25dXCIpLmNvdW50KClcclxuXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdChcclxuICAgICAgICAnL3F1ZXN0aW9uL3Nob3cnLFxyXG4gICAgICAgIHt0ZXN0aWQsIHF1ZXN0Q291bnR9KVxyXG4gICAgcmVzID0gSlNPTi5wYXJzZShyZXMpXHJcbiAgICBsZXQgQmxvY2sgPSByZXMuYmxvY2tcclxuICAgIGxldCBibG9ja3MgPSAkKCcuYmxvY2tzJykuZWxbMF1cclxuICAgIGJsb2Nrcy5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyQmVnaW4nLCBCbG9jaylcclxuICAgIGxldCBuZXdCbG9jayA9ICQoJy5ibG9ja3MgLmJsb2NrOmZpcnN0LWNoaWxkJykuZWxbMF1cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mbGV4MScpLmNsYXNzTGlzdC5yZW1vdmUoJ2ZsZXgxJylcclxuICAgICQobmV3QmxvY2spLmFkZENsYXNzKCdmbGV4MScpXHJcbiAgICBsZXQgc2F2ZV9idXR0b24gPSAkKG5ld0Jsb2NrKS5maW5kKCcucXVlc3Rpb25fX3NhdmUnKVxyXG4gICAgICAgICQoc2F2ZV9idXR0b24pLm9uKCdjbGljaycsIF9xdWVzdGlvbigpLnNhdmUpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dIaWRlUGFnaW5CdG4ocGFnSXRlbSkge1xyXG4gICAgbGV0IGFjdGl2ZVBhZ2luQnRuID0gJCgnLnBhZ2luYXRpb24gLm5hdi1hY3RpdmUnKS5lbFswXVxyXG4gICAgaWYgKGFjdGl2ZVBhZ2luQnRuKSB7XHJcbiAgICAgICAgYWN0aXZlUGFnaW5CdG4uY2xhc3NMaXN0LnJlbW92ZSgnbmF2LWFjdGl2ZScpXHJcbiAgICB9XHJcbiAgICAkKCcuYWRkLXF1ZXN0aW9uJykuZWxbMF0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVCZWdpbicsIHBhZ0l0ZW0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGVuZEJsb2NrKCkge1xyXG4gICAgbGV0IGJsb2NrID0gJCgnLm92ZXJsYXknKS5maW5kKCcuYmxvY2snKVxyXG4gICAgJCgnLmJsb2NrcycpLmFwcGVuZChibG9jaylcclxuICAgICQoYmxvY2spLmFkZENsYXNzKCdmbGV4MScpXHJcbiAgICAkKCcuYS1hZGQnKS5vbignY2xpY2snLCBfYW5zd2VyLmNyZWF0ZSlcclxuICAgICQoJy5xLWRlbGV0ZScpLm9uKCdjbGljaycsIF9xdWVzdGlvbigpLmRlbGV0ZSgpKVxyXG4gICAgJCgnLmEtZGVsJykub24oJ2NsaWNrJywgX2Fuc3dlci5kZWxldGUoKSlcclxufVxyXG5cclxuZnVuY3Rpb24gbmF2SW5pdCgpIHtcclxuICAgIGxldCBuYXZfYnV0dG9ucyA9ICQoJ1tkYXRhLXBhZ2luYXRpb25dJylcclxuICAgIGlmICghbmF2X2J1dHRvbnNbMF0pIHJldHVybiBmYWxzZVxyXG4gICAgQXJyYXkuZnJvbShuYXZfYnV0dG9ucykubWFwKChlbCk9PntcclxuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCduYXYtYWN0aXZlJylcclxuICAgIH0pXHJcbiAgICBuYXZfYnV0dG9uc1swXS5jbGFzc0xpc3QuYWRkKCduYXYtYWN0aXZlJylcclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7c2hvd0hpZGVQYWdpbkJ0biwgYXBwZW5kQmxvY2ssIG5hdkluaXR9XHJcblxyXG5cclxuIiwiaW1wb3J0IHskfSBmcm9tIFwiLi4vY29tbW9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhY2NvcmRpb25TaG93KCkge1xyXG5cclxuICBsZXQgYnV0dG9uID0gJCgnLnRlc3QtZWRpdF9fbWVudS10b2dnbGUnKVswXVxyXG4gIGlmIChidXR0b24pe1xyXG4gICAgJChidXR0b24pLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAgIGxldCBtZW51ID0gJCgnLnRlc3QtZWRpdF9fYWNjb3JkaW9uJylbMF1cclxuICAgICAgbWVudS5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJylcclxuICAgIH0pXHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgJy4vZG8uc2NzcydcclxuXHJcblxyXG5cclxuaW1wb3J0IHtfdGVzdH0gZnJvbSBcIi4vbW9kZWwvdGVzdFwiXHJcbmltcG9ydCB7cG9zdCwgJH0gZnJvbSAnLi4vY29tbW9uJ1xyXG5pbXBvcnQge25hdkluaXR9IGZyb20gJy4uL2NvbXBvbmVudHMvdGVzdC1wYWdpbmF0aW9uL3Rlc3QtcGFnaW5hdGlvbidcclxuaW1wb3J0IGFjY29yZGlvblNob3cgZnJvbSBcIi4vYWNjb3JkaW9uLXNob3dcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRlc3REbygpIHtcclxuXHJcbiAgYWNjb3JkaW9uU2hvdygpXHJcblxyXG4vL9Ch0LrRgNGL0YLRjCDQstGB0LUg0LLQvtC/0YDQvtGB0YtcclxuICAkKCcucXVlc3Rpb24nKS5yZW1vdmVDbGFzcyhcImZsZXgxXCIpXHJcblxyXG4vL9Cf0L7QutCw0LfRgtGMINC/0LXRgNCy0YvQuSDQstC+0L/RgNC+0YFcclxuICAkKCcucXVlc3Rpb246Zmlyc3QtY2hpbGQnKS5hZGRDbGFzcyhcImZsZXgxXCIpXHJcbi8vINCd0LDQttCw0YLRjCDQv9C10YDQstGD0Y7QutC90L7Qv9C60YMgbmF2aWdhdGlvblxyXG4gIG5hdkluaXQoKVxyXG4gICQoJy50ZXN0LWRvX19jb250ZW50IFt0eXBlPVwiY2hlY2tib3hcIl0nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgbGV0IGEgPSBlLnRhcmdldC5sYWJlbHNbMF1cclxuICAgIGEuY2xhc3NMaXN0LnRvZ2dsZSgncHVzaGVkJylcclxuICB9KVxyXG5cclxuXHJcbiAgJCgnI3ByZXYnKS5vbignY2xpY2snLCBfdGVzdC5wcmV2USlcclxuICAkKCcjbmV4dCcpLm9uKCdjbGljaycsIF90ZXN0Lm5leHRRKVxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vLy8vLy8vLy8vICBSRVNVTFRTICBURVNUICDQl9Cw0LrQvtC90YfQuNGC0Ywg0YLQtdGB0YIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLy8g0LXRgdC70Lgg0Y3RgtC+INGA0LXQt9GD0LvRjNGC0LDRgiDRgtC10YHRgtCwLCDQtNC10LDQutGC0LjQstC40YDRg9C60Lwg0LrQvdC+0L/QutGDINCX0LDQutC+0L3Rh9C40YLRjCDRgtC10YHRglxyXG4gIGxldCBidXR0b24gPSAkKCcudGVzdC1kb19fZmluaXNoLWJ0bicpLmVsWzBdXHJcbiAgaWYgKGJ1dHRvbikge1xyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5tYXRjaCgnXi90ZXN0L3Jlc3VsdC8uPycpKSB7XHJcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdpbmFjdGl2ZScpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAkKCcudGVzdC1kb19fZmluaXNoLWJ0bicpLm9uKCdjbGljaycsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgbGV0IGJ1dHRvbiA9IGUudGFyZ2V0O1xyXG4gICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2luYWN0aXZlJykpIHJldHVybiBmYWxzZVxyXG4gICAgaWYgKGJ1dHRvbi5pZCAhPT0gJ2J0bm4nKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBpZiAoYnV0dG9uLnRleHQgPT0gXCLQn9Cg0J7QmdCi0Jgg0KLQldCh0KIg0JfQkNCd0J7QktCeXCIpIHtcclxuICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBjb3JyQW5zd2VycyA9IGF3YWl0IHBvc3QoJy90ZXN0L2dldENvcnJlY3RBbnN3ZXJzJywge30pXHJcbiAgICBjb3JyQW5zd2VycyA9IEpTT04ucGFyc2UoY29yckFuc3dlcnMpXHJcbiAgICBsZXQgZXJyb3JDbnQgPSBjb2xvclZpZXcoY29yckFuc3dlcnMpXHJcbiAgICBsZXQgZGF0YSA9IG9ialRvU2VydmVyKGVycm9yQ250KVxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy90ZXN0L2NhY2hlUGFnZVNlbmRFbWFpbCcsIGRhdGEpXHJcbiAgICBpZiAocmVzKSB7XHJcbiAgICAgICQoXCIjYnRublwiKS5lbFswXS5ocmVmID0gbG9jYXRpb24uaHJlZlxyXG4gICAgICAkKFwiI2J0bm5cIikuZWxbMF0udGV4dCA9IFwi0J/QoNCe0JnQotCYINCi0JXQodCiINCX0JDQndCe0JLQnlwiXHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgZnVuY3Rpb24gb2JqVG9TZXJ2ZXIoZXJyb3JDbnQpIHtcclxuXHJcbiAgICBsZXQgb2JqID0ge1xyXG4gICAgICB0b2tlbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwidG9rZW5cIl0nKS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSxcclxuICAgICAgcXVlc3Rpb25DbnQ6ICQoJy5xdWVzdGlvbicpLmVsLmxlbmd0aCxcclxuICAgICAgZXJyb3JDbnQ6IGVycm9yQ250LFxyXG4gICAgICBwYWdlQ2FjaGU6IGA8IURPQ1RZUEUgJHtkb2N1bWVudC5kb2N0eXBlLm5hbWV9PmAgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MLFxyXG4gICAgICB0ZXN0SWQ6ICQoJ1tkYXRhLXRlc3QtaWRdJykuZWxbMF0uZGF0YXNldC50ZXN0SWQsXHJcbiAgICAgIHRlc3RfbmFtZTogJCgnLnRlc3QtbmFtZScpLmVsWzBdLmlubmVyVGV4dCxcclxuICAgICAgdXNlck5hbWU6ICQoJy51c2VyLW1lbnVfX2ZpbycpLmVsWzBdLmlubmVyVGV4dCxcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgIGZvcm1EYXRhLmFwcGVuZCgndG9rZW4nLCBvYmoudG9rZW4pO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdxdWVzdGlvbkNudCcsIG9iai5xdWVzdGlvbkNudCk7XHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2Vycm9yQ250Jywgb2JqLmVycm9yQ250KTtcclxuICAgIGZvcm1EYXRhLmFwcGVuZCgncGFnZUNhY2hlJywgb2JqLnBhZ2VDYWNoZSk7XHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3Rlc3RJZCcsIG9iai50ZXN0SWQpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCd0ZXN0X25hbWUnLCBvYmoudGVzdF9uYW1lKTtcclxuICAgIGZvcm1EYXRhLmFwcGVuZCgndXNlck5hbWUnLCBvYmoudXNlck5hbWUpO1xyXG4gICAgcmV0dXJuIGZvcm1EYXRhXHJcblxyXG4gICAgcmV0dXJuIG9ialxyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGNvbG9yVmlldyhjb3JyZWN0QW5zd2Vycykge1xyXG4gICAgbGV0IHEgPSAkKCcucXVlc3Rpb24nKS5lbFxyXG4gICAgQXJyYXkuZnJvbShxKS5tYXAoKHF1ZXN0aW9uLCBpKSA9PiB7XHJcbiAgICAgIGxldCBhbnN3ZXJzID0gcXVlc3Rpb24ucXVlcnlTZWxlY3RvckFsbCgnLmEnKSxcclxuICAgICAgICBlcnJvcnMgPSBbXVxyXG4gICAgICBBcnJheS5mcm9tKGFuc3dlcnMpLm1hcCgoYW5zd2VyKSA9PiB7XHJcbiAgICAgICAgbGV0IGlucHV0ID0gYW5zd2VyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpWzBdLFxyXG4gICAgICAgICAgYW5zd2VySWQgPSBpbnB1dC5pZC5yZXBsYWNlKFwiYW5zd2VyLVwiLCBcIlwiKSwgLy8gaWQgcXVlc3Rpb25cclxuICAgICAgICAgIGxhYmVsID0gYW5zd2VyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsYWJlbCcpWzBdLCAvLyDQp9GC0L7QsdGLINC/0YDQuNC60YDQtdC/0LjRgtGMINC30LXQu9C10L3Ri9C5INC30L3QsNGH0LXQuiDQuiDRjdGC0L7QvNGDINGN0LvQtdC80LXQvdGC0YNcclxuICAgICAgICAgIGNvcnJlY3RBbnNlciA9IGNvcnJlY3RBbnN3ZXJzLmluZGV4T2YoYW5zd2VySWQpICE9PSAtMVxyXG4gICAgICAgIGlmICghY2hlY2tDb3JyZWN0QW5zd2Vycyhjb3JyZWN0QW5zZXIsIGlucHV0LCBsYWJlbCkpIHtcclxuICAgICAgICAgIGVycm9ycy5wdXNoKHRydWUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgbGV0IHF1ZXN0SWQgPSArcXVlc3Rpb24uZGF0YXNldFsnaWQnXSwgLy8gaWQgcXVlc3Rpb25cclxuICAgICAgICBwYWdpbkl0ZW0gPSAkKCcucGFnaW5hdGlvbiBbZGF0YS1wYWdpbmF0aW9uPVwiJyArIHF1ZXN0SWQgKyAnXCJdJykuZWxbMF1cclxuICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcclxuICAgICAgICAkKHBhZ2luSXRlbSkuYWRkQ2xhc3MoJ3JlZFNoYWRvdycpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJChwYWdpbkl0ZW0pLmFkZENsYXNzKCdncmVlblNoYWRvdycpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICByZXR1cm4gJCgnLnJlZFNoYWRvdycpLmVsLmxlbmd0aFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2hlY2tDb3JyZWN0QW5zd2Vycyhjb3JyZWN0QW5zZXIsIGlucHV0LCBsYWJlbCkge1xyXG4gICAgaWYgKGlucHV0LmNoZWNrZWQgJiYgY29ycmVjdEFuc2VyKSB7Ly8gY2hlY2tib3gg0L3QsNC20LDRgi4g0LAg0LIgY29ycmVjdCBhbnN3ZXIg0L3QtdGC0YMuINCyIGNvcnJlY3RfYW5zd2VycyDQtdGB0YLRjCwg0LXQs9C+INCy0YHQtdCz0LTQsCDQv9C+0LTRgdCy0LXRh9C40LLQsNC10Lwg0LfQtdC70LXQvdGL0LxcclxuICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZG9uZScpOyAvL2dyZWVuIGNoZWNrINC30LXQu9C10L3Ri9C5INC30L3QsNGH0LXQulxyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfSBlbHNlIGlmIChpbnB1dC5jaGVja2VkICYmICFjb3JyZWN0QW5zZXIpIHsvLyBjaGVja2JveCDQvdCw0LbQsNGCLNC4INC10YHRgtGMINCyIGNvcnJlY3QgYW5zd2VyLiDQsiBjb3JyZWN0X2Fuc3dlcnMg0L3QtdGCLCDQutC90L7Qv9C60LAg0L3QtSDQvdCw0LbQsNGC0LBcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9IGVsc2UgaWYgKCFpbnB1dC5jaGVja2VkICYmIGNvcnJlY3RBbnNlcikgey8vINC60L3QvtC/0LrQsCDQvdC1INC90LDQttCw0YLQsCwg0LIgY29ycmVjdF9hbnN3ZXJzINC10YHRgtGMXHJcbiAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2RvbmUnKTsgLy9ncmVlbiBjaGVjayDQt9C10LvQtdC90YvQuSDQt9C90LDRh9C10LpcclxuICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZG9uZScpOy8vIGdyZWVuIGNoZWNrINC30LXQu9C10L3Ri9C5INC30L3QsNGH0LXQulxyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH0gZWxzZSBpZiAoIWlucHV0LmNoZWNrZWQgJiYgIWNvcnJlY3RBbnNlcikgey8vINC60L3QvtC/0LrQsCDQvdC1INC90LDQttCw0YLQsCwg0LIgY29ycmVjdF9hbnN3ZXJzINC90LXRglxyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbiIsImltcG9ydCAnLi9hdXRvY29tcGxldGUuc2Nzcyc7XHJcbmltcG9ydCB7JH0gZnJvbSAnLi4vLi4vY29tbW9uJ1xyXG5cclxuWy4uLiQoXCIuc2VhcmNoIGlucHV0XCIpXS5tYXAoKGlucHV0KSA9PiB7XHJcbiAgICBpZiAoaW5wdXQpIHtcclxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYXV0b2NvbXBsZXRlKGlucHV0KVxyXG4gICAgICAgIH0sIHRydWUpXHJcbiAgICB9XHJcbn0pXHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gYXV0b2NvbXBsZXRlKGlucHV0KSB7XHJcbiAgICBsZXQgc2VhcmNoID0gaW5wdXQucGFyZW50Tm9kZVxyXG4gICAgbGV0IHJlc3VsdCA9ICQoc2VhcmNoKS5maW5kKCcuc2VhcmNoX19yZXN1bHQnKVxyXG5cclxuICAgIGlmIChpbnB1dC52YWx1ZS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0LmlubmVySFRNTCA9ICcnXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGRhdGEgPSBhd2FpdCBmZXRjaCgnL3NlYXJjaD9xPScgKyBpbnB1dC52YWx1ZSlcclxuICAgIGRhdGEgPSBhd2FpdCBkYXRhLmpzb24oZGF0YSlcclxuXHJcbiAgICBpZiAocmVzdWx0LmNoaWxkTm9kZXMubGVuZ3RoIT09MCkge1xyXG4gICAgICAgIHJlc3VsdC5pbm5lckhUTUwgPSAnJ1xyXG4gICAgfVxyXG5cclxuICAgIGRhdGEubWFwKGUgPT4ge1xyXG4gICAgICAgIGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIilcclxuICAgICAgICBhLmhyZWYgPSBlLmFsaWFzXHJcbiAgICAgICAgYS5pbm5lckhUTUwgPSBgPGltZyBzcmM9Jy9waWMvJHtlLnByZXZpZXdfcGljfScgYWx0PScke2UubmFtZX0nPmAgKyBlLm5hbWVcclxuICAgICAgICByZXN1bHQuYXBwZW5kQ2hpbGQoYSlcclxuICAgIH0pO1xyXG5cclxuICAgICQoJ2JvZHknKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChyZXN1bHQgJiYgZS50YXJnZXQgIT09IHJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXN1bHQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbiIsImltcG9ydCAnLi9hY2NvcmRpb24uc2NzcydcclxuaW1wb3J0IHskfSBmcm9tICcuLi8uLi9jb21tb24nXHJcblxyXG5cclxuJCgnLmFjY29yZGlvbiBsYWJlbCcpLm9uKCdjbGljaycsIGhhbmRsZVRvZ2dsZSlcclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbi8vIGRlYnVnZ2VyXHJcbmxldCBjaGVja2JveGVzID0gJCgnLmFkbWluLWxheW91dF9fc2lkZWJhci5hY2NvcmRpb24gaW5wdXRbdHlwZT1jaGVja2JveF0nKS5lbFxyXG4gIGlmIChjaGVja2JveGVzKXtcclxuICAgIFsuLi5jaGVja2JveGVzXS5maWx0ZXIoY2g9PntcclxuICAgICAgY2guY2hlY2tlZCA9IGZhbHNlXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlVG9nZ2xlKGUpIHtcclxuXHJcbiAgbGV0IGNoZWNrYm94ID0gZS50YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZ1xyXG4gIGxldCBwYXJlbnQgPSBjaGVja2JveC5jbG9zZXN0KCd1bCcpXHJcbiAgbGV0IHVsID0gJChjaGVja2JveC5wYXJlbnROb2RlKS5maW5kKCd1bCcpXHJcblxyXG5cclxuICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xyXG4gICAgc2xpZGVVcCh1bCwgMCwpXHJcbiAgfSBlbHNlIHtcclxuICAgIHBhcmVudC5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIlxyXG4gICAgc2xpZGVEb3duKHVsKVxyXG4gICAgbGV0IHVsSGVpZ2h0ID0gdWwuc2Nyb2xsSGVpZ2h0XHJcbiAgICBpbmNyZWFzZVBhcmVudChwYXJlbnQsIHVsSGVpZ2h0KVxyXG4gICAgLy8gZGVidWdnZXJcclxuICAgIGNsb3NlU2libGluZ3MocGFyZW50KVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5jcmVhc2VQYXJlbnQocGFyZW50LCB1bEhlaWdodCkge1xyXG4gIGlmICghcGFyZW50LmNsYXNzTGlzdC5jb250YWlucygnYWNjb3JkaW9uJykpIHtcclxuICAgIGxldCBwYXJlbnRIZWlnaHQgPSBwYXJzZUludChwYXJlbnQuc3R5bGUubWF4SGVpZ2h0KSArIHVsSGVpZ2h0XHJcbiAgICBwYXJlbnQuc3R5bGUubWF4SGVpZ2h0ID0gcGFyZW50SGVpZ2h0ICsgXCJweFwiO1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBzbGlkZURvd24odWwsIGNhbGxiYWNrKSB7XHJcbiAgdWwuc3R5bGUubWF4SGVpZ2h0ID0gdWwuc2Nyb2xsSGVpZ2h0ICsgXCJweFwiO1xyXG4gIGlmIChjYWxsYmFjaykge1xyXG4gICAgY2FsbGJhY2soKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xvc2VTaWJsaW5ncyhwYXJlbnQpIHtcclxuICBBcnJheS5mcm9tKHBhcmVudC5jaGlsZHJlbikubWFwKChlbCkgPT4ge1xyXG4gICAgICBsZXQgZWxBcnIgPSBBcnJheS5mcm9tKGVsLmNoaWxkcmVuKVxyXG4gICAgICBlbEFyci5tYXAoKGNoKSA9PiB7XHJcbiAgICAgICAgaWYgKGNoLnR5cGUgJiYgY2gudHlwZSA9PT0gJ2NoZWNrYm94JyAmJiBjaC5jaGVja2VkKSB7XHJcbiAgICAgICAgICBsZXQgdWwgPSAkKGNoLnBhcmVudE5vZGUpLmZpbmQoJ3VsJylcclxuICAgICAgICAgIHNsaWRlVXAodWwsIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY2guY2hlY2tlZCA9IGZhbHNlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNsaWRlVXAodWwsIGludGVydmFsLCBjYWxsYmFjaykge1xyXG4gIHVsLnN0eWxlLm1heEhlaWdodCA9IDAgKyBcInB4XCI7XHJcbiAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICBjYWxsYmFjaygpXHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0ICcuL2Nvb2tpZS5zY3NzJ1xyXG5pbXBvcnQgeyR9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcclxuXHJcblxyXG5cclxuXHJcbmNoZWNrX2Nvb2tpZSgnY24nKVxyXG5cclxuZnVuY3Rpb24gY2hlY2tfY29va2llKGNvb2tpZV9uYW1lKSB7XHJcbiAgICBpZiAoZ2V0Q29va2llKGNvb2tpZV9uYW1lKSlcclxuICAgICAgICAkKCcjY29va2llLW5vdGljZScpLmNzcygnYm90dG9tJywnLTEwMCUnKTtcclxuICAgIGVsc2VcclxuICAgICAgICAkKCcjY29va2llLW5vdGljZScpLmNzcygnYm90dG9tJywgXCIwXCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDb29raWUoY29va2llX25hbWUpIHtcclxuICAgIHJldHVybiBkb2N1bWVudC5jb29raWUubWF0Y2goJyhefDspPycgKyBjb29raWVfbmFtZSArICc9KFteO10qKScpXHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4kKCcjY24tYWNjZXB0LWNvb2tpZScpLm9uKCdjbGljaycsIGNsaWNrZWQpXHJcblxyXG5mdW5jdGlvbiBjbGlja2VkKCkge1xyXG4gICAgc2V0Q29va2llKClcclxuICAgICQoJyNjb29raWUtbm90aWNlJykuY3NzKCdib3R0b20nLCAnLTEwMCUnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q29va2llKCkge1xyXG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCksXHJcbiAgICAgICAgbWludXRlID0gNjAgKiAxMDAwLFxyXG4gICAgICAgIGRheSA9IG1pbnV0ZSAqIDYwICogMjQ7XHJcblxyXG4gICAgbGV0IGRheXMgPSAzO1xyXG4gICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgKGRheXMgKiBkYXkpKVxyXG4gICAgZG9jdW1lbnQuY29va2llID0gXCJjbj0xOyBleHBpcmVzPVwiICsgZGF0ZSArIFwicGF0aD0vOyBTYW1lU2l0ZT1sYXhcIjtcclxufSIsImltcG9ydCB7JH0gZnJvbSAnLi4vLi4vY29tbW9uJ1xyXG5pbXBvcnQgJy4vaGVhZGVyLnNjc3MnXHJcblxyXG5sZXQgbW9iaWxlTWVudSA9ICQoJy5nYW1idXJnZXInKS5vbignY2xpY2snLCBtb2JpbGUpXHJcblxyXG5mdW5jdGlvbiBtb2JpbGUoZSkge1xyXG4gIGxldCBtbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy51dGlscycpLnF1ZXJ5U2VsZWN0b3IoJy5tb2JpbGUtbWVudScpXHJcbiAgICBtbS5jbGFzc0xpc3QudG9nZ2xlKCdzaG93JylcclxufVxyXG4iLCJpbXBvcnQgJy4vZG8nXHJcbmltcG9ydCAnLi4vY29tcG9uZW50cy9oZWFkZXIvYXV0b2NvbXBsZXRlJ1xyXG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbidcclxuaW1wb3J0ICcuLi9jb21wb25lbnRzL2Nvb2tpZS9jb29raWUnXHJcblxyXG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvdGVzdC1wYWdpbmF0aW9uL3Rlc3QtcGFnaW5hdGlvbidcclxuXHJcbmltcG9ydCAnLi4vY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyJ1xyXG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5zY3NzJ1xyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJkcm9wRG93biIsImVsZW1lbnRJZCIsImRyb3Bkb3duIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNob3dEcm9wZG93biIsImUiLCJlbGVtZW50IiwiZXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50Iiwid2luZG93IiwiZGlzcGF0Y2hFdmVudCIsInZhbGlkYXRlIiwic29ydCIsImVycm9yIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiYXIiLCJ2YWx1ZSIsIm1hdGNoIiwiaW5uZXJUZXh0Iiwic3R5bGUiLCJvcGFjaXR5IiwiZW1haWwiLCJyZSIsInRlc3QiLCJTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsInBhc3N3b3JkIiwicG9wdXAiLCJzaG93IiwidHh0IiwiY2FsbGJhY2siLCJjbG9zZSIsImVsIiwicG9wdXBfX2l0ZW0iLCJhcHBlbmQiLCIkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImJvZHkiLCJoaWRlRGVsYXkiLCJzZXRUaW1lb3V0IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwicmVtb3ZlRGVsYXkiLCJ0YXJnZXQiLCJjb250YWlucyIsImNsb3Nlc3QiLCJ0YWdOYW1lIiwiY2xhc3NOYW1lIiwiY3JlYXRlRWxlbWVudCIsInVuaXEiLCJhcnJheSIsIkFycmF5IiwiZnJvbSIsIlNldCIsImdldCIsImtleSIsInAiLCJsb2NhdGlvbiIsInNlYXJjaCIsIlJlZ0V4cCIsInBvc3QiLCJ1cmwiLCJkYXRhIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0b2tlbiIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJyZXEiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwiRm9ybURhdGEiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9uZXJyb3IiLCJFcnJvciIsIm9ubG9hZCIsInJlc3BvbnNlIiwiRWxlbWVudENvbGxlY3Rpb24iLCJ0b1N0cmluZyIsImNhbGwiLCJhdHRyTmFtZSIsImF0dHJWYWwiLCJzZXRBdHRyaWJ1dGUiLCJsZW5ndGgiLCJzZWxlY3RlZE9wdGlvbnMiLCJvcHRpb25zIiwiY2hlY2tlZCIsImF0dHIiLCJ2YWwiLCJhcnIiLCJmb3JFYWNoIiwicyIsInB1c2giLCJhcHBlbmRDaGlsZCIsInNlbGVjdG9yIiwib24iLCJjYk9yU2VsZWN0b3IiLCJjYiIsImVsZW0iLCJtYXRjaGVzIiwicmVhZHkiLCJpc1JlYWR5Iiwic29tZSIsInJlYWR5U3RhdGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkVG9vbHRpcCIsImFyZ3MiLCJlbHMiLCJtYXAiLCJvbm1vdXNlZW50ZXIiLCJ0aXAiLCJhZGRDbGFzcyIsIm1lc3NhZ2UiLCJiaW5kIiwib25tb3VzZWxlYXZlIiwidGVzdF9kZWxldGVfYnV0dG9uIiwiY29uc3RydWN0b3IiLCJfZWxlbSIsIm9uY2xpY2siLCJkZWxldGUiLCJzaG93VG9vbGlwIiwiaGlkZVRvb2x0aXAiLCJvbm1vdXNlbW92ZSIsImNoYW5nZVRvb2x0aXBQb3MiLCJjb25maXJtIiwicmVzIiwiZGVsIiwibXNnIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsInRvcCIsImxlZnQiLCJwYWdlWSIsInBhZ2VYIiwiX3Rlc3QiLCJtYXJrQ3VycmVudEluTWVudSIsImN1cnJlbnRUZXN0SWQiLCJtZW51SXRlbUNvbGxlY3Rpb24iLCJmaWx0ZXIiLCJhIiwiZGF0YXNldCIsImlkIiwibmV4dFEiLCJjdXJyZW50IiwiY3VycmVudFEiLCJuYXZMZW5ndGgiLCJhaW1OYXZJZCIsImFpbU5hdklkRnVuY3Rpb24iLCJhaW1RRWwiLCJhaW1RRWxGdW5jdGlvbiIsInB1c2hOYXYiLCJwdXNoUSIsIlFFbCIsInByZXZRIiwiY3VycmVudElkIiwiY3Vyck5hdkVsIiwidG9nZ2xlIiwiTmF2RWwiLCJjdXJyZW50RWwiLCJkaXJlY3Rpb24iLCJkaXIiLCJRTmV4dEVsIiwiUVByZXZjIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInZpZXdNb2RlbCIsImhyZWYiLCJzcGxpdCIsInBvcCIsInRlc3RfbmFtZSIsInRleHQiLCJlbmFibGUiLCJwYXJlbnQiLCJzZWxlY3RlZEluZGV4VmFsdWUiLCJjaGlsZHJlbiIsImNoaWxkcmVuTGVuZ2h0IiwicGF0aF9jcmVhdGUiLCJ0ZXN0X3BhdGgiLCJzZXJ2ZXJNb2RlbCIsImlzVGVzdCIsInBhcnNlIiwibmFtZSIsImNyZWF0ZSIsInNlbGVjdGVkVmFsdWVDdXN0b21TZWxlY3QiLCJzZWxlY3QiLCJzZWxlY3RlZCIsIm9wdCIsInVwZGF0ZSIsIm1vZGVsIiwibm90QWRtaW4iLCJfYW5zd2VyIiwiYWRkX2J1dHRvbiIsImFuc3dlcnMiLCJwYXJlbnROb2RlIiwicHJldl9zb3J0IiwiZmluZCIsImNsb25lTm9kZSIsInFfaWQiLCJwcmV2aW91c19zb3J0IiwiYW5zd2VyQ250IiwiZ2V0TW9kZWxGb3JTZXJ2ZXIiLCJhbnN3ZXIiLCJwYXJlbnRfcXVlc3Rpb24iLCJjb3JyZWN0X2Fuc3dlciIsInBpY2EiLCJidXR0b24iLCJhX2lkIiwiY3JlYXRlT25TZXJ2ZXIiLCJuZXdFbCIsImRpc3BsYXkiLCJiZWZvcmUiLCJkZWxfYnV0dG9uIiwidHlwZSIsImRlbGV0ZUZyb21TZXJ2ZXIiLCJkZWxldGVGcm9tVmlldyIsIl9xdWVzdGlvbiIsInVwVG9RZXN0aW9uTnVtYmVyIiwicXVlc3Rpb25zIiwicXVlc3Rpb25zRWxzIiwiaSIsInRvQ2hhbmdlIiwiY2hhbmdlUGFyZW50Iiwic2VsIiwic2VsZWN0ZWRJbmRleCIsInRlc3RfaWQiLCJxdWVzdGlvbiIsInNob3dUaXAiLCJhY3Rpb24iLCJzaG93Rmlyc3QiLCJjbG9uZUVtcHR5TW9kZWwiLCJzYXZlIiwicmVtb3ZlQ2xhc3MiLCJwcmVwZW5kIiwic2hvd0Fuc3dlcnMiLCJjcmVhdGVBbnN3ZXJCdXR0b24iLCJhZGRCdXR0b24iLCJxdXN0aW9uIiwibGFzdFNvcnQiLCJxcyIsInF1ZXN0aW9uc0NvdW50IiwibGFzdCIsImNyZWF0ZU9uVmlldyIsImNsb25lIiwiZ2V0QW5zd2VycyIsImRlbGV0ZWQiLCJwaWNxIiwiYW5zd2VyQmxvY2tzIiwicGFnaW5hdGUiLCJzZWxmIiwiYWN0aXZlX2J0biIsImlkX3RvX2hpZGUiLCJpZF90b19zaG93IiwidGVzdGlkIiwicXVlc3RDb3VudCIsImNvdW50IiwiQmxvY2siLCJibG9jayIsImJsb2NrcyIsImluc2VydEFkamFjZW50SFRNTCIsIm5ld0Jsb2NrIiwic2F2ZV9idXR0b24iLCJzaG93SGlkZVBhZ2luQnRuIiwicGFnSXRlbSIsImFjdGl2ZVBhZ2luQnRuIiwiYXBwZW5kQmxvY2siLCJuYXZJbml0IiwibmF2X2J1dHRvbnMiLCJhY2NvcmRpb25TaG93IiwibWVudSIsInRlc3REbyIsImxhYmVscyIsInBhdGhuYW1lIiwicmVsb2FkIiwiY29yckFuc3dlcnMiLCJlcnJvckNudCIsImNvbG9yVmlldyIsIm9ialRvU2VydmVyIiwib2JqIiwicXVlc3Rpb25DbnQiLCJwYWdlQ2FjaGUiLCJkb2N0eXBlIiwiZG9jdW1lbnRFbGVtZW50Iiwib3V0ZXJIVE1MIiwidGVzdElkIiwidXNlck5hbWUiLCJmb3JtRGF0YSIsImNvcnJlY3RBbnN3ZXJzIiwicSIsImVycm9ycyIsImlucHV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhbnN3ZXJJZCIsInJlcGxhY2UiLCJsYWJlbCIsImNvcnJlY3RBbnNlciIsImluZGV4T2YiLCJjaGVja0NvcnJlY3RBbnN3ZXJzIiwicXVlc3RJZCIsInBhZ2luSXRlbSIsImF1dG9jb21wbGV0ZSIsInJlc3VsdCIsImlubmVySFRNTCIsImZldGNoIiwianNvbiIsImNoaWxkTm9kZXMiLCJhbGlhcyIsInByZXZpZXdfcGljIiwiaGFuZGxlVG9nZ2xlIiwiY2hlY2tib3hlcyIsImNoIiwiY2hlY2tib3giLCJ1bCIsInNsaWRlVXAiLCJoZWlnaHQiLCJzbGlkZURvd24iLCJ1bEhlaWdodCIsInNjcm9sbEhlaWdodCIsImluY3JlYXNlUGFyZW50IiwiY2xvc2VTaWJsaW5ncyIsInBhcmVudEhlaWdodCIsInBhcnNlSW50IiwibWF4SGVpZ2h0IiwiZWxBcnIiLCJpbnRlcnZhbCIsImNoZWNrX2Nvb2tpZSIsImNvb2tpZV9uYW1lIiwiZ2V0Q29va2llIiwiY3NzIiwiY29va2llIiwiY2xpY2tlZCIsInNldENvb2tpZSIsImRhdGUiLCJEYXRlIiwibWludXRlIiwiZGF5IiwiZGF5cyIsInNldFRpbWUiLCJnZXRUaW1lIiwibW9iaWxlTWVudSIsIm1vYmlsZSIsIm1tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///645\n")}},__webpack_exports__={};__webpack_modules__[645]()})();