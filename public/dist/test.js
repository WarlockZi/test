(function(){"use strict";var __webpack_modules__={261:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* unused harmony export default */\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(317);\n\nfunction accordionShow() {\n  let button = $('.test-edit__menu-toggle')[0];\n\n  if (button) {\n    $(button).on('click', function () {\n      let menu = $('.test-edit__accordion')[0];\n      menu.classList.toggle('open');\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYxLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFFZSxTQUFTQyxhQUFULEdBQXlCO0FBRXRDLE1BQUlDLE1BQU0sR0FBR0YsQ0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkIsQ0FBN0IsQ0FBYjs7QUFDQSxNQUFJRSxNQUFKLEVBQVc7QUFDVEYsSUFBQUEsQ0FBQyxDQUFDRSxNQUFELENBQUQsQ0FBVUMsRUFBVixDQUFhLE9BQWIsRUFBc0IsWUFBVTtBQUM5QixVQUFJQyxJQUFJLEdBQUdKLENBQUMsQ0FBQyx1QkFBRCxDQUFELENBQTJCLENBQTNCLENBQVg7QUFDQUksTUFBQUEsSUFBSSxDQUFDQyxTQUFMLENBQWVDLE1BQWYsQ0FBc0IsTUFBdEI7QUFDRCxLQUhEO0FBSUQ7QUFFRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvVGVzdC9hY2NvcmRpb24tc2hvdy5qcz80MDFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7JH0gZnJvbSBcIi4uL2NvbW1vblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWNjb3JkaW9uU2hvdygpIHtcclxuXHJcbiAgbGV0IGJ1dHRvbiA9ICQoJy50ZXN0LWVkaXRfX21lbnUtdG9nZ2xlJylbMF1cclxuICBpZiAoYnV0dG9uKXtcclxuICAgICQoYnV0dG9uKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xyXG4gICAgICBsZXQgbWVudSA9ICQoJy50ZXN0LWVkaXRfX2FjY29yZGlvbicpWzBdXHJcbiAgICAgIG1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgnb3BlbicpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbn1cclxuIl0sIm5hbWVzIjpbIiQiLCJhY2NvcmRpb25TaG93IiwiYnV0dG9uIiwib24iLCJtZW51IiwiY2xhc3NMaXN0IiwidG9nZ2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///261\n")},721:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){eval("\n// UNUSED EXPORTS: default\n\n// EXTERNAL MODULE: ./public/src/common.js\nvar common = __webpack_require__(317);\n;// CONCATENATED MODULE: ./public/src/components/header/autocomplete.js\n\n\n[...(0,common.$)(\".search input\")].map(input => {\n  if (input) {\n    input.addEventListener('input', function () {\n      autocomplete(input);\n    }, true);\n  }\n});\n\nasync function autocomplete(input) {\n  let search = input.parentNode;\n  let result = (0,common.$)(search).find('.search__result');\n\n  if (input.value.length < 1) {\n    if (result) result.innerHTML = '';\n    return;\n  }\n\n  let data = await fetch('/search?q=' + input.value);\n  data = await data.json(data);\n\n  if (result.childNodes.length !== 0) {\n    result.innerHTML = '';\n  }\n\n  data.map(e => {\n    let a = document.createElement(\"a\");\n    a.href = e.alias;\n    a.innerHTML = `<img src='/pic/${e.preview_pic}' alt='${e.name}'>` + e.name;\n    result.appendChild(a);\n  });\n  (0,common.$)('body').on('click', function (e) {\n    if (result && e.target !== result) {\n      result.innerHTML = '';\n    }\n  });\n}\n// EXTERNAL MODULE: ./public/src/components/accordion/accordion.js\nvar accordion = __webpack_require__(846);\n;// CONCATENATED MODULE: ./public/src/components/cookie/cookie.js\n\n\ncheck_cookie('cn');\n\nfunction check_cookie(cookie_name) {\n  if (getCookie(cookie_name)) (0,common.$)('#cookie-notice').css('bottom', '-100%');else (0,common.$)('#cookie-notice').css('bottom', \"0\");\n}\n\nfunction getCookie(cookie_name) {\n  return document.cookie.match('(^|;)?' + cookie_name + '=([^;]*)');\n}\n\n(0,common.$)('#cn-accept-cookie').on('click', clicked);\n\nfunction clicked() {\n  setCookie();\n  (0,common.$)('#cookie-notice').css('bottom', '-100%');\n}\n\nfunction setCookie() {\n  const date = new Date(),\n        minute = 60 * 1000,\n        day = minute * 60 * 24;\n  let days = 3;\n  date.setTime(date.getTime() + days * day);\n  document.cookie = \"cn=1; expires=\" + date + \"path=/; SameSite=lax\";\n}\n// EXTERNAL MODULE: ./public/src/Test/model/test.js\nvar test = __webpack_require__(697);\n// EXTERNAL MODULE: ./public/src/components/test-pagination/test-pagination.js\nvar test_pagination = __webpack_require__(74);\n// EXTERNAL MODULE: ./public/src/Test/accordion-show.js\nvar accordion_show = __webpack_require__(261);\n;// CONCATENATED MODULE: ./public/src/Test/do.js\n\n\n\n\n\n\n\n\nfunction testDo() {\n  accordionShow(); //Скрыть все вопросы\n\n  $('.question').removeClass(\"flex1\"); //Показть первый вопрос\n\n  $('.question:first-child').addClass(\"flex1\"); // Нажать первуюкнопку navigation\n\n  navInit();\n  $('.test-do__content [type=\"checkbox\"]').on('click', function (e) {\n    let a = e.target.labels[0];\n    a.classList.toggle('pushed');\n  });\n  $('#prev').on('click', _test.prevQ);\n  $('#next').on('click', _test.nextQ); /////////////////////////////////////////////////////////////////////////////\n  ///////////  RESULTS  TEST  Закончить тест/////////////////////////////\n  /////////////////////////////////////////////////////////////////////////////\n  // если это результат теста, деактивирукм кнопку Закончить тест\n\n  let button = $('.test-do__finish-btn').el[0];\n\n  if (button) {\n    if (window.location.pathname.match('^/test/result/.?')) {\n      button.classList.add('inactive');\n    }\n  }\n\n  $('.test-do__finish-btn').on('click', async function (e) {\n    let button = e.target;\n    if (button.classList.contains('inactive')) return false;\n    if (button.id !== 'btnn') return false;\n\n    if (button.text == \"ПРОЙТИ ТЕСТ ЗАНОВО\") {\n      location.reload();\n      return;\n    }\n\n    let corrAnswers = await post('/test/getCorrectAnswers', {});\n    corrAnswers = JSON.parse(corrAnswers);\n    let errorCnt = colorView(corrAnswers);\n    let data = objToServer(errorCnt);\n    let res = await post('/test/cachePageSendEmail', data);\n\n    if (res) {\n      $(\"#btnn\").el[0].href = location.href;\n      $(\"#btnn\").el[0].text = \"ПРОЙТИ ТЕСТ ЗАНОВО\";\n    }\n  });\n\n  function objToServer(errorCnt) {\n    let obj = {\n      token: document.querySelector('meta[name=\"token\"]').getAttribute('content'),\n      questionCnt: $('.question').el.length,\n      errorCnt: errorCnt,\n      pageCache: `<!DOCTYPE ${document.doctype.name}>` + document.documentElement.outerHTML,\n      testId: $('[data-test-id]').el[0].dataset.testId,\n      test_name: $('.test-name').el[0].innerText,\n      userName: $('.user-menu__fio').el[0].innerText\n    };\n    let formData = new FormData();\n    formData.append('token', obj.token);\n    formData.append('questionCnt', obj.questionCnt);\n    formData.append('errorCnt', obj.errorCnt);\n    formData.append('pageCache', obj.pageCache);\n    formData.append('testId', obj.testId);\n    formData.append('test_name', obj.test_name);\n    formData.append('userName', obj.userName);\n    return formData;\n    return obj;\n  }\n\n  function colorView(correctAnswers) {\n    let q = $('.question').el;\n    Array.from(q).map((question, i) => {\n      let answers = question.querySelectorAll('.a'),\n          errors = [];\n      Array.from(answers).map(answer => {\n        let input = answer.getElementsByTagName('input')[0],\n            answerId = input.id.replace(\"answer-\", \"\"),\n            // id question\n        label = answer.getElementsByTagName('label')[0],\n            // Чтобы прикрепить зеленый значек к этому элементу\n        correctAnser = correctAnswers.indexOf(answerId) !== -1;\n\n        if (!checkCorrectAnswers(correctAnser, input, label)) {\n          errors.push(true);\n        }\n      });\n      let questId = +question.dataset['id'],\n          // id question\n      paginItem = $('.pagination [data-pagination=\"' + questId + '\"]').el[0];\n\n      if (errors.length) {\n        $(paginItem).addClass('redShadow');\n      } else {\n        $(paginItem).addClass('greenShadow');\n      }\n    });\n    return $('.redShadow').el.length;\n  }\n\n  function checkCorrectAnswers(correctAnser, input, label) {\n    if (input.checked && correctAnser) {\n      // checkbox нажат. а в correct answer нету. в correct_answers есть, его всегда подсвечиваем зеленым\n      label.classList.add('done'); //green check зеленый значек\n\n      return true;\n    } else if (input.checked && !correctAnser) {\n      // checkbox нажат,и есть в correct answer. в correct_answers нет, кнопка не нажата\n      return false;\n    } else if (!input.checked && correctAnser) {\n      // кнопка не нажата, в correct_answers есть\n      label.classList.add('done'); //green check зеленый значек\n\n      label.classList.add('done'); // green check зеленый значек\n\n      return false;\n    } else if (!input.checked && !correctAnser) {\n      // кнопка не нажата, в correct_answers нет\n      return true;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///721\n")},576:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"V\": function() { return /* binding */ _answer; }\n/* harmony export */ });\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(317);\n\nlet _answer = {\n  el: add_button => {\n    let answers = add_button.parentNode.querySelectorAll('.answer');\n    let prev_sort = 0;\n\n    if (answers.length) {\n      prev_sort = +(0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(answers[answers.length - 1]).find('.answer__sort').innerText;\n    }\n\n    let el = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.answer__create').find('.answer').cloneNode(true);\n    el.classList.add('answer');\n    el.classList.remove('answer__create'); // let delBtn = $(el).find('.answer__delete')\n    // $(delBtn).on('click', _answer.del)\n\n    return {\n      el: el,\n      id: 'new',\n      q_id: +add_button.closest('.question-edit').id,\n      previous_sort: prev_sort,\n      answerCnt: answers.length,\n      sort: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(el).find('.answer__sort'),\n      checked: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(el).find('input'),\n      text: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(el).find('.answer__text'),\n      delete: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)((0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(el).find('.answer__delete')).on('click', function () {\n        _answer.del(this);\n      })\n    };\n  },\n\n  getModelForServer(el) {\n    return {\n      answer: '',\n      parent_question: el.q_id,\n      correct_answer: 0,\n      pica: ''\n    };\n  },\n\n  async create(e) {\n    let button = e.target; // debugger\n\n    let a_id = await createOnServer(button);\n    show(a_id);\n\n    async function createOnServer(button) {\n      let newEl = _answer.getModelForServer(_answer.el(button));\n\n      let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/answer/create', newEl);\n      res = JSON.parse(res);\n      return res.id;\n    }\n\n    function show(a_id) {\n      let el = _answer.el(button);\n\n      el.checked.checked = false;\n      el.el.dataset['answerId'] = a_id;\n      el.text.innerText = '';\n      el.sort.innerText = el.answerCnt + 1;\n      el.el.style.display = 'flex';\n      button.before(el.el);\n      el.el.style.opacity = 1;\n    }\n  },\n\n  async del(e) {\n    let del_button = e.type === \"click\" ? e.target : e;\n\n    if (confirm(\"Удалить этот ответ?\")) {\n      let res = await deleteFromServer(del_button);\n      deleteFromView(del_button);\n    }\n\n    function deleteFromView(del_button) {\n      del_button.closest('.answer').remove();\n    }\n\n    async function deleteFromServer(del_button) {\n      let a_id = +del_button.closest('.answer').dataset['answerId'];\n      let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/answer/delete', {\n        a_id\n      });\n      res = JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        _common__WEBPACK_IMPORTED_MODULE_0__/* .popup.show */ .gk.show('Ответ удален');\n      }\n    }\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///576\n")},456:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"A\": function() { return /* binding */ _question; }\n/* harmony export */ });\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(317);\n/* harmony import */ var _answer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(576);\n\n\nlet _question = {\n  sort: async function (upToQestionNumber) {\n    let questions = [..._question.questions()];\n    let questionsEls = questions.filter(function (el, i) {\n      if (i + 1 < upToQestionNumber) return el;\n    });\n    let toChange = questionsEls.map(el => {\n      return el.id;\n    });\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/question/sort', {\n      toChange\n    });\n    res = JSON.parse(res);\n\n    if (res.msg) {\n      _common__WEBPACK_IMPORTED_MODULE_0__/* .popup.show */ .gk.show(res.msg);\n    }\n\n    questionsEls.map((el, i) => {\n      (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(el).find('.question__sort').innerText = i + 1;\n    });\n  },\n  changeParent: async function (e) {\n    let sel = e.target;\n    let opt = sel.options[sel.selectedIndex];\n    let id = sel.closest('.question-edit').id;\n    let test_id = opt.dataset['questionParentId'];\n    let test_name = opt.value;\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/question/changeParent', {\n      id,\n      test_id\n    });\n    res = JSON.parse(res);\n    if (res.msg !== 'ok') throw e;\n    let question = sel.closest('.question-edit');\n    question.remove();\n    _common__WEBPACK_IMPORTED_MODULE_0__/* .popup.show */ .gk.show('Перемещен в ' + test_name); // debugger\n  },\n  showTip: (action, event) => {\n    let el = event.target;\n    let tip = document.createElement(\"div\");\n\n    if (action === 'save.svg') {\n      (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .addTooltip */ .Z$)(el, 'сохранить');\n    }\n  },\n  showFirst: () => {\n    let question = _question.cloneEmptyModel();\n\n    if (!question) return;\n\n    let model = _question.viewModel(question);\n\n    model.sort.innerText = '1';\n    (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(model.save).on('click', _question.save);\n    (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(model.del).on('click', _question.delete);\n    (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(question).addClass('question-edit');\n    (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(question).removeClass('question__create');\n    let questions = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.questions').el[0];\n    questions.prepend(question);\n  },\n  cloneEmptyModel: () => {\n    let question = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.questions .question__create .question-edit').el[0];\n    if (question) return question.cloneNode(true);\n  },\n  showAnswers: e => {\n    let text = e.target;\n    let parent = text.parentNode.parentNode;\n    let answers = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(parent).find('.question__answers');\n    answers.classList.toggle('height');\n    answers.classList.toggle('scale');\n    text.classList.toggle('rotate');\n  },\n  viewModel: el => {\n    return {\n      id: +el.id,\n      el: el,\n      sort: el.querySelector('.question__sort'),\n      save: el.querySelector('.question__save'),\n      text: el.querySelector('.question__text'),\n      del: el.querySelector('.question__delete'),\n      createAnswerButton: el.querySelector('.answer__create-button'),\n      addButton: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)((0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.questions').el[0]).find('.question__create-button')\n    };\n  },\n  serverModel: () => {\n    return {\n      question: {\n        id: null,\n        qustion: '',\n        parent: +window.location.href.split('/').pop(),\n        sort: _question.lastSort()\n      }\n    };\n  },\n  questions: () => {\n    let qs = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.questions>.question-edit'); // debugger\n\n    return (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.questions>.question-edit'); // return $('.questions>.question-edit').el\n  },\n  questionsCount: () => {\n    return (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.questions>.question-edit').el.length;\n  },\n  lastSort: () => {\n    let qs = _question.questions();\n\n    let length = qs.length - 1;\n    let last = +_question.viewModel(qs[length]).sort.innerText;\n    return last + 1;\n  },\n  create: async e => {\n    let q_id = await _question.createOnServer(e);\n\n    if (q_id) {\n      _question.createOnView(q_id);\n    }\n  },\n  createOnServer: async () => {\n    let question = _question.serverModel();\n\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/question/updateOrCreate', {\n      question: question.question,\n      answers: {}\n    });\n    res = await JSON.parse(res);\n    return res.id;\n  },\n  createOnView: q_id => {\n    let clone = _question.cloneEmptyModel();\n\n    let model = _question.viewModel(clone);\n\n    (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(model.save).on('click', _question.save);\n    (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(model.del).on('click', _question.delete);\n    (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(model.text).on('click', _question.showAnswers);\n    (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(model.createAnswerButton).on('click', _answer__WEBPACK_IMPORTED_MODULE_1__/* ._answer.create */ .V.create);\n    model.sort.innerText = _question.lastSort();\n    model.text.innerText = '';\n    model.el.id = q_id;\n    model.addButton.before(clone);\n  },\n  save: async e => {\n    let question = e.target.closest('.question-edit');\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/question/UpdateOrCreate', {\n      question: _question.getModelForServer(question),\n      answers: _question.getAnswers(question)\n    });\n    res = await JSON.parse(res);\n    _common__WEBPACK_IMPORTED_MODULE_0__/* .popup.show */ .gk.show(res.msg);\n  },\n  delete: async e => {\n    if (confirm(\"Удалить вопрос со всеми его ответами?\")) {\n      let viewModel = _question.viewModel(e.target.closest('.question-edit'));\n\n      let id = viewModel.id;\n      let deleted = await _question.deleteFromServer(id);\n\n      if (deleted) {\n        _question.deleteFromView(viewModel);\n\n        _common__WEBPACK_IMPORTED_MODULE_0__/* .popup.show */ .gk.show(deleted.msg);\n      }\n    }\n  },\n  deleteFromView: async viewModel => {\n    viewModel.el.remove();\n  },\n  deleteFromServer: async q_id => {\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/question/delete', {\n      q_id\n    });\n    return JSON.parse(res);\n  },\n  getModelForServer: question => {\n    return {\n      id: +question.id,\n      parent: +(0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.test-name').el[0].getAttribute('value'),\n      picq: '',\n      qustion: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(question).find('.question__text').innerText,\n      sort: +(0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(question).find('.question__sort').innerText\n    };\n  },\n  getAnswers: question => {\n    let answerBlocks = question.querySelectorAll('.answer');\n    return [...answerBlocks].map(a => {\n      return {\n        id: +a.dataset['answerId'],\n        answer: a.querySelector('.answer__text').innerText,\n        correct_answer: +a.querySelector('[type=\"checkbox\"]').checked,\n        parent_question: +question.id,\n        pica: ''\n      };\n    }, question);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///456\n")},697:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* unused harmony export _test */\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(317);\n\nconst _test = {\n  markCurrentInMenu: () => {\n    let currentTestId = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.test-name').el[0];\n\n    if (currentTestId) {\n      currentTestId = +currentTestId.getAttribute('value');\n      let menuItemCollection = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.accordion a').el;\n      Array.from(menuItemCollection).filter(a => {\n        if (+a.dataset.id === currentTestId) {\n          a.classList.add('current');\n        }\n      });\n    }\n  },\n  nextQ: () => {\n    let current = _test.currentQ();\n\n    if (current.id > current.navLength - 2) return false;\n\n    let aimNavId = _test.aimNavIdFunction(current.id, 'next');\n\n    let aimQEl = _test.aimQElFunction(current, 'next');\n\n    _test.pushNav(current.id, aimNavId);\n\n    _test.pushQ(current.QEl, aimQEl);\n  },\n  prevQ: () => {\n    let current = _test.currentQ();\n\n    if (current.id < 1) return false;\n\n    let aimNavId = _test.aimNavIdFunction(current.id, 'back');\n\n    let aimQEl = _test.aimQElFunction(current, 'back');\n\n    _test.pushNav(current.id, aimNavId);\n\n    _test.pushQ(current.QEl, aimQEl);\n  },\n  pushNav: (currentId, aimNavId) => {\n    let currNavEl = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('[data-pagination]').el[currentId];\n    currNavEl.classList.toggle('nav-active');\n    let NavEl = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('[data-pagination]').el[aimNavId];\n    NavEl.classList.toggle('nav-active');\n  },\n  pushQ: (currentEl, aimQEl) => {\n    currentEl.classList.toggle('flex1');\n    aimQEl.classList.toggle('flex1');\n  },\n  aimNavIdFunction: (currentId, direction) => {\n    let dir = currentId;\n\n    switch (true) {\n      case direction === 'next':\n        return dir += 1;\n        break;\n\n      case direction === 'back':\n        return dir -= 1;\n        break;\n    }\n  },\n  aimQElFunction: (current, direction) => {\n    switch (true) {\n      case direction === 'next':\n        return current.QNextEl;\n        break;\n\n      case direction === 'back':\n        return current.QPrevc;\n        break;\n    }\n  },\n  currentQ: () => {\n    return {\n      id: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.nav-active').el[0].innerText - 1,\n      QEl: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.question.flex1').el[0],\n      navLength: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('[data-pagination]').length,\n      QPrevc: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.question.flex1').el[0].previousElementSibling,\n      QNextEl: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.question.flex1').el[0].nextElementSibling\n    };\n  },\n  viewModel: () => {\n    return {\n      id: +window.location.href.split('/').pop(),\n      test_name: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('#test_name').text(),\n      enable: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('#enable')[0],\n      parent: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('select').selectedIndexValue()\n    };\n  },\n  id: id => {\n    return id ?? (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.test-name').value();\n  },\n  children: () => {\n    let childrenLenght = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.children').length;\n    if (childrenLenght) return childrenLenght;\n    return false;\n  },\n  path_create: async () => {\n    let test_path = _test.serverModel();\n\n    test_path.id = 0;\n    test_path.isTest = 0;\n    let url = `/test/create`;\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)(url, test_path);\n    res = await JSON.parse(res);\n\n    if (res) {\n      window.location.href = `/adminsc/test/edit/${res.id - 1}`;\n    }\n  },\n  name: () => {\n    return (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.test-name').el[0].innerText;\n  },\n  create: async () => {\n    let test = _test.serverModel();\n\n    test.id = 0;\n    test.isTest = 1;\n    let url = `/test/updateOrCreate`;\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)(url, test);\n    res = await JSON.parse(res);\n\n    if (res) {\n      window.location.href = `/adminsc/test/edit/${res.id - 1}`;\n    }\n  },\n\n  selectedValueCustomSelect(className) {\n    let select = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(`[data-custom-${className}]`)[0];\n    let selected = [...select.options].filter(opt => opt.selected);\n\n    if (selected) {\n      return +selected[0].value;\n    }\n  },\n\n  serverModel: () => {\n    return {\n      id: +window.location.href.split('/').pop(),\n      test_name: (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('#test_name').el[0].value,\n      isTest: +(0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('[isTest]').el[0].getAttribute('isTest'),\n      enable: _test.selectedValueCustomSelect('enable'),\n      parent: _test.selectedValueCustomSelect('parent')\n    };\n  },\n  update: async (parent, enable) => {\n    debugger;\n\n    let model = _test.serverModel(parent, enable);\n\n    let url = `/adminsc/test/update/${model.id}`;\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)(url, model);\n    res = await JSON.parse(res); // if (res) {\n    //   window.location.href = `/adminsc/test/edit/${model.id}`\n    // }\n  },\n  delete: async function () {\n    if (_test.children()) {\n      _common__WEBPACK_IMPORTED_MODULE_0__/* .popup.show */ .gk.show('Сначала удалите все тесты из папки');\n      return false;\n    }\n\n    let viewModel = _test.viewModel(); // viewModel.enable.checked = false\n\n\n    let serverModel = _test.serverModel();\n\n    let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/test/delete', {\n      test: serverModel\n    });\n    res = await JSON.parse(res);\n\n    if (res.notAdmin) {\n      _common__WEBPACK_IMPORTED_MODULE_0__/* .popup.show */ .gk.show('Видимость теста скрыта. Чтобы удалить полностью - обратитесь к ГД');\n      setTimeout(() => {\n        window.location = '/adminsc/test/edit/400';\n      }, 4000);\n    } else {\n      window.location = '/adminsc/test/edit/400';\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///697\n")},148:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){eval("\n// EXTERNAL MODULE: ./public/src/Test/do.js + 2 modules\nvar Test_do = __webpack_require__(721);\n// EXTERNAL MODULE: ./public/src/components/test-pagination/test-pagination.js\nvar test_pagination = __webpack_require__(74);\n// EXTERNAL MODULE: ./public/src/common.js\nvar common = __webpack_require__(317);\n;// CONCATENATED MODULE: ./public/src/components/header/header.js\n\n\nlet mobileMenu = (0,common.$)('.gamburger').on('click', mobile);\n\nfunction mobile(e) {\n  let mm = e.target.closest('.utils').querySelector('.mobile-menu');\n  mm.classList.toggle('show');\n}\n;// CONCATENATED MODULE: ./public/src/Test/test.js\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBLElBQUlDLFVBQVUsR0FBR0QsWUFBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQkUsRUFBaEIsQ0FBbUIsT0FBbkIsRUFBNEJDLE1BQTVCLENBQWpCOztBQUVBLFNBQVNBLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQUlDLEVBQUUsR0FBR0QsQ0FBQyxDQUFDRSxNQUFGLENBQVNDLE9BQVQsQ0FBaUIsUUFBakIsRUFBMkJDLGFBQTNCLENBQXlDLGNBQXpDLENBQVQ7QUFDRUgsRUFBQUEsRUFBRSxDQUFDSSxTQUFILENBQWFDLE1BQWIsQ0FBb0IsTUFBcEI7QUFDSCxDOztBQ1JEO0FBRUE7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyLmpzPzI2MzUiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L3Rlc3QuanM/OTViYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyR9IGZyb20gJy4uLy4uL2NvbW1vbidcclxuaW1wb3J0ICcuL2hlYWRlci5zY3NzJ1xyXG5cclxubGV0IG1vYmlsZU1lbnUgPSAkKCcuZ2FtYnVyZ2VyJykub24oJ2NsaWNrJywgbW9iaWxlKVxyXG5cclxuZnVuY3Rpb24gbW9iaWxlKGUpIHtcclxuICBsZXQgbW0gPSBlLnRhcmdldC5jbG9zZXN0KCcudXRpbHMnKS5xdWVyeVNlbGVjdG9yKCcubW9iaWxlLW1lbnUnKVxyXG4gICAgbW0uY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpXHJcbn1cclxuIiwiaW1wb3J0ICcuL2RvJ1xyXG5cclxuaW1wb3J0ICcuLi9jb21wb25lbnRzL3Rlc3QtcGFnaW5hdGlvbi90ZXN0LXBhZ2luYXRpb24nXHJcblxyXG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlcidcclxuaW1wb3J0ICcuLi9jb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuc2NzcydcclxuXHJcblxyXG4iXSwibmFtZXMiOlsiJCIsIm1vYmlsZU1lbnUiLCJvbiIsIm1vYmlsZSIsImUiLCJtbSIsInRhcmdldCIsImNsb3Nlc3QiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwidG9nZ2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///148\n")},317:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z$\": function() { return /* binding */ addTooltip; },\n/* harmony export */   \"gk\": function() { return /* binding */ popup; },\n/* harmony export */   \"v_\": function() { return /* binding */ post; },\n/* harmony export */   \"$\": function() { return /* binding */ $; }\n/* harmony export */ });\n/* unused harmony exports dropDown, test_delete_button, get, uniq, validate, fetchWrap, fetchW */\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nconst dropDown = function (elementId) {\n  var dropdown = document.getElementById(elementId);\n\n  try {\n    showDropdown(dropdown);\n  } catch (e) {}\n\n  return false;\n};\n\nconst showDropdown = function (element) {\n  var event;\n  event = document.createEvent('MouseEvents');\n  event.initMouseEvent('mousedown', true, true, window);\n  element.dispatchEvent(event);\n};\n\nlet validate = {\n  sort: () => {\n    let error = undefined.nextElementSibling;\n    let ar = undefined.value.match(/\\D+/);\n\n    if (ar) {\n      error.innerText = 'Только цифры';\n      error.style.opacity = '1';\n    } else {\n      if (error.style.opacity === \"1\") {\n        error.style.opacity = '0';\n      }\n    }\n  },\n  email: email => {\n    if (!email) return false;\n    let re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  },\n  password: password => {\n    if (!password) return false;\n    let re = /^[a-zA-Z\\-0-9]{6,20}$/;\n    return re.test(password);\n  }\n}; // function up() {\n//    var top = Math.max(document.body.scrollTop, document.documentElement.scrollTop);\n//    if (top > 0) {\n//       window.scrollBy(0, -100);\n//       var t = setTimeout('up()', 20);\n//    }\n//    else\n//       clearTimeout(t);\n//    return false;\n// }\n\nlet popup = {\n  show: function (txt, callback) {\n    let close = this.el('div', 'popup__close');\n    close.innerText = 'X';\n    let popup__item = this.el('div', 'popup__item');\n    popup__item.innerText = txt;\n    popup__item.append(close);\n    let popup = $('.popup').el[0];\n\n    if (!popup) {\n      popup = this.el('div', 'popup');\n    }\n\n    popup.append(popup__item);\n    popup.addEventListener('click', this.close, true);\n    document.body.append(popup);\n    let hideDelay = 5000;\n    setTimeout(() => {\n      popup__item.classList.remove('popup__item');\n      popup__item.classList.add('popup-hide');\n    }, hideDelay);\n    let removeDelay = hideDelay + 950;\n    setTimeout(() => {\n      popup__item.remove();\n\n      if (callback) {\n        callback();\n      }\n    }, removeDelay);\n  },\n  close: function (e) {\n    if (e.target.classList.contains('popup__close')) {\n      let popup = this.closest('.popup').remove();\n    }\n  },\n  el: function (tagName, className) {\n    let el = document.createElement(tagName);\n    el.classList.add(className);\n    return el;\n  }\n};\n\nconst uniq = array => Array.from(new Set(array));\n\nasync function get(key) {\n  let p = window.location.search;\n  p = p.match(new RegExp(key + '=([^&=]+)'));\n  return p ? p[1] : false;\n}\n\nasync function post(url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    data.token = document.querySelector('meta[name=\"token\"]').getAttribute('content');\n    let req = new XMLHttpRequest();\n    req.open('POST', url, true);\n    req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n    if (data instanceof FormData) {\n      req.send(data);\n    } else {\n      req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n      req.send('param=' + JSON.stringify(data));\n    }\n\n    req.onerror = function (e) {\n      reject(Error(\"Network Error\" + e));\n    };\n\n    req.onload = async function () {\n      resolve(req.response);\n    };\n  });\n}\n\nclass ElementCollection extends Array {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"el\", this);\n\n    _defineProperty(this, \"elType\", function () {\n      return {}.toString.call(this);\n    });\n\n    _defineProperty(this, \"value\", function () {\n      return this[0].getAttribute('value');\n    });\n\n    _defineProperty(this, \"attr\", function (attrName, attrVal) {\n      if (attrVal) {\n        this[0].setAttribute(attrName, attrVal);\n      }\n\n      return this[0].getAttribute(attrName);\n    });\n\n    _defineProperty(this, \"selectedIndexValue\", function () {\n      if (this.length) return this[0].selectedOptions[0].value;\n    });\n\n    _defineProperty(this, \"options\", function () {\n      if (this.length) return this[0].options;\n    });\n\n    _defineProperty(this, \"count\", function () {\n      return this.length;\n    });\n\n    _defineProperty(this, \"text\", function () {\n      if (this.length) return this[0].innerText;\n    });\n\n    _defineProperty(this, \"checked\", function () {\n      if (this.length) return this[0].checked;\n    });\n\n    _defineProperty(this, \"getWithStyle\", function (attr, val) {\n      let arr = [];\n      this.forEach(s => {\n        if (s.style[attr] === val) {\n          arr.push(s);\n        }\n      });\n      return arr;\n    });\n\n    _defineProperty(this, \"addClass\", function (className) {\n      this.forEach(s => {\n        s.classList.add(className);\n      });\n    });\n\n    _defineProperty(this, \"removeClass\", function (className) {\n      this.forEach(s => {\n        s.classList.remove(className);\n      });\n    });\n\n    _defineProperty(this, \"hasClass\", function (className) {\n      if (this.classList.contains(className)) return true;\n    });\n\n    _defineProperty(this, \"append\", function (el) {\n      this[0].appendChild(el);\n    });\n\n    _defineProperty(this, \"find\", function (selector) {\n      return this[0].querySelector(selector);\n    });\n\n    _defineProperty(this, \"css\", function (attr, val) {\n      if (!val) {\n        return this[0].style[attr];\n      }\n\n      this.forEach(s => {\n        s.style[attr] = val;\n      });\n    });\n  }\n\n  on(event, cbOrSelector, cb) {\n    if (typeof cbOrSelector === 'function') {\n      this.forEach(e => e.addEventListener(event, cbOrSelector));\n    } else {\n      this.forEach(elem => {\n        elem.addEventListener(event, e => {\n          if (e.target.matches(cbOrSelector)) cb(e);\n        });\n      });\n    }\n  }\n\n  ready(cb) {\n    const isReady = this.some(e => {\n      return e.readyState != null && e.readyState != 'loading';\n    });\n\n    if (isReady) {\n      cb();\n    } else {\n      document.addEventListener('DOMContentLoaded', cb);\n    }\n  }\n\n}\n\nfunction $(selector) {\n  if (typeof selector === 'string' || selector instanceof String) {\n    return new ElementCollection(...document.querySelectorAll(selector));\n  } else {\n    return new ElementCollection(selector);\n  }\n}\n\nfunction addTooltip(args) {\n  let ar = [...args.els];\n  ar.map(el => {\n    el.onmouseenter = function () {\n      let tip = document.createElement('div');\n      $(tip).addClass('tip');\n      tip.innerText = args.message;\n      el.append(tip);\n\n      let remove = () => tip.remove();\n\n      tip.addEventListener('mousemove', remove.bind(tip), true);\n    }.bind(args);\n\n    el.onmouseleave = () => {\n      let tip = el.querySelector('.tip');\n      tip.remove();\n    };\n  }, [args]);\n}\n\nclass test_delete_button {\n  constructor(elem) {\n    if (!elem) return;\n    this._elem = $(elem).el[0];\n    this._elem.onclick = this.delete;\n    this._elem.onmouseenter = this.showToolip;\n    this._elem.onmouseleave = this.hideTooltip;\n    this._elem.onmousemove = this.changeTooltipPos;\n  }\n\n  async delete() {\n    if (confirm('Удалить тест?')) {\n      let res = test.del();\n\n      if (res.msg === 'ok') {\n        window.location = '/test/edit';\n      }\n    }\n  }\n\n  showToolip(e) {\n    let x = e.clientX;\n    let y = e.clientY;\n    let tip = document.createElement('div');\n    $(tip).addClass('tip');\n    tip.style.top = y + 70 + 'px';\n    tip.style.left = x - 170 + 'px';\n    tip.innerText = this.getAttribute('tip');\n    this.tip = tip;\n    document.body.append(tip);\n  }\n\n  hideTooltip() {\n    this.tip.remove();\n  }\n\n  changeTooltipPos(e) {\n    this.tip.style.top = e.pageY + 35 + 'px';\n    this.tip.style.left = e.pageX - 170 + 'px';\n  }\n\n}\n\nasync function fetchWrap(Obj, file) {\n  let data = new FormData();\n  data.append('ajax', true);\n  data.append('param', JSON.stringify(Obj));\n  file ? data.append('file', file) : '';\n  let prom = await fetch(`/adminsc`, {\n    body: data,\n    method: 'post'\n  });\n  return prom.text();\n}\n\nasync function fetchW(url, Obj) {\n  let prom = await fetch(url, {\n    body: 'param=' + JSON.stringify(Obj),\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'HTTP_X_REQUESTED_WITH': 'XMLHttpRequest'\n    }\n  });\n  return prom;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///317\n")},846:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){eval("/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(317);\n\n\n(0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.accordion label').on('click', handleToggle);\n\nwindow.onload = function () {\n  // debugger\n  let checkboxes = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.admin-layout__sidebar.accordion input[type=checkbox]').el;\n\n  if (checkboxes) {\n    [...checkboxes].filter(ch => {\n      ch.checked = false;\n    });\n  }\n};\n\nfunction handleToggle(e) {\n  let checkbox = e.target.previousElementSibling;\n  let parent = checkbox.closest('ul');\n  let ul = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(checkbox.parentNode).find('ul');\n\n  if (checkbox.checked) {\n    slideUp(ul, 0);\n  } else {\n    parent.style.height = \"auto\";\n    slideDown(ul);\n    let ulHeight = ul.scrollHeight;\n    increaseParent(parent, ulHeight); // debugger\n\n    closeSiblings(parent);\n  }\n}\n\nfunction increaseParent(parent, ulHeight) {\n  if (!parent.classList.contains('accordion')) {\n    let parentHeight = parseInt(parent.style.maxHeight) + ulHeight;\n    parent.style.maxHeight = parentHeight + \"px\";\n  }\n}\n\nfunction slideDown(ul, callback) {\n  ul.style.maxHeight = ul.scrollHeight + \"px\";\n\n  if (callback) {\n    callback();\n  }\n}\n\nfunction closeSiblings(parent) {\n  Array.from(parent.children).map(el => {\n    let elArr = Array.from(el.children);\n    elArr.map(ch => {\n      if (ch.type && ch.type === 'checkbox' && ch.checked) {\n        let ul = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(ch.parentNode).find('ul');\n        slideUp(ul, 0, function () {\n          ch.checked = false;\n        });\n      }\n    });\n  });\n}\n\nfunction slideUp(ul, interval, callback) {\n  ul.style.maxHeight = 0 + \"px\";\n\n  if (callback) {\n    callback();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFlBQVk7QUFDekJSLFVBQUFBLEVBQUUsQ0FBQ0MsT0FBSCxHQUFhLEtBQWI7QUFDRCxTQUZNLENBQVA7QUFHRDtBQUNGLEtBUEQ7QUFRRCxHQVZIO0FBWUQ7O0FBRUQsU0FBU1UsT0FBVCxDQUFpQkgsRUFBakIsRUFBcUJ1QixRQUFyQixFQUErQlAsUUFBL0IsRUFBeUM7QUFDdkNoQixFQUFBQSxFQUFFLENBQUNJLEtBQUgsQ0FBU1csU0FBVCxHQUFxQixJQUFJLElBQXpCOztBQUNBLE1BQUlDLFFBQUosRUFBYztBQUNaQSxJQUFBQSxRQUFRO0FBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvY29tcG9uZW50cy9hY2NvcmRpb24vYWNjb3JkaW9uLmpzPzI1YjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2FjY29yZGlvbi5zY3NzJ1xyXG5pbXBvcnQgeyR9IGZyb20gJy4uLy4uL2NvbW1vbidcclxuXHJcblxyXG4kKCcuYWNjb3JkaW9uIGxhYmVsJykub24oJ2NsaWNrJywgaGFuZGxlVG9nZ2xlKVxyXG5cclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuLy8gZGVidWdnZXJcclxubGV0IGNoZWNrYm94ZXMgPSAkKCcuYWRtaW4tbGF5b3V0X19zaWRlYmFyLmFjY29yZGlvbiBpbnB1dFt0eXBlPWNoZWNrYm94XScpLmVsXHJcbiAgaWYgKGNoZWNrYm94ZXMpe1xyXG4gICAgWy4uLmNoZWNrYm94ZXNdLmZpbHRlcihjaD0+e1xyXG4gICAgICBjaC5jaGVja2VkID0gZmFsc2VcclxuICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVUb2dnbGUoZSkge1xyXG5cclxuICBsZXQgY2hlY2tib3ggPSBlLnRhcmdldC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXHJcbiAgbGV0IHBhcmVudCA9IGNoZWNrYm94LmNsb3Nlc3QoJ3VsJylcclxuICBsZXQgdWwgPSAkKGNoZWNrYm94LnBhcmVudE5vZGUpLmZpbmQoJ3VsJylcclxuXHJcblxyXG4gIGlmIChjaGVja2JveC5jaGVja2VkKSB7XHJcbiAgICBzbGlkZVVwKHVsLCAwLClcclxuICB9IGVsc2Uge1xyXG4gICAgcGFyZW50LnN0eWxlLmhlaWdodCA9IFwiYXV0b1wiXHJcbiAgICBzbGlkZURvd24odWwpXHJcbiAgICBsZXQgdWxIZWlnaHQgPSB1bC5zY3JvbGxIZWlnaHRcclxuICAgIGluY3JlYXNlUGFyZW50KHBhcmVudCwgdWxIZWlnaHQpXHJcbiAgICAvLyBkZWJ1Z2dlclxyXG4gICAgY2xvc2VTaWJsaW5ncyhwYXJlbnQpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbmNyZWFzZVBhcmVudChwYXJlbnQsIHVsSGVpZ2h0KSB7XHJcbiAgaWYgKCFwYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY2NvcmRpb24nKSkge1xyXG4gICAgbGV0IHBhcmVudEhlaWdodCA9IHBhcnNlSW50KHBhcmVudC5zdHlsZS5tYXhIZWlnaHQpICsgdWxIZWlnaHRcclxuICAgIHBhcmVudC5zdHlsZS5tYXhIZWlnaHQgPSBwYXJlbnRIZWlnaHQgKyBcInB4XCI7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHNsaWRlRG93bih1bCwgY2FsbGJhY2spIHtcclxuICB1bC5zdHlsZS5tYXhIZWlnaHQgPSB1bC5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XHJcbiAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICBjYWxsYmFjaygpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9zZVNpYmxpbmdzKHBhcmVudCkge1xyXG4gIEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKS5tYXAoKGVsKSA9PiB7XHJcbiAgICAgIGxldCBlbEFyciA9IEFycmF5LmZyb20oZWwuY2hpbGRyZW4pXHJcbiAgICAgIGVsQXJyLm1hcCgoY2gpID0+IHtcclxuICAgICAgICBpZiAoY2gudHlwZSAmJiBjaC50eXBlID09PSAnY2hlY2tib3gnICYmIGNoLmNoZWNrZWQpIHtcclxuICAgICAgICAgIGxldCB1bCA9ICQoY2gucGFyZW50Tm9kZSkuZmluZCgndWwnKVxyXG4gICAgICAgICAgc2xpZGVVcCh1bCwgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjaC5jaGVja2VkID0gZmFsc2VcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIClcclxufVxyXG5cclxuZnVuY3Rpb24gc2xpZGVVcCh1bCwgaW50ZXJ2YWwsIGNhbGxiYWNrKSB7XHJcbiAgdWwuc3R5bGUubWF4SGVpZ2h0ID0gMCArIFwicHhcIjtcclxuICBpZiAoY2FsbGJhY2spIHtcclxuICAgIGNhbGxiYWNrKClcclxuICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiJCIsIm9uIiwiaGFuZGxlVG9nZ2xlIiwid2luZG93Iiwib25sb2FkIiwiY2hlY2tib3hlcyIsImVsIiwiZmlsdGVyIiwiY2giLCJjaGVja2VkIiwiZSIsImNoZWNrYm94IiwidGFyZ2V0IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInBhcmVudCIsImNsb3Nlc3QiLCJ1bCIsInBhcmVudE5vZGUiLCJmaW5kIiwic2xpZGVVcCIsInN0eWxlIiwiaGVpZ2h0Iiwic2xpZGVEb3duIiwidWxIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJpbmNyZWFzZVBhcmVudCIsImNsb3NlU2libGluZ3MiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInBhcmVudEhlaWdodCIsInBhcnNlSW50IiwibWF4SGVpZ2h0IiwiY2FsbGJhY2siLCJBcnJheSIsImZyb20iLCJjaGlsZHJlbiIsIm1hcCIsImVsQXJyIiwidHlwZSIsImludGVydmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///846\n")},74:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* unused harmony exports showHidePaginBtn, appendBlock, navInit */\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(317);\n/* harmony import */ var _Test_model_question__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(456);\n/* harmony import */ var _Test_model_answer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(576);\n\n\n\n // Показать первую кнопку\n\n(0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('[data-pagination]:first-child').addClass('nav-active'); // $('.test-edit__content').addClass('flex1')\n//// add question\n\n(0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.pagination').on('click', function (e) {\n  if (e.target.classList.contains('add-question')) {\n    debugger;\n    show();\n    return;\n  } //// paginate\n\n\n  if (e.target.getAttribute('data-pagination')) {\n    paginate(e.target);\n    return;\n  }\n});\n\nfunction paginate(self) {\n  /// get clicked button Return if clicked is active\n  if (self.classList.contains('nav-active')) return;\n  let active_btn = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.pagination .nav-active').el[0]; //// change active button\n\n  active_btn.classList.remove('nav-active');\n  self.classList.add('nav-active'); //// hide the card\n\n  let id_to_hide = active_btn.dataset['pagination'];\n  (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(`#question-${id_to_hide}`).removeClass('flex1'); //// show the card\n\n  let id_to_show = self.dataset['pagination'];\n  (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(`#question-${id_to_show}`).addClass('flex1');\n} //// добавление вопроса\n\n\nasync function show(e) {\n  let testid = +(0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.test-name').value();\n  let questCount = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(\"[data-pagination]\").count();\n  let res = await (0,_common__WEBPACK_IMPORTED_MODULE_0__/* .post */ .v_)('/question/show', {\n    testid,\n    questCount\n  });\n  res = JSON.parse(res);\n  let Block = res.block;\n  let blocks = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.blocks').el[0];\n  blocks.insertAdjacentHTML('afterBegin', Block);\n  let newBlock = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)('.blocks .block:first-child').el[0];\n  document.querySelector('.flex1').classList.remove('flex1');\n  (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(newBlock).addClass('flex1');\n  let save_button = (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(newBlock).find('.question__save');\n  (0,_common__WEBPACK_IMPORTED_MODULE_0__.$)(save_button).on('click', (0,_Test_model_question__WEBPACK_IMPORTED_MODULE_1__/* ._question */ .A)().save);\n}\n\nfunction showHidePaginBtn(pagItem) {\n  let activePaginBtn = $('.pagination .nav-active').el[0];\n\n  if (activePaginBtn) {\n    activePaginBtn.classList.remove('nav-active');\n  }\n\n  $('.add-question').el[0].insertAdjacentHTML('beforeBegin', pagItem);\n}\n\nfunction appendBlock() {\n  let block = $('.overlay').find('.block');\n  $('.blocks').append(block);\n  $(block).addClass('flex1');\n  $('.a-add').on('click', _answer.create);\n  $('.q-delete').on('click', _question().delete());\n  $('.a-del').on('click', _answer.delete());\n}\n\nfunction navInit() {\n  let nav_buttons = $('[data-pagination]');\n  if (!nav_buttons[0]) return false;\n  Array.from(nav_buttons).map(el => {\n    el.classList.remove('nav-active');\n  });\n  nav_buttons[0].classList.add('nav-active');\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.d=function(Q,F){for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)};var __webpack_exports__=__webpack_require__(148)})();