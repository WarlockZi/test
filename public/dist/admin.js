(function(){"use strict";var __webpack_modules__={857:function(){eval("\n;// CONCATENATED MODULE: ./public/src/common.js\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nconst debounce = function (fn) {\n  let time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 700;\n  let timeout;\n  return function () {\n    const functionCall = () => fn.apply(this, arguments);\n\n    clearTimeout(timeout);\n    timeout = setTimeout(functionCall, time);\n  };\n};\n\nfunction IsJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction dropDown(elementId) {\n  var dropdown = document.getElementById(elementId);\n\n  try {\n    showDropdown(dropdown);\n  } catch (e) {}\n\n  return false;\n}\n\n;\n\nfunction showDropdown(element) {\n  var event;\n  event = document.createEvent('MouseEvents');\n  event.initMouseEvent('mousedown', true, true, window);\n  element.dispatchEvent(event);\n}\n\n;\nlet validate = {\n  sort: () => {\n    let error = undefined.nextElementSibling;\n    let ar = undefined.value.match(/\\D+/);\n\n    if (ar) {\n      error.innerText = 'Только цифры';\n      error.style.opacity = '1';\n    } else {\n      if (error.style.opacity === \"1\") {\n        error.style.opacity = '0';\n      }\n    }\n  },\n  email: email => {\n    if (!email) return false;\n    let text = \"Неправильный формат почты\";\n    let re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    let res = re.test(String(email).toLowerCase());\n    if (!res) return text;\n    return false;\n  },\n  password: password => {\n    if (!password) return false;\n    let text = \"Пароль может состоять из \\n \" + \"- Большие латинские бкувы \\n\" + \"- Маленькие латинские буквы \\n\" + \"- Цифры \\n\" + \"- Должен содержать не менее 6 символов\";\n    let res = /^[a-zA-Z\\-0-9]{6,20}$/.test(password);\n    if (!res) return text;\n    return false;\n  }\n}; // function up() {\n//    var top = Math.max(document.body.scrollTop, document.documentElement.scrollTop);\n//    if (top > 0) {\n//       window.scrollBy(0, -100);\n//       var t = setTimeout('up()', 20);\n//    }\n//    else\n//       clearTimeout(t);\n//    return false;\n// }\n\nlet popup = {\n  show: function (txt, callback) {\n    let close = this.el('div', 'popup__close');\n    close.innerText = 'X';\n    let popup__item = this.el('div', 'popup__item');\n    popup__item.innerText = txt;\n    popup__item.append(close);\n    let popup = common_$('.popup')[0];\n\n    if (!popup) {\n      popup = this.el('div', 'popup');\n    }\n\n    popup.append(popup__item);\n    popup.addEventListener('click', this.close, true);\n    document.body.append(popup);\n    let hideDelay = 5000;\n    setTimeout(() => {\n      popup__item.classList.remove('popup__item');\n      popup__item.classList.add('popup-hide');\n    }, hideDelay);\n    let removeDelay = hideDelay + 950;\n    setTimeout(() => {\n      popup__item.remove();\n\n      if (callback) {\n        callback();\n      }\n    }, removeDelay);\n  },\n  close: function (e) {\n    if (e.target.classList.contains('popup__close')) {\n      let popup = this.closest('.popup').remove();\n    }\n  },\n  el: function (tagName, className) {\n    let el = document.createElement(tagName);\n    el.classList.add(className);\n    return el;\n  }\n};\n\nconst uniq = array => Array.from(new Set(array));\n\nasync function get(key) {\n  let p = window.location.search;\n  p = p.match(new RegExp(key + '=([^&=]+)'));\n  return p ? p[1] : false;\n}\n\nasync function post(url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    data.token = document.querySelector('meta[name=\"token\"]').getAttribute('content');\n    let req = new XMLHttpRequest();\n    req.open('POST', url, true);\n    req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n    if (data instanceof FormData) {\n      req.send(data);\n    } else {\n      req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n      req.send('param=' + JSON.stringify(data));\n    }\n\n    req.onerror = function (e) {\n      reject(Error(\"Network Error\" + e));\n    };\n\n    req.onload = async function () {\n      if (IsJsonString(req.response)) {\n        resolve(req.response);\n      } else {\n        let e = common_$('.error')[0];\n\n        if (e) {\n          e.innerHTML = req.response;\n        }\n      }\n    };\n  });\n}\n\nclass ElementCollection extends Array {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"value\", function () {\n      return this[0].getAttribute('value');\n    });\n\n    _defineProperty(this, \"attr\", function (attrName, attrVal) {\n      if (attrVal) {\n        this[0].setAttribute(attrName, attrVal);\n      }\n\n      return this[0].getAttribute(attrName);\n    });\n\n    _defineProperty(this, \"selectedIndexValue\", function () {\n      if (this.length) return this[0].selectedOptions[0].value;\n    });\n\n    _defineProperty(this, \"options\", function () {\n      if (this.length) return this[0].options;\n    });\n\n    _defineProperty(this, \"count\", function () {\n      return this.length;\n    });\n\n    _defineProperty(this, \"text\", function () {\n      if (this.length) return this[0].innerText;\n    });\n\n    _defineProperty(this, \"checked\", function () {\n      if (this.length) return this[0].checked;\n    });\n\n    _defineProperty(this, \"getWithStyle\", function (attr, val) {\n      let arr = [];\n      this.forEach(s => {\n        if (s.style[attr] === val) {\n          arr.push(s);\n        }\n      });\n      return arr;\n    });\n\n    _defineProperty(this, \"addClass\", function (className) {\n      this.forEach(s => {\n        s.classList.add(className);\n      });\n    });\n\n    _defineProperty(this, \"removeClass\", function (className) {\n      this.forEach(s => {\n        s.classList.remove(className);\n      });\n    });\n\n    _defineProperty(this, \"hasClass\", function (className) {\n      if (this.classList.contains(className)) return true;\n    });\n\n    _defineProperty(this, \"append\", function (el) {\n      this[0].appendChild(el);\n    });\n\n    _defineProperty(this, \"find\", function (item) {\n      if (typeof item === 'string') {\n        return this[0].querySelector(item);\n      } else {\n        let filtered = this[0].filter(el => {\n          return el === item;\n        });\n        return filtered[0];\n      }\n    });\n\n    _defineProperty(this, \"findAll\", function (item) {\n      if (typeof item === 'string') {\n        return this[0].querySelectorAll(item);\n      }\n    });\n\n    _defineProperty(this, \"css\", function (attr, val) {\n      if (!val) {\n        return this[0].style[attr];\n      }\n\n      this.forEach(s => {\n        s.style[attr] = val;\n      });\n    });\n  }\n\n  // el = this\n  // elType = function(){return {}.toString.call(this)}\n  on(event, cbOrSelector, cb) {\n    if (typeof cbOrSelector === 'function') {\n      this.forEach(e => e.addEventListener(event, cbOrSelector));\n    } else {\n      this.forEach(elem => {\n        elem.addEventListener(event, e => {\n          if (e.target === cbOrSelector) cb(e);\n        });\n      });\n    }\n  }\n\n  ready(cb) {\n    const isReady = this.some(e => {\n      return e.readyState != null && e.readyState != 'loading';\n    });\n\n    if (isReady) {\n      cb();\n    } else {\n      document.addEventListener('DOMContentLoaded', cb);\n    }\n  }\n\n}\n\nfunction common_$(selector) {\n  if (typeof selector === 'string' || selector instanceof String) {\n    return new ElementCollection(...document.querySelectorAll(selector));\n  } else {\n    return new ElementCollection(selector);\n  }\n}\n\nfunction addTooltip(args) {\n  [].forEach.call(args, el => {\n    el.onmouseenter = function () {\n      let tip = document.createElement('div');\n      tip.classList.add('tip');\n      tip.innerText = args.message;\n      el.append(tip);\n\n      let remove = () => tip.remove();\n\n      tip.addEventListener('mousemove', remove.bind(tip), true);\n    }.bind(args);\n\n    el.onmouseleave = () => {\n      let tip = el.querySelector('.tip');\n      tip.remove();\n    };\n  });\n}\n\n\n;// CONCATENATED MODULE: ./public/src/components/accordion/accordion.js\n\n\nlet accordions = common_$('[accordion]');\n\nif (accordions) {\n  let checkboxes = common_$(`[accordion] [type='checkbox']`);\n\n  if (checkboxes) {\n    [...checkboxes].filter(ch => {\n      ch.checked = false;\n    });\n  }\n\n  common_$('[accordion]').on('click', handle);\n}\n\nfunction handle(_ref) {\n  let {\n    target\n  } = _ref;\n  let li = target.closest('li');\n  if (!li) return;\n  let accordion = li.closest('[accordion]');\n  let ul = common_$(li).find('ul');\n\n  if (!ul) {\n    rotateArrow(li);\n  } else {\n    if (ul.classList.contains('open')) {\n      slideUp(ul, li);\n    } else {\n      // accordion.style.height = \"auto\"\n      if (!ul) return;\n      let parent = li.closest('ul');\n      closeSiblings(parent);\n      slideDown(ul, li, parent);\n    }\n  }\n}\n\nfunction closeSiblings(parent) {\n  if (!parent) return;\n  let open = common_$(parent).find('li>ul.open');\n\n  if (open) {\n    let li = open.closest('li');\n    slideUp(open, li);\n  }\n}\n\nfunction slideDown(ul, li, parent) {\n  if (parent) {\n    parent.style.maxHeight = ul.scrollHeight + parent.scrollHeight + \"px\";\n  }\n\n  ul.style.maxHeight = ul.scrollHeight + \"px\";\n  ul.classList.toggle('open');\n  li.classList.toggle('rotate');\n}\n\nfunction slideUp(ul, li) {\n  ul.style.maxHeight = 0 + \"px\";\n  ul.classList.toggle('open');\n  li.classList.toggle('rotate');\n}\n\nfunction rotateArrow(li) {\n  li.classList.toggle('rotate');\n}\n\nfunction increaseParent(parent, ulHeight) {\n  if (!parent.classList.contains('accordion')) {\n    let parentHeight = parseInt(parent.style.maxHeight) + ulHeight;\n    parent.style.maxHeight = parentHeight + \"px\";\n  }\n}\n;// CONCATENATED MODULE: ./public/src/components/admin_sidebar.js\n\nlet sidebar = common_$('.admin_sidebar')[0];\n\nif (sidebar) {\n  common_$('svg#burger').on('click', function () {\n    let accordion = common_$('.admin_sidebar [accordion]')[0];\n    accordion.classList.toggle('show');\n  });\n}\n;// CONCATENATED MODULE: ./public/src/Admin/model/cache.js\n\n\nlet _cache = {\n  clearCache: async function () {\n    let res = await post('/adminsc/clearCache', {});\n\n    if (res === 'Успешно') {\n      popup.show(res);\n    }\n  }\n};\nfunction cache() {\n  $('.clearCache').on('click', _cache.clearCache);\n}\n;// CONCATENATED MODULE: ./public/src/Test/model/_testResult.js\n\nconst _testResult = {\n  delServer: async id => {\n    let res = await post('/adminsc/testresult/delete', {\n      id\n    });\n\n    if (res) {\n      popup.show('Удалено');\n    }\n  },\n  delDom: id => {\n    [].map.call(common_$(`[data-row = \"${id}\"]`), function (i) {\n      i.remove();\n    });\n  },\n  delete: id => {\n    if (confirm(\"Удалить результат теста?\")) {\n      _testResult.delDom(id);\n\n      _testResult.delServer(id);\n    }\n  }\n};\n;// CONCATENATED MODULE: ./public/src/Test/test_results/test_results.js\n\n\n\nfunction testResults() {\n  common_$('.test-results__table').on('click', handleClick);\n\n  function handleClick(_ref) {\n    let {\n      target\n    } = _ref;\n\n    if (!!target.closest('.del-btn')) {\n      let id = target.closest('.del-btn').dataset.row;\n\n      _testResult[\"delete\"](id);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Test/model/opentest/openquestion.js\nfunction openquestion_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass openquestion {\n  constructor() {\n    var _$$;\n\n    openquestion_defineProperty(this, \"model\", 'openquestion');\n\n    openquestion_defineProperty(this, \"questions\", common_$('.questions>.question-edit'));\n\n    openquestion_defineProperty(this, \"testId\", +((_$$ = common_$('.questions')[0]) === null || _$$ === void 0 ? void 0 : _$$.dataset.testId) ?? null);\n\n    openquestion_defineProperty(this, \"questionCnt\", common_$('.questions>.question-edit').length ?? null);\n  }\n\n  async create(target) {\n    let id = 0;\n    let opentest_id = this.testId;\n    let sort = this.questionCnt + 1;\n    let res = await post(`/adminsc/${this.model}/updateOrCreate`, {\n      id,\n      opentest_id,\n      sort\n    });\n    res = await JSON.parse(res);\n\n    if (res.id) {\n      let clone = this.cloneEmptyModel();\n      let addBtn = target.closest('.question__create-button');\n      clone.querySelector('.sort').innerText = this.questionCnt + 1;\n      clone.querySelector('.text').innerText = '';\n      clone.id = res.id;\n      addBtn.before(clone);\n    }\n  }\n\n  cloneEmptyModel() {\n    let question = common_$('.questions .question-edit')[0];\n\n    if (question) {\n      let q = question.cloneNode(true);\n      let ans = q.querySelectorAll('.row .answer');\n      [].forEach.call(ans, function (answer) {\n        answer.remove();\n      });\n      return q;\n    }\n  }\n\n  async sort(upToQestionNumber) {\n    let questionsEls = this.questions.filter(function (el, i) {\n      if (i + 1 < upToQestionNumber) return el;\n    });\n    let toChange = questionsEls.map(el => {\n      return el.id;\n    });\n    let res = await post(`/${this.model}/sort`, {\n      toChange\n    });\n    res = JSON.parse(res);\n\n    if (res.msg) {\n      popup.show(res.msg);\n    }\n\n    questionsEls.map((el, i) => {\n      common_$(el).find('.sort').innerText = i + 1;\n    });\n  }\n\n  async changeParent(target) {\n    // debugger\n    if (target.tagName.toLowerCase() !== 'li') return;\n    let id = target.closest('.question-edit').id;\n    let test_id = target.dataset['value'];\n    let test_name = target.innerText;\n    if (!+id || !+test_id || !test_name) return;\n    let res = await post(`/adminsc/${this.model}/changeParent`, {\n      id,\n      test_id\n    });\n    res = JSON.parse(res);\n    if (res.msg !== 'ok') throw e;\n    let question = target.closest('.question-edit');\n    question.remove();\n    popup.show('Перемещен в ' + test_name);\n  }\n\n  showAnswers(target) {\n    let row = target.closest('.question-edit');\n    let answers = common_$(row).find('.question__answers');\n    answers.classList.toggle('height');\n    answers.classList.toggle('scale');\n    target.classList.toggle('rotate');\n  }\n\n  async del(target) {\n    if (confirm(\"Удалить вопрос со всеми его ответами?\")) {\n      let question = target.closest('.question-edit');\n      let id = question.id;\n      let res = await post(`/adminsc/${this.model}/delete`, {\n        id\n      });\n      res = JSON.parse(res);\n\n      if (res) {\n        question.remove();\n        popup.show(res.msg);\n      }\n    }\n  }\n\n}\n\nconst _openquestion = new openquestion();\n;// CONCATENATED MODULE: ./node_modules/sortablejs/modular/sortable.esm.js\n/**!\n * Sortable 1.14.0\n * @author\tRubaXa   <trash@rubaxa.org>\n * @author\towenm    <owen23355@gmail.com>\n * @license MIT\n */\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        sortable_esm_defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction sortable_esm_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar version = \"1.14.0\";\n\nfunction userAgent(pattern) {\n  if (typeof window !== 'undefined' && window.navigator) {\n    return !! /*@__PURE__*/navigator.userAgent.match(pattern);\n  }\n}\n\nvar IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\\.|msie|iemobile|Windows Phone)/i);\nvar Edge = userAgent(/Edge/i);\nvar FireFox = userAgent(/firefox/i);\nvar Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);\nvar IOS = userAgent(/iP(ad|od|hone)/i);\nvar ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);\n\nvar captureMode = {\n  capture: false,\n  passive: false\n};\n\nfunction on(el, event, fn) {\n  el.addEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction off(el, event, fn) {\n  el.removeEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction matches(\n/**HTMLElement*/\nel,\n/**String*/\nselector) {\n  if (!selector) return;\n  selector[0] === '>' && (selector = selector.substring(1));\n\n  if (el) {\n    try {\n      if (el.matches) {\n        return el.matches(selector);\n      } else if (el.msMatchesSelector) {\n        return el.msMatchesSelector(selector);\n      } else if (el.webkitMatchesSelector) {\n        return el.webkitMatchesSelector(selector);\n      }\n    } catch (_) {\n      return false;\n    }\n  }\n\n  return false;\n}\n\nfunction getParentOrHost(el) {\n  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;\n}\n\nfunction closest(\n/**HTMLElement*/\nel,\n/**String*/\nselector,\n/**HTMLElement*/\nctx, includeCTX) {\n  if (el) {\n    ctx = ctx || document;\n\n    do {\n      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {\n        return el;\n      }\n\n      if (el === ctx) break;\n      /* jshint boss:true */\n    } while (el = getParentOrHost(el));\n  }\n\n  return null;\n}\n\nvar R_SPACE = /\\s+/g;\n\nfunction toggleClass(el, name, state) {\n  if (el && name) {\n    if (el.classList) {\n      el.classList[state ? 'add' : 'remove'](name);\n    } else {\n      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n    }\n  }\n}\n\nfunction css(el, prop, val) {\n  var style = el && el.style;\n\n  if (style) {\n    if (val === void 0) {\n      if (document.defaultView && document.defaultView.getComputedStyle) {\n        val = document.defaultView.getComputedStyle(el, '');\n      } else if (el.currentStyle) {\n        val = el.currentStyle;\n      }\n\n      return prop === void 0 ? val : val[prop];\n    } else {\n      if (!(prop in style) && prop.indexOf('webkit') === -1) {\n        prop = '-webkit-' + prop;\n      }\n\n      style[prop] = val + (typeof val === 'string' ? '' : 'px');\n    }\n  }\n}\n\nfunction matrix(el, selfOnly) {\n  var appliedTransforms = '';\n\n  if (typeof el === 'string') {\n    appliedTransforms = el;\n  } else {\n    do {\n      var transform = css(el, 'transform');\n\n      if (transform && transform !== 'none') {\n        appliedTransforms = transform + ' ' + appliedTransforms;\n      }\n      /* jshint boss:true */\n\n    } while (!selfOnly && (el = el.parentNode));\n  }\n\n  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;\n  /*jshint -W056 */\n\n  return matrixFn && new matrixFn(appliedTransforms);\n}\n\nfunction find(ctx, tagName, iterator) {\n  if (ctx) {\n    var list = ctx.getElementsByTagName(tagName),\n        i = 0,\n        n = list.length;\n\n    if (iterator) {\n      for (; i < n; i++) {\n        iterator(list[i], i);\n      }\n    }\n\n    return list;\n  }\n\n  return [];\n}\n\nfunction getWindowScrollingElement() {\n  var scrollingElement = document.scrollingElement;\n\n  if (scrollingElement) {\n    return scrollingElement;\n  } else {\n    return document.documentElement;\n  }\n}\n/**\n * Returns the \"bounding client rect\" of given element\n * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted\n * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container\n * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr\n * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone\n * @param  {[HTMLElement]} container              The parent the element will be placed in\n * @return {Object}                               The boundingClientRect of el, with specified adjustments\n */\n\n\nfunction getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {\n  if (!el.getBoundingClientRect && el !== window) return;\n  var elRect, top, left, bottom, right, height, width;\n\n  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {\n    elRect = el.getBoundingClientRect();\n    top = elRect.top;\n    left = elRect.left;\n    bottom = elRect.bottom;\n    right = elRect.right;\n    height = elRect.height;\n    width = elRect.width;\n  } else {\n    top = 0;\n    left = 0;\n    bottom = window.innerHeight;\n    right = window.innerWidth;\n    height = window.innerHeight;\n    width = window.innerWidth;\n  }\n\n  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {\n    // Adjust for translate()\n    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n    // Not needed on <= IE11\n\n    if (!IE11OrLess) {\n      do {\n        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {\n          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container\n\n          top -= containerRect.top + parseInt(css(container, 'border-top-width'));\n          left -= containerRect.left + parseInt(css(container, 'border-left-width'));\n          bottom = top + elRect.height;\n          right = left + elRect.width;\n          break;\n        }\n        /* jshint boss:true */\n\n      } while (container = container.parentNode);\n    }\n  }\n\n  if (undoScale && el !== window) {\n    // Adjust for scale()\n    var elMatrix = matrix(container || el),\n        scaleX = elMatrix && elMatrix.a,\n        scaleY = elMatrix && elMatrix.d;\n\n    if (elMatrix) {\n      top /= scaleY;\n      left /= scaleX;\n      width /= scaleX;\n      height /= scaleY;\n      bottom = top + height;\n      right = left + width;\n    }\n  }\n\n  return {\n    top: top,\n    left: left,\n    bottom: bottom,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n/**\n * Checks if a side of an element is scrolled past a side of its parents\n * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question\n * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')\n * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')\n * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element\n */\n\n\nfunction isScrolledPast(el, elSide, parentSide) {\n  var parent = getParentAutoScrollElement(el, true),\n      elSideVal = getRect(el)[elSide];\n  /* jshint boss:true */\n\n  while (parent) {\n    var parentSideVal = getRect(parent)[parentSide],\n        visible = void 0;\n\n    if (parentSide === 'top' || parentSide === 'left') {\n      visible = elSideVal >= parentSideVal;\n    } else {\n      visible = elSideVal <= parentSideVal;\n    }\n\n    if (!visible) return parent;\n    if (parent === getWindowScrollingElement()) break;\n    parent = getParentAutoScrollElement(parent, false);\n  }\n\n  return false;\n}\n/**\n * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n * and non-draggable elements\n * @param  {HTMLElement} el       The parent element\n * @param  {Number} childNum      The index of the child\n * @param  {Object} options       Parent Sortable's options\n * @return {HTMLElement}          The child at index childNum, or null if not found\n */\n\n\nfunction getChild(el, childNum, options, includeDragEl) {\n  var currentChild = 0,\n      i = 0,\n      children = el.children;\n\n  while (i < children.length) {\n    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {\n      if (currentChild === childNum) {\n        return children[i];\n      }\n\n      currentChild++;\n    }\n\n    i++;\n  }\n\n  return null;\n}\n/**\n * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n * @param  {HTMLElement} el       Parent element\n * @param  {selector} selector    Any other elements that should be ignored\n * @return {HTMLElement}          The last child, ignoring ghostEl\n */\n\n\nfunction lastChild(el, selector) {\n  var last = el.lastElementChild;\n\n  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {\n    last = last.previousElementSibling;\n  }\n\n  return last || null;\n}\n/**\n * Returns the index of an element within its parent for a selected set of\n * elements\n * @param  {HTMLElement} el\n * @param  {selector} selector\n * @return {number}\n */\n\n\nfunction index(el, selector) {\n  var index = 0;\n\n  if (!el || !el.parentNode) {\n    return -1;\n  }\n  /* jshint boss:true */\n\n\n  while (el = el.previousElementSibling) {\n    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {\n      index++;\n    }\n  }\n\n  return index;\n}\n/**\n * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n * The value is returned in real pixels.\n * @param  {HTMLElement} el\n * @return {Array}             Offsets in the format of [left, top]\n */\n\n\nfunction getRelativeScrollOffset(el) {\n  var offsetLeft = 0,\n      offsetTop = 0,\n      winScroller = getWindowScrollingElement();\n\n  if (el) {\n    do {\n      var elMatrix = matrix(el),\n          scaleX = elMatrix.a,\n          scaleY = elMatrix.d;\n      offsetLeft += el.scrollLeft * scaleX;\n      offsetTop += el.scrollTop * scaleY;\n    } while (el !== winScroller && (el = el.parentNode));\n  }\n\n  return [offsetLeft, offsetTop];\n}\n/**\n * Returns the index of the object within the given array\n * @param  {Array} arr   Array that may or may not hold the object\n * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find\n * @return {Number}      The index of the object in the array, or -1\n */\n\n\nfunction indexOfObject(arr, obj) {\n  for (var i in arr) {\n    if (!arr.hasOwnProperty(i)) continue;\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);\n    }\n  }\n\n  return -1;\n}\n\nfunction getParentAutoScrollElement(el, includeSelf) {\n  // skip to window\n  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();\n  var elem = el;\n  var gotSelf = false;\n\n  do {\n    // we don't need to get elem css if it isn't even overflowing in the first place (performance)\n    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n      var elemCSS = css(elem);\n\n      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {\n        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();\n        if (gotSelf || includeSelf) return elem;\n        gotSelf = true;\n      }\n    }\n    /* jshint boss:true */\n\n  } while (elem = elem.parentNode);\n\n  return getWindowScrollingElement();\n}\n\nfunction extend(dst, src) {\n  if (dst && src) {\n    for (var key in src) {\n      if (src.hasOwnProperty(key)) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst;\n}\n\nfunction isRectEqual(rect1, rect2) {\n  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);\n}\n\nvar _throttleTimeout;\n\nfunction throttle(callback, ms) {\n  return function () {\n    if (!_throttleTimeout) {\n      var args = arguments,\n          _this = this;\n\n      if (args.length === 1) {\n        callback.call(_this, args[0]);\n      } else {\n        callback.apply(_this, args);\n      }\n\n      _throttleTimeout = setTimeout(function () {\n        _throttleTimeout = void 0;\n      }, ms);\n    }\n  };\n}\n\nfunction cancelThrottle() {\n  clearTimeout(_throttleTimeout);\n  _throttleTimeout = void 0;\n}\n\nfunction scrollBy(el, x, y) {\n  el.scrollLeft += x;\n  el.scrollTop += y;\n}\n\nfunction clone(el) {\n  var Polymer = window.Polymer;\n  var $ = window.jQuery || window.Zepto;\n\n  if (Polymer && Polymer.dom) {\n    return Polymer.dom(el).cloneNode(true);\n  } else if ($) {\n    return $(el).clone(true)[0];\n  } else {\n    return el.cloneNode(true);\n  }\n}\n\nfunction setRect(el, rect) {\n  css(el, 'position', 'absolute');\n  css(el, 'top', rect.top);\n  css(el, 'left', rect.left);\n  css(el, 'width', rect.width);\n  css(el, 'height', rect.height);\n}\n\nfunction unsetRect(el) {\n  css(el, 'position', '');\n  css(el, 'top', '');\n  css(el, 'left', '');\n  css(el, 'width', '');\n  css(el, 'height', '');\n}\n\nvar expando = 'Sortable' + new Date().getTime();\n\nfunction AnimationStateManager() {\n  var animationStates = [],\n      animationCallbackId;\n  return {\n    captureAnimationState: function captureAnimationState() {\n      animationStates = [];\n      if (!this.options.animation) return;\n      var children = [].slice.call(this.el.children);\n      children.forEach(function (child) {\n        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;\n        animationStates.push({\n          target: child,\n          rect: getRect(child)\n        });\n\n        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation\n\n\n        if (child.thisAnimationDuration) {\n          var childMatrix = matrix(child, true);\n\n          if (childMatrix) {\n            fromRect.top -= childMatrix.f;\n            fromRect.left -= childMatrix.e;\n          }\n        }\n\n        child.fromRect = fromRect;\n      });\n    },\n    addAnimationState: function addAnimationState(state) {\n      animationStates.push(state);\n    },\n    removeAnimationState: function removeAnimationState(target) {\n      animationStates.splice(indexOfObject(animationStates, {\n        target: target\n      }), 1);\n    },\n    animateAll: function animateAll(callback) {\n      var _this = this;\n\n      if (!this.options.animation) {\n        clearTimeout(animationCallbackId);\n        if (typeof callback === 'function') callback();\n        return;\n      }\n\n      var animating = false,\n          animationTime = 0;\n      animationStates.forEach(function (state) {\n        var time = 0,\n            target = state.target,\n            fromRect = target.fromRect,\n            toRect = getRect(target),\n            prevFromRect = target.prevFromRect,\n            prevToRect = target.prevToRect,\n            animatingRect = state.rect,\n            targetMatrix = matrix(target, true);\n\n        if (targetMatrix) {\n          // Compensate for current animation\n          toRect.top -= targetMatrix.f;\n          toRect.left -= targetMatrix.e;\n        }\n\n        target.toRect = toRect;\n\n        if (target.thisAnimationDuration) {\n          // Could also check if animatingRect is between fromRect and toRect\n          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect\n          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {\n            // If returning to same place as started from animation and on same axis\n            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);\n          }\n        } // if fromRect != toRect: animate\n\n\n        if (!isRectEqual(toRect, fromRect)) {\n          target.prevFromRect = fromRect;\n          target.prevToRect = toRect;\n\n          if (!time) {\n            time = _this.options.animation;\n          }\n\n          _this.animate(target, animatingRect, toRect, time);\n        }\n\n        if (time) {\n          animating = true;\n          animationTime = Math.max(animationTime, time);\n          clearTimeout(target.animationResetTimer);\n          target.animationResetTimer = setTimeout(function () {\n            target.animationTime = 0;\n            target.prevFromRect = null;\n            target.fromRect = null;\n            target.prevToRect = null;\n            target.thisAnimationDuration = null;\n          }, time);\n          target.thisAnimationDuration = time;\n        }\n      });\n      clearTimeout(animationCallbackId);\n\n      if (!animating) {\n        if (typeof callback === 'function') callback();\n      } else {\n        animationCallbackId = setTimeout(function () {\n          if (typeof callback === 'function') callback();\n        }, animationTime);\n      }\n\n      animationStates = [];\n    },\n    animate: function animate(target, currentRect, toRect, duration) {\n      if (duration) {\n        css(target, 'transition', '');\n        css(target, 'transform', '');\n        var elMatrix = matrix(this.el),\n            scaleX = elMatrix && elMatrix.a,\n            scaleY = elMatrix && elMatrix.d,\n            translateX = (currentRect.left - toRect.left) / (scaleX || 1),\n            translateY = (currentRect.top - toRect.top) / (scaleY || 1);\n        target.animatingX = !!translateX;\n        target.animatingY = !!translateY;\n        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');\n        this.forRepaintDummy = repaint(target); // repaint\n\n        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n        css(target, 'transform', 'translate3d(0,0,0)');\n        typeof target.animated === 'number' && clearTimeout(target.animated);\n        target.animated = setTimeout(function () {\n          css(target, 'transition', '');\n          css(target, 'transform', '');\n          target.animated = false;\n          target.animatingX = false;\n          target.animatingY = false;\n        }, duration);\n      }\n    }\n  };\n}\n\nfunction repaint(target) {\n  return target.offsetWidth;\n}\n\nfunction calculateRealTime(animatingRect, fromRect, toRect, options) {\n  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;\n}\n\nvar plugins = [];\nvar defaults = {\n  initializeByDefault: true\n};\nvar PluginManager = {\n  mount: function mount(plugin) {\n    // Set default static properties\n    for (var option in defaults) {\n      if (defaults.hasOwnProperty(option) && !(option in plugin)) {\n        plugin[option] = defaults[option];\n      }\n    }\n\n    plugins.forEach(function (p) {\n      if (p.pluginName === plugin.pluginName) {\n        throw \"Sortable: Cannot mount plugin \".concat(plugin.pluginName, \" more than once\");\n      }\n    });\n    plugins.push(plugin);\n  },\n  pluginEvent: function pluginEvent(eventName, sortable, evt) {\n    var _this = this;\n\n    this.eventCanceled = false;\n\n    evt.cancel = function () {\n      _this.eventCanceled = true;\n    };\n\n    var eventNameGlobal = eventName + 'Global';\n    plugins.forEach(function (plugin) {\n      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable\n\n      if (sortable[plugin.pluginName][eventNameGlobal]) {\n        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({\n          sortable: sortable\n        }, evt));\n      } // Only fire plugin event if plugin is enabled in this sortable,\n      // and plugin has event defined\n\n\n      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {\n        sortable[plugin.pluginName][eventName](_objectSpread2({\n          sortable: sortable\n        }, evt));\n      }\n    });\n  },\n  initializePlugins: function initializePlugins(sortable, el, defaults, options) {\n    plugins.forEach(function (plugin) {\n      var pluginName = plugin.pluginName;\n      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;\n      var initialized = new plugin(sortable, el, sortable.options);\n      initialized.sortable = sortable;\n      initialized.options = sortable.options;\n      sortable[pluginName] = initialized; // Add default options from plugin\n\n      _extends(defaults, initialized.defaults);\n    });\n\n    for (var option in sortable.options) {\n      if (!sortable.options.hasOwnProperty(option)) continue;\n      var modified = this.modifyOption(sortable, option, sortable.options[option]);\n\n      if (typeof modified !== 'undefined') {\n        sortable.options[option] = modified;\n      }\n    }\n  },\n  getEventProperties: function getEventProperties(name, sortable) {\n    var eventProperties = {};\n    plugins.forEach(function (plugin) {\n      if (typeof plugin.eventProperties !== 'function') return;\n\n      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));\n    });\n    return eventProperties;\n  },\n  modifyOption: function modifyOption(sortable, name, value) {\n    var modifiedValue;\n    plugins.forEach(function (plugin) {\n      // Plugin must exist on the Sortable\n      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin\n\n      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {\n        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);\n      }\n    });\n    return modifiedValue;\n  }\n};\n\nfunction dispatchEvent(_ref) {\n  var sortable = _ref.sortable,\n      rootEl = _ref.rootEl,\n      name = _ref.name,\n      targetEl = _ref.targetEl,\n      cloneEl = _ref.cloneEl,\n      toEl = _ref.toEl,\n      fromEl = _ref.fromEl,\n      oldIndex = _ref.oldIndex,\n      newIndex = _ref.newIndex,\n      oldDraggableIndex = _ref.oldDraggableIndex,\n      newDraggableIndex = _ref.newDraggableIndex,\n      originalEvent = _ref.originalEvent,\n      putSortable = _ref.putSortable,\n      extraEventProperties = _ref.extraEventProperties;\n  sortable = sortable || rootEl && rootEl[expando];\n  if (!sortable) return;\n  var evt,\n      options = sortable.options,\n      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature\n\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent(name, {\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    evt = document.createEvent('Event');\n    evt.initEvent(name, true, true);\n  }\n\n  evt.to = toEl || rootEl;\n  evt.from = fromEl || rootEl;\n  evt.item = targetEl || rootEl;\n  evt.clone = cloneEl;\n  evt.oldIndex = oldIndex;\n  evt.newIndex = newIndex;\n  evt.oldDraggableIndex = oldDraggableIndex;\n  evt.newDraggableIndex = newDraggableIndex;\n  evt.originalEvent = originalEvent;\n  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));\n\n  for (var option in allEventProperties) {\n    evt[option] = allEventProperties[option];\n  }\n\n  if (rootEl) {\n    rootEl.dispatchEvent(evt);\n  }\n\n  if (options[onName]) {\n    options[onName].call(sortable, evt);\n  }\n}\n\nvar _excluded = [\"evt\"];\n\nvar pluginEvent = function pluginEvent(eventName, sortable) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      originalEvent = _ref.evt,\n      data = _objectWithoutProperties(_ref, _excluded);\n\n  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({\n    dragEl: dragEl,\n    parentEl: parentEl,\n    ghostEl: ghostEl,\n    rootEl: rootEl,\n    nextEl: nextEl,\n    lastDownEl: lastDownEl,\n    cloneEl: cloneEl,\n    cloneHidden: cloneHidden,\n    dragStarted: moved,\n    putSortable: putSortable,\n    activeSortable: Sortable.active,\n    originalEvent: originalEvent,\n    oldIndex: oldIndex,\n    oldDraggableIndex: oldDraggableIndex,\n    newIndex: newIndex,\n    newDraggableIndex: newDraggableIndex,\n    hideGhostForTarget: _hideGhostForTarget,\n    unhideGhostForTarget: _unhideGhostForTarget,\n    cloneNowHidden: function cloneNowHidden() {\n      cloneHidden = true;\n    },\n    cloneNowShown: function cloneNowShown() {\n      cloneHidden = false;\n    },\n    dispatchSortableEvent: function dispatchSortableEvent(name) {\n      _dispatchEvent({\n        sortable: sortable,\n        name: name,\n        originalEvent: originalEvent\n      });\n    }\n  }, data));\n};\n\nfunction _dispatchEvent(info) {\n  dispatchEvent(_objectSpread2({\n    putSortable: putSortable,\n    cloneEl: cloneEl,\n    targetEl: dragEl,\n    rootEl: rootEl,\n    oldIndex: oldIndex,\n    oldDraggableIndex: oldDraggableIndex,\n    newIndex: newIndex,\n    newDraggableIndex: newDraggableIndex\n  }, info));\n}\n\nvar dragEl,\n    parentEl,\n    ghostEl,\n    rootEl,\n    nextEl,\n    lastDownEl,\n    cloneEl,\n    cloneHidden,\n    oldIndex,\n    newIndex,\n    oldDraggableIndex,\n    newDraggableIndex,\n    activeGroup,\n    putSortable,\n    awaitingDragStarted = false,\n    ignoreNextClick = false,\n    sortables = [],\n    tapEvt,\n    touchEvt,\n    lastDx,\n    lastDy,\n    tapDistanceLeft,\n    tapDistanceTop,\n    moved,\n    lastTarget,\n    lastDirection,\n    pastFirstInvertThresh = false,\n    isCircumstantialInvert = false,\n    targetMoveDistance,\n    // For positioning ghost absolutely\nghostRelativeParent,\n    ghostRelativeParentInitialScroll = [],\n    // (left, top)\n_silent = false,\n    savedInputChecked = [];\n/** @const */\n\nvar documentExists = typeof document !== 'undefined',\n    PositionGhostAbsolutely = IOS,\n    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\n    // This will not pass for IE9, because IE9 DnD only works on anchors\nsupportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),\n    supportCssPointerEvents = function () {\n  if (!documentExists) return; // false when <= IE11\n\n  if (IE11OrLess) {\n    return false;\n  }\n\n  var el = document.createElement('x');\n  el.style.cssText = 'pointer-events:auto';\n  return el.style.pointerEvents === 'auto';\n}(),\n    _detectDirection = function _detectDirection(el, options) {\n  var elCSS = css(el),\n      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),\n      child1 = getChild(el, 0, options),\n      child2 = getChild(el, 1, options),\n      firstChildCSS = child1 && css(child1),\n      secondChildCSS = child2 && css(child2),\n      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,\n      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;\n\n  if (elCSS.display === 'flex') {\n    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';\n  }\n\n  if (elCSS.display === 'grid') {\n    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';\n  }\n\n  if (child1 && firstChildCSS[\"float\"] && firstChildCSS[\"float\"] !== 'none') {\n    var touchingSideChild2 = firstChildCSS[\"float\"] === 'left' ? 'left' : 'right';\n    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';\n  }\n\n  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';\n},\n    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {\n  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,\n      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,\n      dragElOppLength = vertical ? dragRect.width : dragRect.height,\n      targetS1Opp = vertical ? targetRect.left : targetRect.top,\n      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,\n      targetOppLength = vertical ? targetRect.width : targetRect.height;\n  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;\n},\n\n/**\n * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n * @param  {Number} x      X position\n * @param  {Number} y      Y position\n * @return {HTMLElement}   Element of the first found nearest Sortable\n */\n_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {\n  var ret;\n  sortables.some(function (sortable) {\n    var threshold = sortable[expando].options.emptyInsertThreshold;\n    if (!threshold || lastChild(sortable)) return;\n    var rect = getRect(sortable),\n        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,\n        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;\n\n    if (insideHorizontally && insideVertically) {\n      return ret = sortable;\n    }\n  });\n  return ret;\n},\n    _prepareGroup = function _prepareGroup(options) {\n  function toFn(value, pull) {\n    return function (to, from, dragEl, evt) {\n      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;\n\n      if (value == null && (pull || sameGroup)) {\n        // Default pull value\n        // Default pull and put value if same group\n        return true;\n      } else if (value == null || value === false) {\n        return false;\n      } else if (pull && value === 'clone') {\n        return value;\n      } else if (typeof value === 'function') {\n        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n      } else {\n        var otherGroup = (pull ? to : from).options.group.name;\n        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;\n      }\n    };\n  }\n\n  var group = {};\n  var originalGroup = options.group;\n\n  if (!originalGroup || _typeof(originalGroup) != 'object') {\n    originalGroup = {\n      name: originalGroup\n    };\n  }\n\n  group.name = originalGroup.name;\n  group.checkPull = toFn(originalGroup.pull, true);\n  group.checkPut = toFn(originalGroup.put);\n  group.revertClone = originalGroup.revertClone;\n  options.group = group;\n},\n    _hideGhostForTarget = function _hideGhostForTarget() {\n  if (!supportCssPointerEvents && ghostEl) {\n    css(ghostEl, 'display', 'none');\n  }\n},\n    _unhideGhostForTarget = function _unhideGhostForTarget() {\n  if (!supportCssPointerEvents && ghostEl) {\n    css(ghostEl, 'display', '');\n  }\n}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position\n\n\nif (documentExists) {\n  document.addEventListener('click', function (evt) {\n    if (ignoreNextClick) {\n      evt.preventDefault();\n      evt.stopPropagation && evt.stopPropagation();\n      evt.stopImmediatePropagation && evt.stopImmediatePropagation();\n      ignoreNextClick = false;\n      return false;\n    }\n  }, true);\n}\n\nvar nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {\n  if (dragEl) {\n    evt = evt.touches ? evt.touches[0] : evt;\n\n    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n    if (nearest) {\n      // Create imitation event\n      var event = {};\n\n      for (var i in evt) {\n        if (evt.hasOwnProperty(i)) {\n          event[i] = evt[i];\n        }\n      }\n\n      event.target = event.rootEl = nearest;\n      event.preventDefault = void 0;\n      event.stopPropagation = void 0;\n\n      nearest[expando]._onDragOver(event);\n    }\n  }\n};\n\nvar _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {\n  if (dragEl) {\n    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n  }\n};\n/**\n * @class  Sortable\n * @param  {HTMLElement}  el\n * @param  {Object}       [options]\n */\n\n\nfunction Sortable(el, options) {\n  if (!(el && el.nodeType && el.nodeType === 1)) {\n    throw \"Sortable: `el` must be an HTMLElement, not \".concat({}.toString.call(el));\n  }\n\n  this.el = el; // root element\n\n  this.options = options = _extends({}, options); // Export instance\n\n  el[expando] = this;\n  var defaults = {\n    group: null,\n    sort: true,\n    disabled: false,\n    store: null,\n    handle: null,\n    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',\n    swapThreshold: 1,\n    // percentage; 0 <= x <= 1\n    invertSwap: false,\n    // invert always\n    invertedSwapThreshold: null,\n    // will be set to same as swapThreshold if default\n    removeCloneOnHide: true,\n    direction: function direction() {\n      return _detectDirection(el, this.options);\n    },\n    ghostClass: 'sortable-ghost',\n    chosenClass: 'sortable-chosen',\n    dragClass: 'sortable-drag',\n    ignore: 'a, img',\n    filter: null,\n    preventOnFilter: true,\n    animation: 0,\n    easing: null,\n    setData: function setData(dataTransfer, dragEl) {\n      dataTransfer.setData('Text', dragEl.textContent);\n    },\n    dropBubble: false,\n    dragoverBubble: false,\n    dataIdAttr: 'data-id',\n    delay: 0,\n    delayOnTouchOnly: false,\n    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,\n    forceFallback: false,\n    fallbackClass: 'sortable-fallback',\n    fallbackOnBody: false,\n    fallbackTolerance: 0,\n    fallbackOffset: {\n      x: 0,\n      y: 0\n    },\n    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,\n    emptyInsertThreshold: 5\n  };\n  PluginManager.initializePlugins(this, el, defaults); // Set default options\n\n  for (var name in defaults) {\n    !(name in options) && (options[name] = defaults[name]);\n  }\n\n  _prepareGroup(options); // Bind all private methods\n\n\n  for (var fn in this) {\n    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n      this[fn] = this[fn].bind(this);\n    }\n  } // Setup drag mode\n\n\n  this.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n  if (this.nativeDraggable) {\n    // Touch start threshold cannot be greater than the native dragstart threshold\n    this.options.touchStartThreshold = 1;\n  } // Bind events\n\n\n  if (options.supportPointer) {\n    on(el, 'pointerdown', this._onTapStart);\n  } else {\n    on(el, 'mousedown', this._onTapStart);\n    on(el, 'touchstart', this._onTapStart);\n  }\n\n  if (this.nativeDraggable) {\n    on(el, 'dragover', this);\n    on(el, 'dragenter', this);\n  }\n\n  sortables.push(this.el); // Restore sorting\n\n  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager\n\n  _extends(this, AnimationStateManager());\n}\n\nSortable.prototype =\n/** @lends Sortable.prototype */\n{\n  constructor: Sortable,\n  _isOutsideThisEl: function _isOutsideThisEl(target) {\n    if (!this.el.contains(target) && target !== this.el) {\n      lastTarget = null;\n    }\n  },\n  _getDirection: function _getDirection(evt, target) {\n    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\n  },\n  _onTapStart: function _onTapStart(\n  /** Event|TouchEvent */\n  evt) {\n    if (!evt.cancelable) return;\n\n    var _this = this,\n        el = this.el,\n        options = this.options,\n        preventOnFilter = options.preventOnFilter,\n        type = evt.type,\n        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,\n        target = (touch || evt).target,\n        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,\n        filter = options.filter;\n\n    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\n\n    if (dragEl) {\n      return;\n    }\n\n    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n      return; // only left button and enabled\n    } // cancel dnd if original target is content editable\n\n\n    if (originalTarget.isContentEditable) {\n      return;\n    } // Safari ignores further event handling after mousedown\n\n\n    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {\n      return;\n    }\n\n    target = closest(target, options.draggable, el, false);\n\n    if (target && target.animated) {\n      return;\n    }\n\n    if (lastDownEl === target) {\n      // Ignoring duplicate `down`\n      return;\n    } // Get the index of the dragged element within its parent\n\n\n    oldIndex = index(target);\n    oldDraggableIndex = index(target, options.draggable); // Check filter\n\n    if (typeof filter === 'function') {\n      if (filter.call(this, evt, target, this)) {\n        _dispatchEvent({\n          sortable: _this,\n          rootEl: originalTarget,\n          name: 'filter',\n          targetEl: target,\n          toEl: el,\n          fromEl: el\n        });\n\n        pluginEvent('filter', _this, {\n          evt: evt\n        });\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    } else if (filter) {\n      filter = filter.split(',').some(function (criteria) {\n        criteria = closest(originalTarget, criteria.trim(), el, false);\n\n        if (criteria) {\n          _dispatchEvent({\n            sortable: _this,\n            rootEl: criteria,\n            name: 'filter',\n            targetEl: target,\n            fromEl: el,\n            toEl: el\n          });\n\n          pluginEvent('filter', _this, {\n            evt: evt\n          });\n          return true;\n        }\n      });\n\n      if (filter) {\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    }\n\n    if (options.handle && !closest(originalTarget, options.handle, el, false)) {\n      return;\n    } // Prepare `dragstart`\n\n\n    this._prepareDragStart(evt, touch, target);\n  },\n  _prepareDragStart: function _prepareDragStart(\n  /** Event */\n  evt,\n  /** Touch */\n  touch,\n  /** HTMLElement */\n  target) {\n    var _this = this,\n        el = _this.el,\n        options = _this.options,\n        ownerDocument = el.ownerDocument,\n        dragStartFn;\n\n    if (target && !dragEl && target.parentNode === el) {\n      var dragRect = getRect(target);\n      rootEl = el;\n      dragEl = target;\n      parentEl = dragEl.parentNode;\n      nextEl = dragEl.nextSibling;\n      lastDownEl = target;\n      activeGroup = options.group;\n      Sortable.dragged = dragEl;\n      tapEvt = {\n        target: dragEl,\n        clientX: (touch || evt).clientX,\n        clientY: (touch || evt).clientY\n      };\n      tapDistanceLeft = tapEvt.clientX - dragRect.left;\n      tapDistanceTop = tapEvt.clientY - dragRect.top;\n      this._lastX = (touch || evt).clientX;\n      this._lastY = (touch || evt).clientY;\n      dragEl.style['will-change'] = 'all';\n\n      dragStartFn = function dragStartFn() {\n        pluginEvent('delayEnded', _this, {\n          evt: evt\n        });\n\n        if (Sortable.eventCanceled) {\n          _this._onDrop();\n\n          return;\n        } // Delayed drag has been triggered\n        // we can re-enable the events: touchmove/mousemove\n\n\n        _this._disableDelayedDragEvents();\n\n        if (!FireFox && _this.nativeDraggable) {\n          dragEl.draggable = true;\n        } // Bind the events: dragstart/dragend\n\n\n        _this._triggerDragStart(evt, touch); // Drag start event\n\n\n        _dispatchEvent({\n          sortable: _this,\n          name: 'choose',\n          originalEvent: evt\n        }); // Chosen item\n\n\n        toggleClass(dragEl, options.chosenClass, true);\n      }; // Disable \"draggable\"\n\n\n      options.ignore.split(',').forEach(function (criteria) {\n        find(dragEl, criteria.trim(), _disableDraggable);\n      });\n      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'mouseup', _this._onDrop);\n      on(ownerDocument, 'touchend', _this._onDrop);\n      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)\n\n      if (FireFox && this.nativeDraggable) {\n        this.options.touchStartThreshold = 4;\n        dragEl.draggable = true;\n      }\n\n      pluginEvent('delayStart', this, {\n        evt: evt\n      }); // Delay is impossible for native DnD in Edge or IE\n\n      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\n        if (Sortable.eventCanceled) {\n          this._onDrop();\n\n          return;\n        } // If the user moves the pointer or let go the click or touch\n        // before the delay has been reached:\n        // disable the delayed drag\n\n\n        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n        on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\n        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\n        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\n        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n      } else {\n        dragStartFn();\n      }\n    }\n  },\n  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(\n  /** TouchEvent|PointerEvent **/\n  e) {\n    var touch = e.touches ? e.touches[0] : e;\n\n    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {\n      this._disableDelayedDrag();\n    }\n  },\n  _disableDelayedDrag: function _disableDelayedDrag() {\n    dragEl && _disableDraggable(dragEl);\n    clearTimeout(this._dragStartTimer);\n\n    this._disableDelayedDragEvents();\n  },\n  _disableDelayedDragEvents: function _disableDelayedDragEvents() {\n    var ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n    off(ownerDocument, 'touchend', this._disableDelayedDrag);\n    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\n    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);\n    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);\n  },\n  _triggerDragStart: function _triggerDragStart(\n  /** Event */\n  evt,\n  /** Touch */\n  touch) {\n    touch = touch || evt.pointerType == 'touch' && evt;\n\n    if (!this.nativeDraggable || touch) {\n      if (this.options.supportPointer) {\n        on(document, 'pointermove', this._onTouchMove);\n      } else if (touch) {\n        on(document, 'touchmove', this._onTouchMove);\n      } else {\n        on(document, 'mousemove', this._onTouchMove);\n      }\n    } else {\n      on(dragEl, 'dragend', this);\n      on(rootEl, 'dragstart', this._onDragStart);\n    }\n\n    try {\n      if (document.selection) {\n        // Timeout neccessary for IE9\n        _nextTick(function () {\n          document.selection.empty();\n        });\n      } else {\n        window.getSelection().removeAllRanges();\n      }\n    } catch (err) {}\n  },\n  _dragStarted: function _dragStarted(fallback, evt) {\n\n    awaitingDragStarted = false;\n\n    if (rootEl && dragEl) {\n      pluginEvent('dragStarted', this, {\n        evt: evt\n      });\n\n      if (this.nativeDraggable) {\n        on(document, 'dragover', _checkOutsideTargetEl);\n      }\n\n      var options = this.options; // Apply effect\n\n      !fallback && toggleClass(dragEl, options.dragClass, false);\n      toggleClass(dragEl, options.ghostClass, true);\n      Sortable.active = this;\n      fallback && this._appendGhost(); // Drag start event\n\n      _dispatchEvent({\n        sortable: this,\n        name: 'start',\n        originalEvent: evt\n      });\n    } else {\n      this._nulling();\n    }\n  },\n  _emulateDragOver: function _emulateDragOver() {\n    if (touchEvt) {\n      this._lastX = touchEvt.clientX;\n      this._lastY = touchEvt.clientY;\n\n      _hideGhostForTarget();\n\n      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n      var parent = target;\n\n      while (target && target.shadowRoot) {\n        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n        if (target === parent) break;\n        parent = target;\n      }\n\n      dragEl.parentNode[expando]._isOutsideThisEl(target);\n\n      if (parent) {\n        do {\n          if (parent[expando]) {\n            var inserted = void 0;\n            inserted = parent[expando]._onDragOver({\n              clientX: touchEvt.clientX,\n              clientY: touchEvt.clientY,\n              target: target,\n              rootEl: parent\n            });\n\n            if (inserted && !this.options.dragoverBubble) {\n              break;\n            }\n          }\n\n          target = parent; // store last element\n        }\n        /* jshint boss:true */\n        while (parent = parent.parentNode);\n      }\n\n      _unhideGhostForTarget();\n    }\n  },\n  _onTouchMove: function _onTouchMove(\n  /**TouchEvent*/\n  evt) {\n    if (tapEvt) {\n      var options = this.options,\n          fallbackTolerance = options.fallbackTolerance,\n          fallbackOffset = options.fallbackOffset,\n          touch = evt.touches ? evt.touches[0] : evt,\n          ghostMatrix = ghostEl && matrix(ghostEl, true),\n          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,\n          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,\n          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),\n          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),\n          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging\n\n      if (!Sortable.active && !awaitingDragStarted) {\n        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {\n          return;\n        }\n\n        this._onDragStart(evt, true);\n      }\n\n      if (ghostEl) {\n        if (ghostMatrix) {\n          ghostMatrix.e += dx - (lastDx || 0);\n          ghostMatrix.f += dy - (lastDy || 0);\n        } else {\n          ghostMatrix = {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            e: dx,\n            f: dy\n          };\n        }\n\n        var cssMatrix = \"matrix(\".concat(ghostMatrix.a, \",\").concat(ghostMatrix.b, \",\").concat(ghostMatrix.c, \",\").concat(ghostMatrix.d, \",\").concat(ghostMatrix.e, \",\").concat(ghostMatrix.f, \")\");\n        css(ghostEl, 'webkitTransform', cssMatrix);\n        css(ghostEl, 'mozTransform', cssMatrix);\n        css(ghostEl, 'msTransform', cssMatrix);\n        css(ghostEl, 'transform', cssMatrix);\n        lastDx = dx;\n        lastDy = dy;\n        touchEvt = touch;\n      }\n\n      evt.cancelable && evt.preventDefault();\n    }\n  },\n  _appendGhost: function _appendGhost() {\n    // Bug if using scale(): https://stackoverflow.com/questions/2637058\n    // Not being adjusted for\n    if (!ghostEl) {\n      var container = this.options.fallbackOnBody ? document.body : rootEl,\n          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),\n          options = this.options; // Position absolutely\n\n      if (PositionGhostAbsolutely) {\n        // Get relatively positioned parent\n        ghostRelativeParent = container;\n\n        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {\n          ghostRelativeParent = ghostRelativeParent.parentNode;\n        }\n\n        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();\n          rect.top += ghostRelativeParent.scrollTop;\n          rect.left += ghostRelativeParent.scrollLeft;\n        } else {\n          ghostRelativeParent = getWindowScrollingElement();\n        }\n\n        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);\n      }\n\n      ghostEl = dragEl.cloneNode(true);\n      toggleClass(ghostEl, options.ghostClass, false);\n      toggleClass(ghostEl, options.fallbackClass, true);\n      toggleClass(ghostEl, options.dragClass, true);\n      css(ghostEl, 'transition', '');\n      css(ghostEl, 'transform', '');\n      css(ghostEl, 'box-sizing', 'border-box');\n      css(ghostEl, 'margin', 0);\n      css(ghostEl, 'top', rect.top);\n      css(ghostEl, 'left', rect.left);\n      css(ghostEl, 'width', rect.width);\n      css(ghostEl, 'height', rect.height);\n      css(ghostEl, 'opacity', '0.8');\n      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');\n      css(ghostEl, 'zIndex', '100000');\n      css(ghostEl, 'pointerEvents', 'none');\n      Sortable.ghost = ghostEl;\n      container.appendChild(ghostEl); // Set transform-origin\n\n      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');\n    }\n  },\n  _onDragStart: function _onDragStart(\n  /**Event*/\n  evt,\n  /**boolean*/\n  fallback) {\n    var _this = this;\n\n    var dataTransfer = evt.dataTransfer;\n    var options = _this.options;\n    pluginEvent('dragStart', this, {\n      evt: evt\n    });\n\n    if (Sortable.eventCanceled) {\n      this._onDrop();\n\n      return;\n    }\n\n    pluginEvent('setupClone', this);\n\n    if (!Sortable.eventCanceled) {\n      cloneEl = clone(dragEl);\n      cloneEl.draggable = false;\n      cloneEl.style['will-change'] = '';\n\n      this._hideClone();\n\n      toggleClass(cloneEl, this.options.chosenClass, false);\n      Sortable.clone = cloneEl;\n    } // #1143: IFrame support workaround\n\n\n    _this.cloneId = _nextTick(function () {\n      pluginEvent('clone', _this);\n      if (Sortable.eventCanceled) return;\n\n      if (!_this.options.removeCloneOnHide) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      }\n\n      _this._hideClone();\n\n      _dispatchEvent({\n        sortable: _this,\n        name: 'clone'\n      });\n    });\n    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events\n\n    if (fallback) {\n      ignoreNextClick = true;\n      _this._loopId = setInterval(_this._emulateDragOver, 50);\n    } else {\n      // Undo what was set in _prepareDragStart before drag started\n      off(document, 'mouseup', _this._onDrop);\n      off(document, 'touchend', _this._onDrop);\n      off(document, 'touchcancel', _this._onDrop);\n\n      if (dataTransfer) {\n        dataTransfer.effectAllowed = 'move';\n        options.setData && options.setData.call(_this, dataTransfer, dragEl);\n      }\n\n      on(document, 'drop', _this); // #1276 fix:\n\n      css(dragEl, 'transform', 'translateZ(0)');\n    }\n\n    awaitingDragStarted = true;\n    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));\n    on(document, 'selectstart', _this);\n    moved = true;\n\n    if (Safari) {\n      css(document.body, 'user-select', 'none');\n    }\n  },\n  // Returns true - if no further action is needed (either inserted or another condition)\n  _onDragOver: function _onDragOver(\n  /**Event*/\n  evt) {\n    var el = this.el,\n        target = evt.target,\n        dragRect,\n        targetRect,\n        revert,\n        options = this.options,\n        group = options.group,\n        activeSortable = Sortable.active,\n        isOwner = activeGroup === group,\n        canSort = options.sort,\n        fromSortable = putSortable || activeSortable,\n        vertical,\n        _this = this,\n        completedFired = false;\n\n    if (_silent) return;\n\n    function dragOverEvent(name, extra) {\n      pluginEvent(name, _this, _objectSpread2({\n        evt: evt,\n        isOwner: isOwner,\n        axis: vertical ? 'vertical' : 'horizontal',\n        revert: revert,\n        dragRect: dragRect,\n        targetRect: targetRect,\n        canSort: canSort,\n        fromSortable: fromSortable,\n        target: target,\n        completed: completed,\n        onMove: function onMove(target, after) {\n          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);\n        },\n        changed: changed\n      }, extra));\n    } // Capture animation state\n\n\n    function capture() {\n      dragOverEvent('dragOverAnimationCapture');\n\n      _this.captureAnimationState();\n\n      if (_this !== fromSortable) {\n        fromSortable.captureAnimationState();\n      }\n    } // Return invocation when dragEl is inserted (or completed)\n\n\n    function completed(insertion) {\n      dragOverEvent('dragOverCompleted', {\n        insertion: insertion\n      });\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        } else {\n          activeSortable._showClone(_this);\n        }\n\n        if (_this !== fromSortable) {\n          // Set ghost class to new sortable's ghost class\n          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\n          toggleClass(dragEl, options.ghostClass, true);\n        }\n\n        if (putSortable !== _this && _this !== Sortable.active) {\n          putSortable = _this;\n        } else if (_this === Sortable.active && putSortable) {\n          putSortable = null;\n        } // Animation\n\n\n        if (fromSortable === _this) {\n          _this._ignoreWhileAnimating = target;\n        }\n\n        _this.animateAll(function () {\n          dragOverEvent('dragOverAnimationComplete');\n          _this._ignoreWhileAnimating = null;\n        });\n\n        if (_this !== fromSortable) {\n          fromSortable.animateAll();\n          fromSortable._ignoreWhileAnimating = null;\n        }\n      } // Null lastTarget if it is not inside a previously swapped element\n\n\n      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {\n        lastTarget = null;\n      } // no bubbling and not fallback\n\n\n      if (!options.dragoverBubble && !evt.rootEl && target !== document) {\n        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted\n\n\n        !insertion && nearestEmptyInsertDetectEvent(evt);\n      }\n\n      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n      return completedFired = true;\n    } // Call when dragEl has been inserted\n\n\n    function changed() {\n      newIndex = index(dragEl);\n      newDraggableIndex = index(dragEl, options.draggable);\n\n      _dispatchEvent({\n        sortable: _this,\n        name: 'change',\n        toEl: el,\n        newIndex: newIndex,\n        newDraggableIndex: newDraggableIndex,\n        originalEvent: evt\n      });\n    }\n\n    if (evt.preventDefault !== void 0) {\n      evt.cancelable && evt.preventDefault();\n    }\n\n    target = closest(target, options.draggable, el, true);\n    dragOverEvent('dragOver');\n    if (Sortable.eventCanceled) return completedFired;\n\n    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {\n      return completed(false);\n    }\n\n    ignoreNextClick = false;\n\n    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list\n    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {\n      vertical = this._getDirection(evt, target) === 'vertical';\n      dragRect = getRect(dragEl);\n      dragOverEvent('dragOverValid');\n      if (Sortable.eventCanceled) return completedFired;\n\n      if (revert) {\n        parentEl = rootEl; // actualization\n\n        capture();\n\n        this._hideClone();\n\n        dragOverEvent('revert');\n\n        if (!Sortable.eventCanceled) {\n          if (nextEl) {\n            rootEl.insertBefore(dragEl, nextEl);\n          } else {\n            rootEl.appendChild(dragEl);\n          }\n        }\n\n        return completed(true);\n      }\n\n      var elLastChild = lastChild(el, options.draggable);\n\n      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {\n        // Insert to end of list\n        // If already at end of list: Do not insert\n        if (elLastChild === dragEl) {\n          return completed(false);\n        } // if there is a last element, it is the target\n\n\n        if (elLastChild && el === evt.target) {\n          target = elLastChild;\n        }\n\n        if (target) {\n          targetRect = getRect(target);\n        }\n\n        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\n          capture();\n          el.appendChild(dragEl);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {\n        // Insert to start of list\n        var firstChild = getChild(el, 0, options, true);\n\n        if (firstChild === dragEl) {\n          return completed(false);\n        }\n\n        target = firstChild;\n        targetRect = getRect(target);\n\n        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {\n          capture();\n          el.insertBefore(dragEl, firstChild);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (target.parentNode === el) {\n        targetRect = getRect(target);\n        var direction = 0,\n            targetBeforeFirstSwap,\n            differentLevel = dragEl.parentNode !== el,\n            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),\n            side1 = vertical ? 'top' : 'left',\n            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),\n            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n        if (lastTarget !== target) {\n          targetBeforeFirstSwap = targetRect[side1];\n          pastFirstInvertThresh = false;\n          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;\n        }\n\n        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);\n        var sibling;\n\n        if (direction !== 0) {\n          // Check if target is beside dragEl in respective direction (ignoring hidden elements)\n          var dragIndex = index(dragEl);\n\n          do {\n            dragIndex -= direction;\n            sibling = parentEl.children[dragIndex];\n          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));\n        } // If dragEl is already beside target: Do not insert\n\n\n        if (direction === 0 || sibling === target) {\n          return completed(false);\n        }\n\n        lastTarget = target;\n        lastDirection = direction;\n        var nextSibling = target.nextElementSibling,\n            after = false;\n        after = direction === 1;\n\n        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n        if (moveVector !== false) {\n          if (moveVector === 1 || moveVector === -1) {\n            after = moveVector === 1;\n          }\n\n          _silent = true;\n          setTimeout(_unsilent, 30);\n          capture();\n\n          if (after && !nextSibling) {\n            el.appendChild(dragEl);\n          } else {\n            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n          } // Undo chrome's scroll adjustment (has no effect on other browsers)\n\n\n          if (scrolledPastTop) {\n            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\n          }\n\n          parentEl = dragEl.parentNode; // actualization\n          // must be done before animation\n\n          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);\n          }\n\n          changed();\n          return completed(true);\n        }\n      }\n\n      if (el.contains(dragEl)) {\n        return completed(false);\n      }\n    }\n\n    return false;\n  },\n  _ignoreWhileAnimating: null,\n  _offMoveEvents: function _offMoveEvents() {\n    off(document, 'mousemove', this._onTouchMove);\n    off(document, 'touchmove', this._onTouchMove);\n    off(document, 'pointermove', this._onTouchMove);\n    off(document, 'dragover', nearestEmptyInsertDetectEvent);\n    off(document, 'mousemove', nearestEmptyInsertDetectEvent);\n    off(document, 'touchmove', nearestEmptyInsertDetectEvent);\n  },\n  _offUpEvents: function _offUpEvents() {\n    var ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, 'mouseup', this._onDrop);\n    off(ownerDocument, 'touchend', this._onDrop);\n    off(ownerDocument, 'pointerup', this._onDrop);\n    off(ownerDocument, 'touchcancel', this._onDrop);\n    off(document, 'selectstart', this);\n  },\n  _onDrop: function _onDrop(\n  /**Event*/\n  evt) {\n    var el = this.el,\n        options = this.options; // Get the index of the dragged element within its parent\n\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n    pluginEvent('drop', this, {\n      evt: evt\n    });\n    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event\n\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n\n    if (Sortable.eventCanceled) {\n      this._nulling();\n\n      return;\n    }\n\n    awaitingDragStarted = false;\n    isCircumstantialInvert = false;\n    pastFirstInvertThresh = false;\n    clearInterval(this._loopId);\n    clearTimeout(this._dragStartTimer);\n\n    _cancelNextTick(this.cloneId);\n\n    _cancelNextTick(this._dragStartId); // Unbind events\n\n\n    if (this.nativeDraggable) {\n      off(document, 'drop', this);\n      off(el, 'dragstart', this._onDragStart);\n    }\n\n    this._offMoveEvents();\n\n    this._offUpEvents();\n\n    if (Safari) {\n      css(document.body, 'user-select', '');\n    }\n\n    css(dragEl, 'transform', '');\n\n    if (evt) {\n      if (moved) {\n        evt.cancelable && evt.preventDefault();\n        !options.dropBubble && evt.stopPropagation();\n      }\n\n      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n        // Remove clone(s)\n        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      if (dragEl) {\n        if (this.nativeDraggable) {\n          off(dragEl, 'dragend', this);\n        }\n\n        _disableDraggable(dragEl);\n\n        dragEl.style['will-change'] = ''; // Remove classes\n        // ghostClass is added in dragStarted\n\n        if (moved && !awaitingDragStarted) {\n          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\n        }\n\n        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event\n\n        _dispatchEvent({\n          sortable: this,\n          name: 'unchoose',\n          toEl: parentEl,\n          newIndex: null,\n          newDraggableIndex: null,\n          originalEvent: evt\n        });\n\n        if (rootEl !== parentEl) {\n          if (newIndex >= 0) {\n            // Add event\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: 'add',\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt\n            }); // Remove event\n\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'remove',\n              toEl: parentEl,\n              originalEvent: evt\n            }); // drag from one list and drop into another\n\n\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: 'sort',\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt\n            });\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'sort',\n              toEl: parentEl,\n              originalEvent: evt\n            });\n          }\n\n          putSortable && putSortable.save();\n        } else {\n          if (newIndex !== oldIndex) {\n            if (newIndex >= 0) {\n              // drag & drop within the same list\n              _dispatchEvent({\n                sortable: this,\n                name: 'update',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n\n              _dispatchEvent({\n                sortable: this,\n                name: 'sort',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n            }\n          }\n        }\n\n        if (Sortable.active) {\n          /* jshint eqnull:true */\n          if (newIndex == null || newIndex === -1) {\n            newIndex = oldIndex;\n            newDraggableIndex = oldDraggableIndex;\n          }\n\n          _dispatchEvent({\n            sortable: this,\n            name: 'end',\n            toEl: parentEl,\n            originalEvent: evt\n          }); // Save sorting\n\n\n          this.save();\n        }\n      }\n    }\n\n    this._nulling();\n  },\n  _nulling: function _nulling() {\n    pluginEvent('nulling', this);\n    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;\n    savedInputChecked.forEach(function (el) {\n      el.checked = true;\n    });\n    savedInputChecked.length = lastDx = lastDy = 0;\n  },\n  handleEvent: function handleEvent(\n  /**Event*/\n  evt) {\n    switch (evt.type) {\n      case 'drop':\n      case 'dragend':\n        this._onDrop(evt);\n\n        break;\n\n      case 'dragenter':\n      case 'dragover':\n        if (dragEl) {\n          this._onDragOver(evt);\n\n          _globalDragOver(evt);\n        }\n\n        break;\n\n      case 'selectstart':\n        evt.preventDefault();\n        break;\n    }\n  },\n\n  /**\n   * Serializes the item into an array of string.\n   * @returns {String[]}\n   */\n  toArray: function toArray() {\n    var order = [],\n        el,\n        children = this.el.children,\n        i = 0,\n        n = children.length,\n        options = this.options;\n\n    for (; i < n; i++) {\n      el = children[i];\n\n      if (closest(el, options.draggable, this.el, false)) {\n        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n      }\n    }\n\n    return order;\n  },\n\n  /**\n   * Sorts the elements according to the array.\n   * @param  {String[]}  order  order of the items\n   */\n  sort: function sort(order, useAnimation) {\n    var items = {},\n        rootEl = this.el;\n    this.toArray().forEach(function (id, i) {\n      var el = rootEl.children[i];\n\n      if (closest(el, this.options.draggable, rootEl, false)) {\n        items[id] = el;\n      }\n    }, this);\n    useAnimation && this.captureAnimationState();\n    order.forEach(function (id) {\n      if (items[id]) {\n        rootEl.removeChild(items[id]);\n        rootEl.appendChild(items[id]);\n      }\n    });\n    useAnimation && this.animateAll();\n  },\n\n  /**\n   * Save the current sorting\n   */\n  save: function save() {\n    var store = this.options.store;\n    store && store.set && store.set(this);\n  },\n\n  /**\n   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n   * @param   {HTMLElement}  el\n   * @param   {String}       [selector]  default: `options.draggable`\n   * @returns {HTMLElement|null}\n   */\n  closest: function closest$1(el, selector) {\n    return closest(el, selector || this.options.draggable, this.el, false);\n  },\n\n  /**\n   * Set/get option\n   * @param   {string} name\n   * @param   {*}      [value]\n   * @returns {*}\n   */\n  option: function option(name, value) {\n    var options = this.options;\n\n    if (value === void 0) {\n      return options[name];\n    } else {\n      var modifiedValue = PluginManager.modifyOption(this, name, value);\n\n      if (typeof modifiedValue !== 'undefined') {\n        options[name] = modifiedValue;\n      } else {\n        options[name] = value;\n      }\n\n      if (name === 'group') {\n        _prepareGroup(options);\n      }\n    }\n  },\n\n  /**\n   * Destroy\n   */\n  destroy: function destroy() {\n    pluginEvent('destroy', this);\n    var el = this.el;\n    el[expando] = null;\n    off(el, 'mousedown', this._onTapStart);\n    off(el, 'touchstart', this._onTapStart);\n    off(el, 'pointerdown', this._onTapStart);\n\n    if (this.nativeDraggable) {\n      off(el, 'dragover', this);\n      off(el, 'dragenter', this);\n    } // Remove draggable attributes\n\n\n    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n      el.removeAttribute('draggable');\n    });\n\n    this._onDrop();\n\n    this._disableDelayedDragEvents();\n\n    sortables.splice(sortables.indexOf(this.el), 1);\n    this.el = el = null;\n  },\n  _hideClone: function _hideClone() {\n    if (!cloneHidden) {\n      pluginEvent('hideClone', this);\n      if (Sortable.eventCanceled) return;\n      css(cloneEl, 'display', 'none');\n\n      if (this.options.removeCloneOnHide && cloneEl.parentNode) {\n        cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      cloneHidden = true;\n    }\n  },\n  _showClone: function _showClone(putSortable) {\n    if (putSortable.lastPutMode !== 'clone') {\n      this._hideClone();\n\n      return;\n    }\n\n    if (cloneHidden) {\n      pluginEvent('showClone', this);\n      if (Sortable.eventCanceled) return; // show clone at dragEl or original position\n\n      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      } else if (nextEl) {\n        rootEl.insertBefore(cloneEl, nextEl);\n      } else {\n        rootEl.appendChild(cloneEl);\n      }\n\n      if (this.options.group.revertClone) {\n        this.animate(dragEl, cloneEl);\n      }\n\n      css(cloneEl, 'display', '');\n      cloneHidden = false;\n    }\n  }\n};\n\nfunction _globalDragOver(\n/**Event*/\nevt) {\n  if (evt.dataTransfer) {\n    evt.dataTransfer.dropEffect = 'move';\n  }\n\n  evt.cancelable && evt.preventDefault();\n}\n\nfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {\n  var evt,\n      sortable = fromEl[expando],\n      onMoveFn = sortable.options.onMove,\n      retVal; // Support for new CustomEvent feature\n\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent('move', {\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    evt = document.createEvent('Event');\n    evt.initEvent('move', true, true);\n  }\n\n  evt.to = toEl;\n  evt.from = fromEl;\n  evt.dragged = dragEl;\n  evt.draggedRect = dragRect;\n  evt.related = targetEl || toEl;\n  evt.relatedRect = targetRect || getRect(toEl);\n  evt.willInsertAfter = willInsertAfter;\n  evt.originalEvent = originalEvent;\n  fromEl.dispatchEvent(evt);\n\n  if (onMoveFn) {\n    retVal = onMoveFn.call(sortable, evt, originalEvent);\n  }\n\n  return retVal;\n}\n\nfunction _disableDraggable(el) {\n  el.draggable = false;\n}\n\nfunction _unsilent() {\n  _silent = false;\n}\n\nfunction _ghostIsFirst(evt, vertical, sortable) {\n  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));\n  var spacer = 10;\n  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;\n}\n\nfunction _ghostIsLast(evt, vertical, sortable) {\n  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));\n  var spacer = 10;\n  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;\n}\n\nfunction _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\n  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,\n      targetLength = vertical ? targetRect.height : targetRect.width,\n      targetS1 = vertical ? targetRect.top : targetRect.left,\n      targetS2 = vertical ? targetRect.bottom : targetRect.right,\n      invert = false;\n\n  if (!invertSwap) {\n    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {\n      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n      // check if past first invert threshold on side opposite of lastDirection\n      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {\n        // past first invert threshold, do not restrict inverted threshold to dragEl shadow\n        pastFirstInvertThresh = true;\n      }\n\n      if (!pastFirstInvertThresh) {\n        // dragEl shadow (target move distance shadow)\n        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n        : mouseOnAxis > targetS2 - targetMoveDistance) {\n          return -lastDirection;\n        }\n      } else {\n        invert = true;\n      }\n    } else {\n      // Regular\n      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {\n        return _getInsertDirection(target);\n      }\n    }\n  }\n\n  invert = invert || invertSwap;\n\n  if (invert) {\n    // Invert of regular\n    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {\n      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;\n    }\n  }\n\n  return 0;\n}\n/**\n * Gets the direction dragEl must be swapped relative to target in order to make it\n * seem that dragEl has been \"inserted\" into that element's position\n * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n * @return {Number}                   Direction dragEl must be swapped\n */\n\n\nfunction _getInsertDirection(target) {\n  if (index(dragEl) < index(target)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n/**\n * Generate id\n * @param   {HTMLElement} el\n * @returns {String}\n * @private\n */\n\n\nfunction _generateId(el) {\n  var str = el.tagName + el.className + el.src + el.href + el.textContent,\n      i = str.length,\n      sum = 0;\n\n  while (i--) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum.toString(36);\n}\n\nfunction _saveInputCheckedState(root) {\n  savedInputChecked.length = 0;\n  var inputs = root.getElementsByTagName('input');\n  var idx = inputs.length;\n\n  while (idx--) {\n    var el = inputs[idx];\n    el.checked && savedInputChecked.push(el);\n  }\n}\n\nfunction _nextTick(fn) {\n  return setTimeout(fn, 0);\n}\n\nfunction _cancelNextTick(id) {\n  return clearTimeout(id);\n} // Fixed #973:\n\n\nif (documentExists) {\n  on(document, 'touchmove', function (evt) {\n    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n      evt.preventDefault();\n    }\n  });\n} // Export utils\n\n\nSortable.utils = {\n  on: on,\n  off: off,\n  css: css,\n  find: find,\n  is: function is(el, selector) {\n    return !!closest(el, selector, el, false);\n  },\n  extend: extend,\n  throttle: throttle,\n  closest: closest,\n  toggleClass: toggleClass,\n  clone: clone,\n  index: index,\n  nextTick: _nextTick,\n  cancelNextTick: _cancelNextTick,\n  detectDirection: _detectDirection,\n  getChild: getChild\n};\n/**\n * Get the Sortable instance of an element\n * @param  {HTMLElement} element The element\n * @return {Sortable|undefined}         The instance of Sortable\n */\n\nSortable.get = function (element) {\n  return element[expando];\n};\n/**\n * Mount a plugin to Sortable\n * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted\n */\n\n\nSortable.mount = function () {\n  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {\n    plugins[_key] = arguments[_key];\n  }\n\n  if (plugins[0].constructor === Array) plugins = plugins[0];\n  plugins.forEach(function (plugin) {\n    if (!plugin.prototype || !plugin.prototype.constructor) {\n      throw \"Sortable: Mounted plugin must be a constructor function, not \".concat({}.toString.call(plugin));\n    }\n\n    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);\n    PluginManager.mount(plugin);\n  });\n};\n/**\n * Create sortable instance\n * @param {HTMLElement}  el\n * @param {Object}      [options]\n */\n\n\nSortable.create = function (el, options) {\n  return new Sortable(el, options);\n}; // Export\n\n\nSortable.version = version;\n\nvar autoScrolls = [],\n    scrollEl,\n    scrollRootEl,\n    scrolling = false,\n    lastAutoScrollX,\n    lastAutoScrollY,\n    touchEvt$1,\n    pointerElemChangedInterval;\n\nfunction AutoScrollPlugin() {\n  function AutoScroll() {\n    this.defaults = {\n      scroll: true,\n      forceAutoScrollFallback: false,\n      scrollSensitivity: 30,\n      scrollSpeed: 10,\n      bubbleScroll: true\n    }; // Bind all private methods\n\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n  }\n\n  AutoScroll.prototype = {\n    dragStarted: function dragStarted(_ref) {\n      var originalEvent = _ref.originalEvent;\n\n      if (this.sortable.nativeDraggable) {\n        on(document, 'dragover', this._handleAutoScroll);\n      } else {\n        if (this.options.supportPointer) {\n          on(document, 'pointermove', this._handleFallbackAutoScroll);\n        } else if (originalEvent.touches) {\n          on(document, 'touchmove', this._handleFallbackAutoScroll);\n        } else {\n          on(document, 'mousemove', this._handleFallbackAutoScroll);\n        }\n      }\n    },\n    dragOverCompleted: function dragOverCompleted(_ref2) {\n      var originalEvent = _ref2.originalEvent;\n\n      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)\n      if (!this.options.dragOverBubble && !originalEvent.rootEl) {\n        this._handleAutoScroll(originalEvent);\n      }\n    },\n    drop: function drop() {\n      if (this.sortable.nativeDraggable) {\n        off(document, 'dragover', this._handleAutoScroll);\n      } else {\n        off(document, 'pointermove', this._handleFallbackAutoScroll);\n        off(document, 'touchmove', this._handleFallbackAutoScroll);\n        off(document, 'mousemove', this._handleFallbackAutoScroll);\n      }\n\n      clearPointerElemChangedInterval();\n      clearAutoScrolls();\n      cancelThrottle();\n    },\n    nulling: function nulling() {\n      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;\n      autoScrolls.length = 0;\n    },\n    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {\n      this._handleAutoScroll(evt, true);\n    },\n    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {\n      var _this = this;\n\n      var x = (evt.touches ? evt.touches[0] : evt).clientX,\n          y = (evt.touches ? evt.touches[0] : evt).clientY,\n          elem = document.elementFromPoint(x, y);\n      touchEvt$1 = evt; // IE does not seem to have native autoscroll,\n      // Edge's autoscroll seems too conditional,\n      // MACOS Safari does not have autoscroll,\n      // Firefox and Chrome are good\n\n      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {\n        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change\n\n        var ogElemScroller = getParentAutoScrollElement(elem, true);\n\n        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {\n          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour\n\n          pointerElemChangedInterval = setInterval(function () {\n            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);\n\n            if (newElem !== ogElemScroller) {\n              ogElemScroller = newElem;\n              clearAutoScrolls();\n            }\n\n            autoScroll(evt, _this.options, newElem, fallback);\n          }, 10);\n          lastAutoScrollX = x;\n          lastAutoScrollY = y;\n        }\n      } else {\n        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {\n          clearAutoScrolls();\n          return;\n        }\n\n        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);\n      }\n    }\n  };\n  return _extends(AutoScroll, {\n    pluginName: 'scroll',\n    initializeByDefault: true\n  });\n}\n\nfunction clearAutoScrolls() {\n  autoScrolls.forEach(function (autoScroll) {\n    clearInterval(autoScroll.pid);\n  });\n  autoScrolls = [];\n}\n\nfunction clearPointerElemChangedInterval() {\n  clearInterval(pointerElemChangedInterval);\n}\n\nvar autoScroll = throttle(function (evt, options, rootEl, isFallback) {\n  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n  if (!options.scroll) return;\n  var x = (evt.touches ? evt.touches[0] : evt).clientX,\n      y = (evt.touches ? evt.touches[0] : evt).clientY,\n      sens = options.scrollSensitivity,\n      speed = options.scrollSpeed,\n      winScroller = getWindowScrollingElement();\n  var scrollThisInstance = false,\n      scrollCustomFn; // New scroll root, set scrollEl\n\n  if (scrollRootEl !== rootEl) {\n    scrollRootEl = rootEl;\n    clearAutoScrolls();\n    scrollEl = options.scroll;\n    scrollCustomFn = options.scrollFn;\n\n    if (scrollEl === true) {\n      scrollEl = getParentAutoScrollElement(rootEl, true);\n    }\n  }\n\n  var layersOut = 0;\n  var currentParent = scrollEl;\n\n  do {\n    var el = currentParent,\n        rect = getRect(el),\n        top = rect.top,\n        bottom = rect.bottom,\n        left = rect.left,\n        right = rect.right,\n        width = rect.width,\n        height = rect.height,\n        canScrollX = void 0,\n        canScrollY = void 0,\n        scrollWidth = el.scrollWidth,\n        scrollHeight = el.scrollHeight,\n        elCSS = css(el),\n        scrollPosX = el.scrollLeft,\n        scrollPosY = el.scrollTop;\n\n    if (el === winScroller) {\n      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');\n      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');\n    } else {\n      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');\n      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');\n    }\n\n    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);\n    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);\n\n    if (!autoScrolls[layersOut]) {\n      for (var i = 0; i <= layersOut; i++) {\n        if (!autoScrolls[i]) {\n          autoScrolls[i] = {};\n        }\n      }\n    }\n\n    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n      autoScrolls[layersOut].el = el;\n      autoScrolls[layersOut].vx = vx;\n      autoScrolls[layersOut].vy = vy;\n      clearInterval(autoScrolls[layersOut].pid);\n\n      if (vx != 0 || vy != 0) {\n        scrollThisInstance = true;\n        /* jshint loopfunc:true */\n\n        autoScrolls[layersOut].pid = setInterval(function () {\n          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n          if (isFallback && this.layer === 0) {\n            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely\n\n          }\n\n          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n          if (typeof scrollCustomFn === 'function') {\n            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {\n              return;\n            }\n          }\n\n          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n        }.bind({\n          layer: layersOut\n        }), 24);\n      }\n    }\n\n    layersOut++;\n  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));\n\n  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n}, 30);\n\nvar drop = function drop(_ref) {\n  var originalEvent = _ref.originalEvent,\n      putSortable = _ref.putSortable,\n      dragEl = _ref.dragEl,\n      activeSortable = _ref.activeSortable,\n      dispatchSortableEvent = _ref.dispatchSortableEvent,\n      hideGhostForTarget = _ref.hideGhostForTarget,\n      unhideGhostForTarget = _ref.unhideGhostForTarget;\n  if (!originalEvent) return;\n  var toSortable = putSortable || activeSortable;\n  hideGhostForTarget();\n  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  unhideGhostForTarget();\n\n  if (toSortable && !toSortable.el.contains(target)) {\n    dispatchSortableEvent('spill');\n    this.onSpill({\n      dragEl: dragEl,\n      putSortable: putSortable\n    });\n  }\n};\n\nfunction Revert() {}\n\nRevert.prototype = {\n  startIndex: null,\n  dragStart: function dragStart(_ref2) {\n    var oldDraggableIndex = _ref2.oldDraggableIndex;\n    this.startIndex = oldDraggableIndex;\n  },\n  onSpill: function onSpill(_ref3) {\n    var dragEl = _ref3.dragEl,\n        putSortable = _ref3.putSortable;\n    this.sortable.captureAnimationState();\n\n    if (putSortable) {\n      putSortable.captureAnimationState();\n    }\n\n    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);\n\n    if (nextSibling) {\n      this.sortable.el.insertBefore(dragEl, nextSibling);\n    } else {\n      this.sortable.el.appendChild(dragEl);\n    }\n\n    this.sortable.animateAll();\n\n    if (putSortable) {\n      putSortable.animateAll();\n    }\n  },\n  drop: drop\n};\n\n_extends(Revert, {\n  pluginName: 'revertOnSpill'\n});\n\nfunction Remove() {}\n\nRemove.prototype = {\n  onSpill: function onSpill(_ref4) {\n    var dragEl = _ref4.dragEl,\n        putSortable = _ref4.putSortable;\n    var parentSortable = putSortable || this.sortable;\n    parentSortable.captureAnimationState();\n    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n    parentSortable.animateAll();\n  },\n  drop: drop\n};\n\n_extends(Remove, {\n  pluginName: 'removeOnSpill'\n});\n\nvar lastSwapEl;\n\nfunction SwapPlugin() {\n  function Swap() {\n    this.defaults = {\n      swapClass: 'sortable-swap-highlight'\n    };\n  }\n\n  Swap.prototype = {\n    dragStart: function dragStart(_ref) {\n      var dragEl = _ref.dragEl;\n      lastSwapEl = dragEl;\n    },\n    dragOverValid: function dragOverValid(_ref2) {\n      var completed = _ref2.completed,\n          target = _ref2.target,\n          onMove = _ref2.onMove,\n          activeSortable = _ref2.activeSortable,\n          changed = _ref2.changed,\n          cancel = _ref2.cancel;\n      if (!activeSortable.options.swap) return;\n      var el = this.sortable.el,\n          options = this.options;\n\n      if (target && target !== el) {\n        var prevSwapEl = lastSwapEl;\n\n        if (onMove(target) !== false) {\n          toggleClass(target, options.swapClass, true);\n          lastSwapEl = target;\n        } else {\n          lastSwapEl = null;\n        }\n\n        if (prevSwapEl && prevSwapEl !== lastSwapEl) {\n          toggleClass(prevSwapEl, options.swapClass, false);\n        }\n      }\n\n      changed();\n      completed(true);\n      cancel();\n    },\n    drop: function drop(_ref3) {\n      var activeSortable = _ref3.activeSortable,\n          putSortable = _ref3.putSortable,\n          dragEl = _ref3.dragEl;\n      var toSortable = putSortable || this.sortable;\n      var options = this.options;\n      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);\n\n      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {\n        if (dragEl !== lastSwapEl) {\n          toSortable.captureAnimationState();\n          if (toSortable !== activeSortable) activeSortable.captureAnimationState();\n          swapNodes(dragEl, lastSwapEl);\n          toSortable.animateAll();\n          if (toSortable !== activeSortable) activeSortable.animateAll();\n        }\n      }\n    },\n    nulling: function nulling() {\n      lastSwapEl = null;\n    }\n  };\n  return _extends(Swap, {\n    pluginName: 'swap',\n    eventProperties: function eventProperties() {\n      return {\n        swapItem: lastSwapEl\n      };\n    }\n  });\n}\n\nfunction swapNodes(n1, n2) {\n  var p1 = n1.parentNode,\n      p2 = n2.parentNode,\n      i1,\n      i2;\n  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;\n  i1 = index(n1);\n  i2 = index(n2);\n\n  if (p1.isEqualNode(p2) && i1 < i2) {\n    i2++;\n  }\n\n  p1.insertBefore(n2, p1.children[i1]);\n  p2.insertBefore(n1, p2.children[i2]);\n}\n\nvar multiDragElements = (/* unused pure expression or super */ null && ([])),\n    multiDragClones = (/* unused pure expression or super */ null && ([])),\n    lastMultiDragSelect,\n    // for selection with modifier key down (SHIFT)\nmultiDragSortable,\n    initialFolding = false,\n    // Initial multi-drag fold when drag started\nfolding = false,\n    // Folding any other time\ndragStarted = false,\n    dragEl$1,\n    clonesFromRect,\n    clonesHidden;\n\nfunction MultiDragPlugin() {\n  function MultiDrag(sortable) {\n    // Bind all private methods\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n\n    if (sortable.options.supportPointer) {\n      on(document, 'pointerup', this._deselectMultiDrag);\n    } else {\n      on(document, 'mouseup', this._deselectMultiDrag);\n      on(document, 'touchend', this._deselectMultiDrag);\n    }\n\n    on(document, 'keydown', this._checkKeyDown);\n    on(document, 'keyup', this._checkKeyUp);\n    this.defaults = {\n      selectedClass: 'sortable-selected',\n      multiDragKey: null,\n      setData: function setData(dataTransfer, dragEl) {\n        var data = '';\n\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          multiDragElements.forEach(function (multiDragElement, i) {\n            data += (!i ? '' : ', ') + multiDragElement.textContent;\n          });\n        } else {\n          data = dragEl.textContent;\n        }\n\n        dataTransfer.setData('Text', data);\n      }\n    };\n  }\n\n  MultiDrag.prototype = {\n    multiDragKeyDown: false,\n    isMultiDrag: false,\n    delayStartGlobal: function delayStartGlobal(_ref) {\n      var dragged = _ref.dragEl;\n      dragEl$1 = dragged;\n    },\n    delayEnded: function delayEnded() {\n      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);\n    },\n    setupClone: function setupClone(_ref2) {\n      var sortable = _ref2.sortable,\n          cancel = _ref2.cancel;\n      if (!this.isMultiDrag) return;\n\n      for (var i = 0; i < multiDragElements.length; i++) {\n        multiDragClones.push(clone(multiDragElements[i]));\n        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;\n        multiDragClones[i].draggable = false;\n        multiDragClones[i].style['will-change'] = '';\n        toggleClass(multiDragClones[i], this.options.selectedClass, false);\n        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);\n      }\n\n      sortable._hideClone();\n\n      cancel();\n    },\n    clone: function clone(_ref3) {\n      var sortable = _ref3.sortable,\n          rootEl = _ref3.rootEl,\n          dispatchSortableEvent = _ref3.dispatchSortableEvent,\n          cancel = _ref3.cancel;\n      if (!this.isMultiDrag) return;\n\n      if (!this.options.removeCloneOnHide) {\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          insertMultiDragClones(true, rootEl);\n          dispatchSortableEvent('clone');\n          cancel();\n        }\n      }\n    },\n    showClone: function showClone(_ref4) {\n      var cloneNowShown = _ref4.cloneNowShown,\n          rootEl = _ref4.rootEl,\n          cancel = _ref4.cancel;\n      if (!this.isMultiDrag) return;\n      insertMultiDragClones(false, rootEl);\n      multiDragClones.forEach(function (clone) {\n        css(clone, 'display', '');\n      });\n      cloneNowShown();\n      clonesHidden = false;\n      cancel();\n    },\n    hideClone: function hideClone(_ref5) {\n      var _this = this;\n\n      var sortable = _ref5.sortable,\n          cloneNowHidden = _ref5.cloneNowHidden,\n          cancel = _ref5.cancel;\n      if (!this.isMultiDrag) return;\n      multiDragClones.forEach(function (clone) {\n        css(clone, 'display', 'none');\n\n        if (_this.options.removeCloneOnHide && clone.parentNode) {\n          clone.parentNode.removeChild(clone);\n        }\n      });\n      cloneNowHidden();\n      clonesHidden = true;\n      cancel();\n    },\n    dragStartGlobal: function dragStartGlobal(_ref6) {\n      var sortable = _ref6.sortable;\n\n      if (!this.isMultiDrag && multiDragSortable) {\n        multiDragSortable.multiDrag._deselectMultiDrag();\n      }\n\n      multiDragElements.forEach(function (multiDragElement) {\n        multiDragElement.sortableIndex = index(multiDragElement);\n      }); // Sort multi-drag elements\n\n      multiDragElements = multiDragElements.sort(function (a, b) {\n        return a.sortableIndex - b.sortableIndex;\n      });\n      dragStarted = true;\n    },\n    dragStarted: function dragStarted(_ref7) {\n      var _this2 = this;\n\n      var sortable = _ref7.sortable;\n      if (!this.isMultiDrag) return;\n\n      if (this.options.sort) {\n        // Capture rects,\n        // hide multi drag elements (by positioning them absolute),\n        // set multi drag elements rects to dragRect,\n        // show multi drag elements,\n        // animate to rects,\n        // unset rects & remove from DOM\n        sortable.captureAnimationState();\n\n        if (this.options.animation) {\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            css(multiDragElement, 'position', 'absolute');\n          });\n          var dragRect = getRect(dragEl$1, false, true, true);\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            setRect(multiDragElement, dragRect);\n          });\n          folding = true;\n          initialFolding = true;\n        }\n      }\n\n      sortable.animateAll(function () {\n        folding = false;\n        initialFolding = false;\n\n        if (_this2.options.animation) {\n          multiDragElements.forEach(function (multiDragElement) {\n            unsetRect(multiDragElement);\n          });\n        } // Remove all auxiliary multidrag items from el, if sorting enabled\n\n\n        if (_this2.options.sort) {\n          removeMultiDragElements();\n        }\n      });\n    },\n    dragOver: function dragOver(_ref8) {\n      var target = _ref8.target,\n          completed = _ref8.completed,\n          cancel = _ref8.cancel;\n\n      if (folding && ~multiDragElements.indexOf(target)) {\n        completed(false);\n        cancel();\n      }\n    },\n    revert: function revert(_ref9) {\n      var fromSortable = _ref9.fromSortable,\n          rootEl = _ref9.rootEl,\n          sortable = _ref9.sortable,\n          dragRect = _ref9.dragRect;\n\n      if (multiDragElements.length > 1) {\n        // Setup unfold animation\n        multiDragElements.forEach(function (multiDragElement) {\n          sortable.addAnimationState({\n            target: multiDragElement,\n            rect: folding ? getRect(multiDragElement) : dragRect\n          });\n          unsetRect(multiDragElement);\n          multiDragElement.fromRect = dragRect;\n          fromSortable.removeAnimationState(multiDragElement);\n        });\n        folding = false;\n        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);\n      }\n    },\n    dragOverCompleted: function dragOverCompleted(_ref10) {\n      var sortable = _ref10.sortable,\n          isOwner = _ref10.isOwner,\n          insertion = _ref10.insertion,\n          activeSortable = _ref10.activeSortable,\n          parentEl = _ref10.parentEl,\n          putSortable = _ref10.putSortable;\n      var options = this.options;\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        }\n\n        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location\n\n        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {\n          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible\n          var dragRectAbsolute = getRect(dragEl$1, false, true, true);\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted\n            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable\n\n            parentEl.appendChild(multiDragElement);\n          });\n          folding = true;\n        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out\n\n\n        if (!isOwner) {\n          // Only remove if not folding (folding will remove them anyways)\n          if (!folding) {\n            removeMultiDragElements();\n          }\n\n          if (multiDragElements.length > 1) {\n            var clonesHiddenBefore = clonesHidden;\n\n            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden\n\n\n            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {\n              multiDragClones.forEach(function (clone) {\n                activeSortable.addAnimationState({\n                  target: clone,\n                  rect: clonesFromRect\n                });\n                clone.fromRect = clonesFromRect;\n                clone.thisAnimationDuration = null;\n              });\n            }\n          } else {\n            activeSortable._showClone(sortable);\n          }\n        }\n      }\n    },\n    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {\n      var dragRect = _ref11.dragRect,\n          isOwner = _ref11.isOwner,\n          activeSortable = _ref11.activeSortable;\n      multiDragElements.forEach(function (multiDragElement) {\n        multiDragElement.thisAnimationDuration = null;\n      });\n\n      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {\n        clonesFromRect = _extends({}, dragRect);\n        var dragMatrix = matrix(dragEl$1, true);\n        clonesFromRect.top -= dragMatrix.f;\n        clonesFromRect.left -= dragMatrix.e;\n      }\n    },\n    dragOverAnimationComplete: function dragOverAnimationComplete() {\n      if (folding) {\n        folding = false;\n        removeMultiDragElements();\n      }\n    },\n    drop: function drop(_ref12) {\n      var evt = _ref12.originalEvent,\n          rootEl = _ref12.rootEl,\n          parentEl = _ref12.parentEl,\n          sortable = _ref12.sortable,\n          dispatchSortableEvent = _ref12.dispatchSortableEvent,\n          oldIndex = _ref12.oldIndex,\n          putSortable = _ref12.putSortable;\n      var toSortable = putSortable || this.sortable;\n      if (!evt) return;\n      var options = this.options,\n          children = parentEl.children; // Multi-drag selection\n\n      if (!dragStarted) {\n        if (options.multiDragKey && !this.multiDragKeyDown) {\n          this._deselectMultiDrag();\n        }\n\n        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));\n\n        if (!~multiDragElements.indexOf(dragEl$1)) {\n          multiDragElements.push(dragEl$1);\n          dispatchEvent({\n            sortable: sortable,\n            rootEl: rootEl,\n            name: 'select',\n            targetEl: dragEl$1,\n            originalEvt: evt\n          }); // Modifier activated, select from last to dragEl\n\n          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {\n            var lastIndex = index(lastMultiDragSelect),\n                currentIndex = index(dragEl$1);\n\n            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {\n              // Must include lastMultiDragSelect (select it), in case modified selection from no selection\n              // (but previous selection existed)\n              var n, i;\n\n              if (currentIndex > lastIndex) {\n                i = lastIndex;\n                n = currentIndex;\n              } else {\n                i = currentIndex;\n                n = lastIndex + 1;\n              }\n\n              for (; i < n; i++) {\n                if (~multiDragElements.indexOf(children[i])) continue;\n                toggleClass(children[i], options.selectedClass, true);\n                multiDragElements.push(children[i]);\n                dispatchEvent({\n                  sortable: sortable,\n                  rootEl: rootEl,\n                  name: 'select',\n                  targetEl: children[i],\n                  originalEvt: evt\n                });\n              }\n            }\n          } else {\n            lastMultiDragSelect = dragEl$1;\n          }\n\n          multiDragSortable = toSortable;\n        } else {\n          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);\n          lastMultiDragSelect = null;\n          dispatchEvent({\n            sortable: sortable,\n            rootEl: rootEl,\n            name: 'deselect',\n            targetEl: dragEl$1,\n            originalEvt: evt\n          });\n        }\n      } // Multi-drag drop\n\n\n      if (dragStarted && this.isMultiDrag) {\n        folding = false; // Do not \"unfold\" after around dragEl if reverted\n\n        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {\n          var dragRect = getRect(dragEl$1),\n              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');\n          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;\n          toSortable.captureAnimationState();\n\n          if (!initialFolding) {\n            if (options.animation) {\n              dragEl$1.fromRect = dragRect;\n              multiDragElements.forEach(function (multiDragElement) {\n                multiDragElement.thisAnimationDuration = null;\n\n                if (multiDragElement !== dragEl$1) {\n                  var rect = folding ? getRect(multiDragElement) : dragRect;\n                  multiDragElement.fromRect = rect; // Prepare unfold animation\n\n                  toSortable.addAnimationState({\n                    target: multiDragElement,\n                    rect: rect\n                  });\n                }\n              });\n            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert\n            // properly they must all be removed\n\n\n            removeMultiDragElements();\n            multiDragElements.forEach(function (multiDragElement) {\n              if (children[multiDragIndex]) {\n                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);\n              } else {\n                parentEl.appendChild(multiDragElement);\n              }\n\n              multiDragIndex++;\n            }); // If initial folding is done, the elements may have changed position because they are now\n            // unfolding around dragEl, even though dragEl may not have his index changed, so update event\n            // must be fired here as Sortable will not.\n\n            if (oldIndex === index(dragEl$1)) {\n              var update = false;\n              multiDragElements.forEach(function (multiDragElement) {\n                if (multiDragElement.sortableIndex !== index(multiDragElement)) {\n                  update = true;\n                  return;\n                }\n              });\n\n              if (update) {\n                dispatchSortableEvent('update');\n              }\n            }\n          } // Must be done after capturing individual rects (scroll bar)\n\n\n          multiDragElements.forEach(function (multiDragElement) {\n            unsetRect(multiDragElement);\n          });\n          toSortable.animateAll();\n        }\n\n        multiDragSortable = toSortable;\n      } // Remove clones if necessary\n\n\n      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n        multiDragClones.forEach(function (clone) {\n          clone.parentNode && clone.parentNode.removeChild(clone);\n        });\n      }\n    },\n    nullingGlobal: function nullingGlobal() {\n      this.isMultiDrag = dragStarted = false;\n      multiDragClones.length = 0;\n    },\n    destroyGlobal: function destroyGlobal() {\n      this._deselectMultiDrag();\n\n      off(document, 'pointerup', this._deselectMultiDrag);\n      off(document, 'mouseup', this._deselectMultiDrag);\n      off(document, 'touchend', this._deselectMultiDrag);\n      off(document, 'keydown', this._checkKeyDown);\n      off(document, 'keyup', this._checkKeyUp);\n    },\n    _deselectMultiDrag: function _deselectMultiDrag(evt) {\n      if (typeof dragStarted !== \"undefined\" && dragStarted) return; // Only deselect if selection is in this sortable\n\n      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable\n\n      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click\n\n      if (evt && evt.button !== 0) return;\n\n      while (multiDragElements.length) {\n        var el = multiDragElements[0];\n        toggleClass(el, this.options.selectedClass, false);\n        multiDragElements.shift();\n        dispatchEvent({\n          sortable: this.sortable,\n          rootEl: this.sortable.el,\n          name: 'deselect',\n          targetEl: el,\n          originalEvt: evt\n        });\n      }\n    },\n    _checkKeyDown: function _checkKeyDown(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = true;\n      }\n    },\n    _checkKeyUp: function _checkKeyUp(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = false;\n      }\n    }\n  };\n  return _extends(MultiDrag, {\n    // Static methods & properties\n    pluginName: 'multiDrag',\n    utils: {\n      /**\n       * Selects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be selected\n       */\n      select: function select(el) {\n        var sortable = el.parentNode[expando];\n        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;\n\n        if (multiDragSortable && multiDragSortable !== sortable) {\n          multiDragSortable.multiDrag._deselectMultiDrag();\n\n          multiDragSortable = sortable;\n        }\n\n        toggleClass(el, sortable.options.selectedClass, true);\n        multiDragElements.push(el);\n      },\n\n      /**\n       * Deselects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be deselected\n       */\n      deselect: function deselect(el) {\n        var sortable = el.parentNode[expando],\n            index = multiDragElements.indexOf(el);\n        if (!sortable || !sortable.options.multiDrag || !~index) return;\n        toggleClass(el, sortable.options.selectedClass, false);\n        multiDragElements.splice(index, 1);\n      }\n    },\n    eventProperties: function eventProperties() {\n      var _this3 = this;\n\n      var oldIndicies = [],\n          newIndicies = [];\n      multiDragElements.forEach(function (multiDragElement) {\n        oldIndicies.push({\n          multiDragElement: multiDragElement,\n          index: multiDragElement.sortableIndex\n        }); // multiDragElements will already be sorted if folding\n\n        var newIndex;\n\n        if (folding && multiDragElement !== dragEl$1) {\n          newIndex = -1;\n        } else if (folding) {\n          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');\n        } else {\n          newIndex = index(multiDragElement);\n        }\n\n        newIndicies.push({\n          multiDragElement: multiDragElement,\n          index: newIndex\n        });\n      });\n      return {\n        items: _toConsumableArray(multiDragElements),\n        clones: [].concat(multiDragClones),\n        oldIndicies: oldIndicies,\n        newIndicies: newIndicies\n      };\n    },\n    optionListeners: {\n      multiDragKey: function multiDragKey(key) {\n        key = key.toLowerCase();\n\n        if (key === 'ctrl') {\n          key = 'Control';\n        } else if (key.length > 1) {\n          key = key.charAt(0).toUpperCase() + key.substr(1);\n        }\n\n        return key;\n      }\n    }\n  });\n}\n\nfunction insertMultiDragElements(clonesInserted, rootEl) {\n  multiDragElements.forEach(function (multiDragElement, i) {\n    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];\n\n    if (target) {\n      rootEl.insertBefore(multiDragElement, target);\n    } else {\n      rootEl.appendChild(multiDragElement);\n    }\n  });\n}\n/**\n * Insert multi-drag clones\n * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted\n * @param  {HTMLElement} rootEl\n */\n\n\nfunction insertMultiDragClones(elementsInserted, rootEl) {\n  multiDragClones.forEach(function (clone, i) {\n    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];\n\n    if (target) {\n      rootEl.insertBefore(clone, target);\n    } else {\n      rootEl.appendChild(clone);\n    }\n  });\n}\n\nfunction removeMultiDragElements() {\n  multiDragElements.forEach(function (multiDragElement) {\n    if (multiDragElement === dragEl$1) return;\n    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);\n  });\n}\n\nSortable.mount(new AutoScrollPlugin());\nSortable.mount(Remove, Revert);\n\n/* harmony default export */ var sortable_esm = (Sortable);\n\n\n;// CONCATENATED MODULE: ./public/src/components/sortable.js\n\n\nfunction sortable(containerSelector, elSelector, model) {\n  let container = common_$(containerSelector)[0]; // debugger\n\n  if (container) {\n    // let els = $(elSelector);\n    let sortable = sortable_esm.create(container, {\n      animation: 150,\n      onEnd: function (evt) {\n        let oldI = evt.oldIndex;\n        let newI = evt.newIndex; // let questions = _question.questions()\n\n        if (oldI > newI) {\n          sort(oldI);\n        } else {\n          sort(newI);\n        }\n\n        async function sort(upToQestionNumber) {\n          let els = common_$(elSelector);\n          let questionsEls = [].map.call(els, function (el, i) {\n            if (i - 1 < upToQestionNumber) return el;\n          });\n          let toChange = questionsEls.map(el => {\n            return el.id;\n          });\n          let res = await post(`/adminsc/${model}/sort`, {\n            toChange\n          });\n          res = JSON.parse(res);\n\n          if (res.msg) {\n            popup.show(res.msg);\n          }\n\n          questionsEls.map((el, i) => {\n            common_$(el).find('.sort').innerText = i + 1;\n          });\n        }\n      }\n    });\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Test/model/opentest/opentest.js\n\nclass _test {\n  constructor() {\n    this.model = 'opentest';\n  }\n\n  async create() {\n    let test = _test.serverModel();\n\n    test.id = 0;\n    test.isTest = 1;\n    debugger;\n    let url = `/${this.model}/updateOrCreate`;\n    let res = await post(url, test);\n    res = await JSON.parse(res);\n    debugger;\n\n    if (res) {\n      window.location.href = `/adminsc/${model}/edit/${res.id}`;\n    }\n  }\n\n  currentQ() {\n    return {\n      id: common_$('.nav-active')[0].innerText - 1,\n      QEl: common_$('.question.flex1')[0],\n      navLength: common_$('[data-pagination]').length,\n      QPrevc: common_$('.question.flex1')[0].previousElementSibling,\n      QNextEl: common_$('.question.flex1')[0].nextElementSibling\n    };\n  }\n\n  viewModel() {\n    return {\n      id: +window.location.href.split('/').pop(),\n      test_name: common_$('#test_name').text(),\n      enable: common_$('#enable')[0],\n      parent: common_$('select').selectedIndexValue()\n    };\n  }\n\n  id() {\n    return id ?? common_$('.test-name')[0].dataset.testid;\n  }\n\n  children() {\n    let childrenLenght = common_$('.children').length;\n    if (childrenLenght) return childrenLenght;\n    return false;\n  }\n\n  async path_create() {\n    let test_path = _test.serverModel();\n\n    test_path.id = 0;\n    test_path.isTest = 0;\n    let url = `/adminsc/${model}/create`;\n    let res = await post(url, test_path);\n    res = await JSON.parse(res);\n\n    if (res) {\n      window.location.href = `/adminsc/${model}/edit/${res.id - 1}`;\n    }\n  }\n\n  name() {\n    return common_$('.test-name')[0].innerText;\n  }\n\n  selectedValueCustomSelect(className) {\n    let select = common_$(`[data-field=${className}]`)[0];\n    let selected = [...select.options].filter(opt => opt.selected);\n\n    if (selected) {\n      return +selected[0].value;\n    }\n  }\n\n  serverModel() {\n    let model = {\n      id: +window.location.href.split('/').pop(),\n      test_name: common_$('#test_name')[0].value,\n      isTest: +common_$('[isTest]')[0].getAttribute('isTest')\n    };\n    let fields = common_$('.custom-select');\n    [].forEach.call(fields, function (field) {\n      model[field.dataset['field']] = field.dataset['id'];\n    });\n    return model;\n  }\n\n  async update() {\n    let model = _test.serverModel();\n\n    let url = `/adminsc/${model}/update/${model.id}`;\n    let res = await post(url, model);\n    res = await JSON.parse(res);\n\n    if (res) {\n      window.location.href = `/adminsc/${model}/edit/${model.id}`;\n    }\n  }\n\n  async del() {\n    if (_test.children()) {\n      popup.show('Сначала удалите все тесты из папки');\n      return false;\n    }\n\n    let id = _test.id();\n\n    let res = await post('/adminsc/${model}/delete', {\n      id\n    });\n    res = await JSON.parse(res);\n\n    if (res.notAdmin) {\n      popup.show('Видимость теста скрыта. Чтобы удалить полностью - обратитесь к ГД');\n      setTimeout(() => {\n        window.location = `/adminsc/${model}/edit/400`;\n      }, 4000);\n    } else {\n      window.location = `/adminsc/${model}/edit/400`;\n    }\n  }\n\n}\n;// CONCATENATED MODULE: ./public/src/Test/model/opentest/openanswer.js\n\nlet _answer = {\n  async create(button) {\n    let question = button.closest('.question-edit');\n    let openquestion_id = question.id;\n    let sort = question.querySelectorAll('.answer').length + 1;\n    let res = await post('/openanswer/updateOrCreate', {\n      openquestion_id,\n      sort\n    });\n    res = JSON.parse(res);\n    let id = res.id;\n\n    if (id) {\n      let html = res.html;\n      button.insertAdjacentHTML(\"beforebegin\", html);\n    } else {\n      popup.show('Сохранено');\n    }\n  },\n\n  async del(target) {\n    let del_button = target.closest('.delete');\n    if (!del_button) return false;\n\n    if (confirm(\"Удалить этот ответ?\")) {\n      let answer = del_button.closest('.answer');\n      let id = +answer.dataset['answerId'];\n      let res = await post('/openanswer/delete', {\n        id\n      });\n      res = JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        answer.remove();\n        popup.show('Ответ удален');\n      }\n    }\n  }\n\n};\n;// CONCATENATED MODULE: ./public/src/Test/opentest-edit.js\n\n\n\n\n\n\n\n\n\n\n\nlet opentestEdit = common_$('.opentest-edit-wrapper')[0];\n\nif (opentestEdit) {\n  sortable('.opentest-edit-wrapper .questions', '.opentest-edit-wrapper .question-edit', 'openquestion');\n  opentestEdit.addEventListener('click', _ref => {\n    let {\n      target\n    } = _ref;\n    const test = new _test();\n\n    switch (true) {\n      case target.classList.contains('test-path__update'):\n        {\n          test.update();\n          break;\n        }\n\n      case target.classList.contains('test__update'):\n        {\n          test.update();\n          break;\n        }\n\n      case target.classList.contains('test__save'):\n        {\n          test.update();\n          break;\n        }\n\n      case target.classList.contains('test__delete'):\n        {\n          test.delete();\n          break;\n        }\n\n      case target.classList.contains('test-path__create'):\n        {\n          test.path_create();\n          break;\n        }\n\n      case target.classList.contains('test__create'):\n        {\n          test.create();\n          break;\n        }\n      // case !!target.closest('.question__save'): {\n      //   _openquestion.save(target)\n      //   break;\n      // }\n\n      case !!target.closest('.question__show-answers'):\n        {\n          _openquestion.showAnswers(target);\n\n          break;\n        }\n\n      case !!target.closest('.question__delete'):\n        {\n          _openquestion.del(target);\n\n          break;\n        }\n\n      case target.classList.contains('question__create-button'):\n        {\n          _openquestion.create(target);\n\n          break;\n        }\n\n      case !!target.closest('.delete'):\n        {\n          _answer.del(target);\n\n          break;\n        }\n\n      case target.classList.contains('answer__create-button'):\n        {\n          _answer.create(target);\n\n          break;\n        }\n\n      case !!target.closest('.question-edit__parent-select'):\n        {\n          _openquestion.changeParent(target);\n\n          break;\n        }\n    }\n  });\n\n  let handleKeyup = async function (_ref2) {\n    let {\n      target\n    } = _ref2;\n\n    if (target.classList.contains('text')) {\n      let answer = target.closest('.answer');\n\n      if (answer) {\n        let id = answer.dataset.answerId;\n        let openquestion_id = target.closest('.question-edit').id;\n        answer = target.innerText; // answer = answer.querySelector('.text').innerText\n\n        let res = await post('/adminsc/openanswer/updateOrCreate', {\n          id,\n          answer,\n          openquestion_id\n        });\n        res = JSON.parse(res);\n\n        if (res.msg === 'ok') {\n          popup.show('Сохранен');\n        }\n      } else {\n        let id = target.closest('.question-edit').id;\n        let question = target.innerText;\n        let res = await post('/adminsc/openquestion/updateOrCreate', {\n          id,\n          question\n        });\n        res = await JSON.parse(res);\n\n        if (res.msg) {\n          popup.show(res.msg);\n        }\n      }\n    }\n  };\n\n  let debouncedInput = debounce(handleKeyup);\n  common_$(opentestEdit).on('keyup', debouncedInput);\n}\n;// CONCATENATED MODULE: ./public/src/Test/model/answer.js\n\nlet answer_answer = {\n  el: add_button => {\n    let answers = add_button.parentNode.querySelectorAll('.answer');\n    let prev_sort = 0;\n\n    if (answers.length) {\n      prev_sort = +common_$(answers[answers.length - 1]).find('.sort').innerText;\n    }\n\n    let el = common_$('.answer__create').find('.answer').cloneNode(true);\n    el.classList.add('answer');\n    el.classList.remove('answer__create');\n    return {\n      el: el,\n      id: 'new',\n      q_id: +add_button.closest('.question-edit').id,\n      previous_sort: prev_sort,\n      answerCnt: answers.length,\n      sort: common_$(el).find('.sort'),\n      checked: common_$(el).find('input'),\n      text: common_$(el).find('.text'),\n      delete: common_$(common_$(el).find('.delete')).on('click', function () {\n        answer_answer.del(this);\n      })\n    };\n  },\n\n  getModelForServer(el) {\n    return {\n      answer: '',\n      parent_question: el.q_id,\n      correct_answer: 0,\n      pica: ''\n    };\n  },\n\n  async create(button) {\n    // debugger\n    let a_id = await createOnServer(button);\n    show(a_id);\n\n    async function createOnServer(button) {\n      let newEl = answer_answer.getModelForServer(answer_answer.el(button));\n\n      let res = await post('/answer/create', newEl);\n      res = JSON.parse(res);\n      return res.id;\n    }\n\n    function show(a_id) {\n      let el = answer_answer.el(button);\n\n      el.checked.checked = false;\n      el.el.dataset['answerId'] = a_id;\n      el.text.innerText = '';\n      el.sort.innerText = el.answerCnt + 1;\n      el.el.style.display = 'flex';\n      button.before(el.el);\n      el.el.style.opacity = 1;\n    }\n  },\n\n  async del(target) {\n    let del_button = target.closest('.delete');\n    if (!del_button) return false;\n\n    if (confirm(\"Удалить этот ответ?\")) {\n      let res = await deleteFromServer(del_button);\n    }\n\n    async function deleteFromServer(del_button) {\n      let a_id = +del_button.closest('.answer').dataset['answerId'];\n      let res = await post('/answer/delete', {\n        a_id\n      });\n      res = JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        del_button.closest('.answer').remove();\n        popup.show('Ответ удален');\n      }\n    }\n  }\n\n};\n;// CONCATENATED MODULE: ./public/src/Test/model/question.js\n\n\nlet _question = {\n  changeParent: async function (target) {\n    debugger;\n    let opt = target.options[target.selectedIndex];\n    let id = target.closest('.question-edit').id;\n    let test_id = opt.dataset['questionParentId'];\n    let test_name = opt.value;\n    let res = await post('/adminsc/question/changeParent', {\n      id,\n      test_id\n    });\n    res = JSON.parse(res);\n    if (res.msg !== 'ok') throw e;\n    let question = target.closest('.question-edit');\n    question.remove();\n    popup.show('Перемещен в ' + test_name); // debugger\n  },\n  showTip: (action, event) => {\n    let el = event.target;\n    let tip = document.createElement(\"div\");\n\n    if (action === 'save.svg') {\n      addTooltip(el, 'сохранить');\n    }\n  },\n  showFirst: () => {\n    let question = _question.cloneEmptyModel();\n\n    if (!question) return;\n\n    let model = _question.viewModel(question);\n\n    model.sort.innerText = '1';\n    common_$(model.save).on('click', _question.save);\n    common_$(model.del).on('click', _question.delete);\n    common_$(question).addClass('question-edit');\n    common_$(question).removeClass('question__create');\n    let questions = common_$('.questions')[0];\n    questions.prepend(question);\n  },\n  cloneEmptyModel: () => {\n    let question = common_$('.questions .question__create .question-edit')[0];\n    if (question) return question.cloneNode(true);\n  },\n  showAnswers: target => {\n    let row = target.closest('.question-edit');\n    let answers = common_$(row).find('.question__answers');\n    answers.classList.toggle('height');\n    answers.classList.toggle('scale');\n    target.classList.toggle('rotate');\n  },\n  viewModel: el => {\n    return {\n      id: +el.id,\n      el: el,\n      sort: el.querySelector('.sort'),\n      save: el.querySelector('.question__save'),\n      text: el.querySelector('.question__text'),\n      del: el.querySelector('.question__delete'),\n      createAnswerButton: el.querySelector('.answer__create-button'),\n      addButton: common_$(common_$('.questions')[0]).find('.question__create-button')\n    };\n  },\n  serverModel: () => {\n    return {\n      question: {\n        id: null,\n        qustion: '',\n        parent: +window.location.href.split('/').pop(),\n        sort: _question.lastSort()\n      }\n    };\n  },\n  questions: () => {\n    return common_$('.questions>.question-edit'); // return $('.questions>.question-edit').el\n  },\n  questionsCount: () => {\n    return common_$('.questions>.question-edit').el.length;\n  },\n  lastSort: () => {\n    let qs = _question.questions();\n\n    let length = qs.length - 1;\n    let last = +_question.viewModel(qs[length]).sort.innerText;\n    return last + 1;\n  },\n  create: async e => {\n    let q_id = await _question.createOnServer(e);\n\n    if (q_id) {\n      _question.createOnView(q_id);\n    }\n  },\n  createOnServer: async () => {\n    let question = _question.serverModel();\n\n    let res = await post('/question/updateOrCreate', {\n      question: question.question,\n      answers: {}\n    });\n    res = await JSON.parse(res);\n    return res.id;\n  },\n  createOnView: q_id => {\n    let clone = _question.cloneEmptyModel();\n\n    let model = _question.viewModel(clone);\n\n    model.sort.innerText = _question.lastSort();\n    model.text.innerText = '';\n    model.el.id = q_id;\n    model.addButton.before(clone);\n  },\n  save: async target => {\n    let question = target.closest('.question-edit');\n    let res = await post('/question/UpdateOrCreate', {\n      question: _question.getModelForServer(question),\n      answers: _question.getAnswers(question)\n    });\n    res = await JSON.parse(res);\n    popup.show(res.msg);\n  },\n  delete: async target => {\n    if (confirm(\"Удалить вопрос со всеми его ответами?\")) {\n      let viewModel = _question.viewModel(target.closest('.question-edit'));\n\n      let id = viewModel.id;\n      let deleted = await _question.deleteFromServer(id);\n\n      if (deleted) {\n        _question.deleteFromView(viewModel);\n\n        popup.show(deleted.msg);\n      }\n    }\n  },\n  deleteFromView: async viewModel => {\n    viewModel.el.remove();\n  },\n  deleteFromServer: async q_id => {\n    let res = await post('/question/delete', {\n      q_id\n    });\n    return JSON.parse(res);\n  },\n  getModelForServer: question => {\n    return {\n      id: +question.id,\n      parent: +common_$('.questions')[0].dataset.testId,\n      picq: '',\n      qustion: common_$(question).find('.question__text').innerText,\n      sort: +common_$(question).find('.sort').innerText\n    };\n  },\n  getAnswers: question => {\n    let answerBlocks = question.querySelectorAll('.answer');\n    return [...answerBlocks].map(a => {\n      return {\n        id: +a.dataset['answerId'],\n        answer: a.querySelector('.text').innerText,\n        correct_answer: +a.querySelector('[type=\"checkbox\"]').checked,\n        parent_question: +question.id,\n        pica: ''\n      };\n    }, question);\n  }\n};\n;// CONCATENATED MODULE: ./public/src/components/select/WDSSelect.js\n\n\nclass WDSSelect {\n  constructor(el) {\n    if (!el) return false;\n    if (el.multiple) return false;\n    this.title = el.title ?? '';\n    this.field = el.dataset['field'];\n    this.options = getFormattedOptions(el.querySelectorAll(\"option\"));\n    this.sel = document.createElement(\"div\");\n    if (el.className) this.sel.classList.add(el.className);\n    this.label = document.createElement(\"span\");\n    this.arrow = document.createElement(\"div\");\n    this.space = document.createElement(\"div\");\n    this.ul = document.createElement(\"ul\");\n    setup(this);\n    el.after(this.sel); // el.style.display = \"none\"\n\n    el.remove();\n  }\n\n  get selectedOption() {\n    return this.options.find(option => option.selected);\n  }\n\n  get selectedOptionIndex() {\n    return this.options.indexOf(this.selectedOption);\n  }\n\n  selectValue(value) {\n    const next = this.options.find(option => {\n      return option.value === value;\n    });\n    const prev = this.selectedOption;\n    prev.selected = false; // prev.element.selected = false\n\n    next.selected = true; // next.element.selected = true\n\n    this.space.innerText = next.label;\n    this.label.closest('[custom-select]').dataset['id'] = next.value;\n    this.label.closest('[custom-select]').dataset['value'] = next.value;\n    this.ul.querySelector(`[data-value=\"${prev.value}\"]`).classList.remove(\"selected\");\n    const newCustomElement = this.ul.querySelector(`[data-value=\"${next.value}\"]`);\n    newCustomElement.classList.add(\"selected\");\n    newCustomElement.scrollIntoView({\n      block: \"nearest\"\n    });\n  }\n\n}\n\nfunction setup(select) {\n  if (select.title) {\n    select.titleElement = document.createElement(\"div\");\n    select.titleElement.classList.add(\"title\");\n    select.titleElement.innerText = select.title;\n    select.sel.append(select.titleElement);\n  } // select.sel.classList.add(\"custom-select\")\n\n\n  select.sel.setAttribute(\"custom-select\", '');\n  if (select.field) select.sel.dataset['field'] = select.field;\n  select.sel.dataset['id'] = select.selectedOption.value;\n  select.sel.dataset['value'] = select.selectedOption.value;\n  select.sel.tabIndex = 0; // select.label.classList.add(\"value\")\n\n  select.sel.append(select.label);\n  select.space.classList.add(\"space\");\n  select.space.innerText = select.selectedOption.label;\n  select.label.append(select.space);\n  select.arrow.classList.add(\"arrow\");\n  select.label.append(select.arrow);\n  select.ul.classList.add(\"options\");\n  select.options.forEach(option => {\n    setOption(option);\n  });\n\n  function setOption(option) {\n    const li = document.createElement(\"li\");\n    li.innerText = option.label;\n    li.dataset.value = option.value;\n    li.classList.toggle(\"selected\", option.selected);\n    li.addEventListener(\"click\", () => {\n      select.selectValue(option.value);\n      select.ul.classList.remove(\"show\");\n    });\n    select.ul.append(li);\n  }\n\n  select.sel.append(select.ul);\n  select.label.addEventListener(\"click\", () => {\n    select.ul.classList.toggle(\"show\");\n  });\n  select.sel.addEventListener(\"blur\", () => {\n    select.ul.classList.remove(\"show\");\n  });\n  let debounceTimeout;\n  let searchTerm = \"\";\n  select.sel.addEventListener(\"keydown\", e => {\n    switch (e.code) {\n      case \"Space\":\n        select.ul.classList.toggle(\"show\");\n        break;\n\n      case \"ArrowUp\":\n        {\n          const prevOption = select.options[select.selectedOptionIndex - 1];\n\n          if (prevOption) {\n            select.selectValue(prevOption.value);\n          }\n\n          break;\n        }\n\n      case \"ArrowDown\":\n        {\n          const nextOption = select.options[select.selectedOptionIndex + 1];\n\n          if (nextOption) {\n            select.selectValue(nextOption.value);\n          }\n\n          break;\n        }\n\n      case \"Enter\":\n      case \"Escape\":\n        select.ul.classList.remove(\"show\");\n        break;\n\n      default:\n        {\n          clearTimeout(debounceTimeout);\n          searchTerm += e.key;\n          debounceTimeout = setTimeout(() => {\n            searchTerm = \"\";\n          }, 500);\n          const searchedOption = select.options.find(option => {\n            return option.label.toLowerCase().startsWith(searchTerm);\n          });\n\n          if (searchedOption) {\n            select.selectValue(searchedOption.value);\n          }\n        }\n    }\n  });\n}\n\nfunction getFormattedOptions(options) {\n  return [...options].map(option => {\n    return {\n      value: option.value,\n      label: option.label,\n      selected: option.selected,\n      element: option\n    };\n  });\n}\n;// CONCATENATED MODULE: ./public/src/Test/accordion-show.js\n\nfunction accordionShow() {\n  let currentTestId = common_$(`[data-testid]`)[0];\n\n  if (currentTestId) {\n    currentTestId = +currentTestId.dataset['testid'];\n    let menuItemCollection = common_$('.test-edit.accordion a');\n    Array.from(menuItemCollection).filter(a => {\n      if (+a.dataset.id === currentTestId) {\n        a.classList.add('current');\n      }\n    });\n  }\n\n  let button = common_$('.accordion-open')[0];\n\n  if (button) {\n    common_$(button).on('click', function () {\n      let menu = common_$('.accordion_wrap')[0];\n      menu.classList.toggle('open');\n    });\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Test/model/test.js\n\nconst test_test = {\n  nextQ: () => {\n    let current = test_test.currentQ();\n\n    if (current.id > current.navLength - 2) return false;\n\n    let aimNavId = test_test.aimNavIdFunction(current.id, 'next');\n\n    let aimQEl = test_test.aimQElFunction(current, 'next');\n\n    test_test.pushNav(current.id, aimNavId);\n\n    test_test.pushQ(current.QEl, aimQEl);\n  },\n  prevQ: () => {\n    let current = test_test.currentQ();\n\n    if (current.id < 1) return false;\n\n    let aimNavId = test_test.aimNavIdFunction(current.id, 'back');\n\n    let aimQEl = test_test.aimQElFunction(current, 'back');\n\n    test_test.pushNav(current.id, aimNavId);\n\n    test_test.pushQ(current.QEl, aimQEl);\n  },\n  pushNav: (currentId, aimNavId) => {\n    let currNavEl = common_$('[data-pagination]')[currentId];\n    currNavEl.classList.toggle('nav-active');\n    let NavEl = common_$('[data-pagination]')[aimNavId];\n    NavEl.classList.toggle('nav-active');\n  },\n  pushQ: (currentEl, aimQEl) => {\n    currentEl.classList.toggle('flex1');\n    aimQEl.classList.toggle('flex1');\n  },\n  aimNavIdFunction: (currentId, direction) => {\n    let dir = currentId;\n\n    switch (true) {\n      case direction === 'next':\n        return dir += 1;\n        break;\n\n      case direction === 'back':\n        return dir -= 1;\n        break;\n    }\n  },\n  aimQElFunction: (current, direction) => {\n    switch (true) {\n      case direction === 'next':\n        return current.QNextEl;\n        break;\n\n      case direction === 'back':\n        return current.QPrevc;\n        break;\n    }\n  },\n  currentQ: () => {\n    return {\n      id: common_$('.nav-active')[0].innerText - 1,\n      QEl: common_$('.question.flex1')[0],\n      navLength: common_$('[data-pagination]').length,\n      QPrevc: common_$('.question.flex1')[0].previousElementSibling,\n      QNextEl: common_$('.question.flex1')[0].nextElementSibling\n    };\n  },\n  viewModel: () => {\n    return {\n      id: +window.location.href.split('/').pop(),\n      test_name: common_$('#test_name').text(),\n      enable: common_$('#enable')[0],\n      parent: common_$('select').selectedIndexValue()\n    };\n  },\n  id: id => {\n    return id ?? common_$('.test-name')[0].dataset.testid;\n  },\n  children: () => {\n    let childrenLenght = common_$('.children').length;\n    if (childrenLenght) return childrenLenght;\n    return false;\n  },\n  path_create: async () => {\n    let test_path = test_test.serverModel();\n\n    test_path.id = 0;\n    test_path.isTest = 0;\n    let url = `/test/create`;\n    let res = await post(url, test_path);\n    res = await JSON.parse(res);\n\n    if (res) {\n      window.location.href = `/adminsc/test/edit/${res.id - 1}`;\n    }\n  },\n  name: () => {\n    return common_$('.test-name')[0].innerText;\n  },\n  create: async () => {\n    let test = test_test.serverModel();\n\n    test.id = 0;\n    test.isTest = 1;\n    let url = `/test/updateOrCreate`;\n    let res = await post(url, test);\n    res = await JSON.parse(res);\n    debugger;\n\n    if (res) {\n      window.location.href = `/adminsc/test/edit/${res.id}`;\n    }\n  },\n\n  selectedValueCustomSelect(className) {\n    let select = common_$(`[data-field=${className}]`)[0];\n    let selected = [...select.options].filter(opt => opt.selected);\n\n    if (selected) {\n      return +selected[0].value;\n    }\n  },\n\n  serverModel: () => {\n    let model = {\n      id: +window.location.href.split('/').pop(),\n      test_name: common_$('#test_name')[0].value,\n      isTest: +common_$('[isTest]')[0].getAttribute('isTest') // enable: _test.selectedValueCustomSelect('enable'),\n      // parent: _test.selectedValueCustomSelect('parent'),\n\n    }; // debugger\n\n    let fields = common_$('.custom-select');\n    [].forEach.call(fields, function (field) {\n      model[field.dataset['field']] = field.dataset['id'];\n    });\n    return model;\n  },\n  update: async () => {\n    let model = test_test.serverModel();\n\n    let url = `/adminsc/test/update/${model.id}`;\n    let res = await post(url, model);\n    res = await JSON.parse(res);\n\n    if (res) {\n      window.location.href = `/adminsc/test/edit/${model.id}`;\n    }\n  },\n  delete: async function () {\n    if (test_test.children()) {\n      popup.show('Сначала удалите все тесты из папки');\n      return false;\n    }\n\n    let id = test_test.id();\n\n    let res = await post('/adminsc/test/delete', {\n      id\n    });\n    res = await JSON.parse(res);\n\n    if (res.notAdmin) {\n      popup.show('Видимость теста скрыта. Чтобы удалить полностью - обратитесь к ГД');\n      setTimeout(() => {\n        window.location = '/adminsc/test/edit/400';\n      }, 4000);\n    } else {\n      window.location = '/adminsc/test/edit/400';\n    }\n  }\n};\n;// CONCATENATED MODULE: ./public/src/Test/testEditActions.js\n\n\n\nfunction testEditActions(target, type) {\n  if (type === 'click') {\n    switch (true) {\n      case target.classList.contains('test-path__update'):\n        {\n          test_test.update();\n\n          break;\n        }\n\n      case target.classList.contains('test__update'):\n        {\n          test_test.update();\n\n          break;\n        }\n\n      case target.classList.contains('test__save'):\n        {\n          test_test.update();\n\n          break;\n        }\n\n      case target.classList.contains('test__delete'):\n        {\n          test_test[\"delete\"]();\n\n          break;\n        }\n\n      case target.classList.contains('test-path__create'):\n        {\n          test_test.path_create();\n\n          break;\n        }\n\n      case target.classList.contains('test__create'):\n        {\n          test_test.create();\n\n          break;\n        }\n\n      case !!target.closest('.question__save'):\n        {\n          _question.save(target);\n\n          break;\n        }\n\n      case !!target.closest('.question__show-answers'):\n        {\n          _question.showAnswers(target);\n\n          break;\n        }\n\n      case !!target.closest('.question__delete'):\n        {\n          _question[\"delete\"](target);\n\n          break;\n        }\n\n      case target.classList.contains('question__create-button'):\n        {\n          _question.create();\n\n          break;\n        }\n\n      case !!target.closest('.delete'):\n        {\n          answer_answer.del(target);\n\n          break;\n        }\n\n      case target.classList.contains('answer__create-button'):\n        {\n          answer_answer.create(target);\n\n          break;\n        }\n    }\n  }\n\n  if (type === 'change') {\n    // debugger\n    switch (true) {\n      case !!target.closest('.question-edit__parent-select'):\n        {\n          _question.changeParent(target);\n\n          break;\n        }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Test/test-edit.js\n\n\n\n\n // import './path-create'\n\n\n\n\n\n\n\n\nfunction testEdit() {\n  let testEdit = common_$('.test-edit-wrapper');\n\n  if (testEdit) {\n    sortable('.test-edit-wrapper.questions'); // debugger\n\n    let customSelects = common_$('[custom-select]');\n    [].forEach.call(customSelects, function (select) {\n      new WDSSelect(select);\n    }); // при создании нового теста показать пустой вопрос\n\n    if (!_question.questions().length && /\\/adminsc\\/test\\/edit/.test(window.location.pathname)) {\n      _question.showFirst();\n    } // debugger\n\n\n    let testEditWrapper = common_$('.test-edit-wrapper')[0];\n\n    if (testEditWrapper) {\n      testEditWrapper.addEventListener('click', _ref => {\n        let {\n          target\n        } = _ref;\n        testEditActions(target, 'click');\n      });\n      testEditWrapper.addEventListener('change', _ref2 => {\n        let {\n          target\n        } = _ref2;\n        testEditActions(target, 'change');\n      });\n    }\n  }\n}\n;// CONCATENATED MODULE: ./public/src/components/test-pagination/test-pagination.js\n\n\ncommon_$('.pagination').on('click', handleClick);\n\nfunction handleClick(_ref) {\n  let {\n    target\n  } = _ref;\n  // debugger\n  if (!target.dataset.pagination) return; /// get clicked button Return if clicked is active\n\n  if (target.classList.contains('nav-active')) return;\n  let active_btn = common_$('.pagination .active')[0]; //// change active button\n\n  active_btn.classList.remove('active');\n  target.classList.add('active');\n  let id_to_hide = active_btn.dataset['pagination'];\n  common_$(`.question[data-id=\"${id_to_hide}\"]`).removeClass('show');\n  let id_to_show = target.dataset['pagination'];\n  common_$(`.question[data-id=\"${id_to_show}\"]`).addClass('show');\n}\n\nfunction navInit() {\n  let nav_buttons = common_$('[data-pagination]');\n  if (!nav_buttons[0]) return false;\n  Array.from(nav_buttons).map(nav => {\n    nav.classList.remove('nav-active');\n  });\n  nav_buttons[0].classList.add('nav-active');\n}\n\n\n;// CONCATENATED MODULE: ./public/src/Test/do.js\n\n\n\n\nfunction testDo() {\n  //Скрыть все вопросы\n  common_$('.question').removeClass(\"flex1\"); //Показть первый вопрос\n\n  common_$('.question:first-child').addClass(\"flex1\"); // Нажать первуюкнопку navigation\n\n  navInit();\n  common_$('.test-do__content [type=\"checkbox\"]').on('click', function (e) {\n    let a = e.target.labels[0];\n    a.classList.toggle('pushed');\n  });\n  common_$('#prev').on('click', test_test.prevQ);\n  common_$('#next').on('click', test_test.nextQ); /////////////////////////////////////////////////////////////////////////////\n  ///////////  RESULTS  TEST  Закончить тест/////////////////////////////\n  /////////////////////////////////////////////////////////////////////////////\n  // если это результат теста, деактивирукм кнопку Закончить тест\n\n  let button = common_$('.test-do__finish-btn')[0];\n\n  if (button) {\n    if (window.location.pathname.match('^/test/result/.?')) {\n      button.classList.add('inactive');\n    }\n  }\n\n  common_$('.test-do__finish-btn').on('click', async function (e) {\n    let button = e.target;\n    if (button.classList.contains('inactive')) return false;\n    if (button.id !== 'btnn') return false;\n\n    if (button.text == \"ПРОЙТИ ТЕСТ ЗАНОВО\") {\n      location.reload();\n      return;\n    }\n\n    let corrAnswers = await post('/test/getCorrectAnswers', {});\n    corrAnswers = JSON.parse(corrAnswers);\n    let errorCnt = colorView(corrAnswers);\n    let data = objToServer(errorCnt);\n    let res = await post('/adminsc/testresult/cachePageSendEmail', data);\n\n    if (res === 'ok') {\n      common_$(\"#btnn\")[0].href = location.href;\n      common_$(\"#btnn\")[0].text = \"ПРОЙТИ ТЕСТ ЗАНОВО\";\n    }\n  });\n\n  function objToServer(errorCnt) {\n    return {\n      // token: document.querySelector('meta[name=\"token\"]').getAttribute('content'),\n      questionCnt: common_$('.question').length,\n      errorCnt: errorCnt,\n      html: `<!DOCTYPE ${document.doctype.name}>` + document.documentElement.outerHTML,\n      testid: common_$('[data-test-id]')[0].dataset.testId,\n      testname: common_$('.test-name')[0].innerText,\n      user: common_$('.user-menu__fio')[0].innerText\n    };\n  }\n\n  function colorView(correctAnswers) {\n    let q = common_$('.question');\n    [].map.call(q, function (question) {\n      let answers = question.querySelectorAll('.a');\n      let errors = [];\n      [].map.call(answers, function (answer) {\n        let input = common_$(answer).find('input');\n        let id = answer.dataset.id;\n        checkCorrectAnswers(errors, id, correctAnswers, input, answer);\n      });\n      let id = question.dataset['id']; // id question\n\n      let paginItem = common_$(`.pagination [data-pagination='${+id}']`)[0];\n\n      if (errors.length) {\n        common_$(paginItem).addClass('redShadow');\n      } else {\n        common_$(paginItem).addClass('greenShadow');\n      }\n    });\n    return common_$('.redShadow').length;\n  }\n\n  function checkCorrectAnswers(errors, id, correctAnswers, input, answer) {\n    let correctAnser = correctAnswers.indexOf(id) !== -1;\n\n    if (input.checked && correctAnser) {\n      // checkbox нажат. а в correct answer нету. в correct_answers есть, его всегда подсвечиваем зеленым\n      answer.classList.add('done'); //green check зеленый значек\n    } else if (input.checked && !correctAnser) {\n      // checkbox нажат,и есть в correct answer. в correct_answers нет, кнопка не нажата\n      errors.push(true);\n    } else if (!input.checked && correctAnser) {\n      // кнопка не нажата, в correct_answers есть\n      answer.classList.add('done'); //green check зеленый значек\n\n      errors.push(true);\n    } else if (!input.checked && !correctAnser) {// кнопка не нажата, в correct_answers нет\n    }\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Admin/Settings/users.js\n\nfunction init() {}\n;// CONCATENATED MODULE: ./public/src/Admin/Settings/settings.js\n// import rights from '../Rights/rights'\n // import rights from \"./rights\";\n\nfunction settings() {\n  // rights()\n  init();\n}\n;// CONCATENATED MODULE: ./public/src/components/list/list.js\n\n\nfunction list() {\n  // debugger;\n  const tables = common_$('.custom-list__wrapper');\n\n  if (tables) {\n    [].forEach.call(tables, function (table) {\n      const contenteditable = common_$('[contenteditable]');\n      const headers = table.querySelectorAll('.head');\n      const sortables = table.querySelectorAll('[data-sort]');\n      const inputs = common_$(table).findAll('.head input');\n      const ids = common_$(table)[0].querySelectorAll('.id:not(.head');\n      const modelName = table.dataset['model'];\n      const rows = [];\n      common_$(table).on('click', handleClick.bind(this));\n      common_$(table).on('keyup', handleKeyUp.bind(this)); /// DEBOUNCE\n\n      const debounce = function (fn) {\n        let time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 700;\n        let timeout;\n        return function () {\n          const functionCall = () => fn.apply(this, arguments);\n\n          clearTimeout(timeout);\n          timeout = setTimeout(functionCall, time);\n        };\n      };\n\n      let debouncedInput = debounce(handleInput);\n\n      function handleKeyUp(_ref) {\n        let {\n          target\n        } = _ref;\n\n        // contenteditable\n        if (target.hasAttribute('contenteditable')) {\n          debouncedInput(table, contenteditable, target); /// search\n        } else if (target.closest('.head')) {\n          let header = target.closest('.head');\n          let index = [].findIndex.call(headers, (el, i, inputs) => {\n            return el === header;\n          });\n          search(index, target);\n        }\n      }\n\n      function handleClick(_ref2) {\n        let {\n          target\n        } = _ref2;\n\n        /// create\n        if (target.className === 'add-model') {\n          modelCreate(modelName); /// delete\n        } else if (target.className === '.del:not(.head)' || target.closest('.del:not(.head)')) {\n          modelDel(target.closest('.del:not(.head)')); /// edit\n        } else if (target.className === '.edit:not(.head)' || target.closest('.edit:not(.head)')) {\n          let id = target.closest('.edit:not(.head)').dataset['id'];\n          window.location = `/adminsc/${modelName}/edit/${id}`; /// sort\n        } else if (target.classList.contains('head')) {\n          let header = target.closest('.head');\n          let index = [].findIndex.call(headers, (el, i, inputs) => {\n            return el === header;\n          });\n          sortColumn(index);\n        }\n      } // DELETE\n\n\n      async function modelDel(el) {\n        // debugger\n        if (!confirm('Удалить пользователя?')) return;\n        let id = el.dataset['id'];\n        let res = await post(`/adminsc/${modelName}/delete`, {\n          id\n        });\n        res = JSON.parse(res);\n\n        if (res.msg === 'ok') {\n          delView(id);\n          popup.show(`id : ${id} удалено`);\n        }\n      }\n\n      function delView(id) {\n        let arr = common_$(`[data-id='${id}']`);\n        [].forEach.call(arr, function (el) {\n          el.remove();\n        });\n      } // CREATE\n\n\n      async function modelCreate(modelName, e) {\n        let res = await post(`/adminsc/${modelName}/create`, {});\n        res = JSON.parse(res);\n\n        if (res.id) {\n          window.location.href = `/adminsc/${modelName}/show`; // newRow(res.id - 1)\n        }\n      }\n\n      function newRow(id) {\n        let Row = [...rows[0]];\n        [].forEach.call(Row, function (el) {\n          let newEl = el.cloneNode(true);\n          let tableContent = common_$(table).find('.custom-list');\n          tableContent.appendChild(newEl);\n\n          if (['id'].includes(newEl.className)) {\n            newEl.innerText = id;\n          } else if (!['del', 'edit', 'save'].includes(newEl.className)) {\n            newEl.innerText = '';\n          }\n\n          newEl.dataset['id'] = id;\n        });\n      } /// SEARCH\n\n\n      function showAllRows() {\n        [].forEach.call(rows, row => {\n          [].forEach.call(row, el => {\n            el.style.display = 'flex';\n          });\n        });\n      }\n\n      function search(index, input) {\n        showAllRows();\n        const value = input.value;\n        [].forEach.call(inputs, inp => {\n          if (inp !== input) inp.value = '';\n        });\n        [].forEach.call(rows, function (row) {\n          const str = row[index].innerText;\n          const regexp = new RegExp(`${value}`, 'gi');\n\n          if (!str.match(regexp)) {\n            [].forEach.call(row, el => {\n              el.style.display = 'none';\n            });\n          }\n        });\n      }\n\n      ; // SORT\n\n      function sortColumn(index) {\n        // Получить текущее направление\n        const direction = directions[index] || 'asc'; // Фактор по направлению\n\n        const multiplier = direction === 'asc' ? 1 : -1;\n        const newRows = Array.from(rows);\n        newRows.sort(function (rowA, rowB) {\n          const cellA = rowA[index].innerHTML;\n          const cellB = rowB[index].innerHTML;\n          const a = transform(index, cellA);\n          const b = transform(index, cellB);\n\n          switch (true) {\n            case a > b:\n              return 1 * multiplier;\n\n            case a < b:\n              return -1 * multiplier;\n\n            case a === b:\n              return 0;\n          }\n        }); // Удалить старые строки\n\n        [].forEach.call(rows, function (nodeList) {\n          [].forEach.call(nodeList, el => {\n            el.remove();\n          });\n        }); // Поменять направление\n\n        directions[index] = direction === 'asc' ? 'desc' : 'asc'; // Добавить новую строку\n\n        newRows.forEach(function (newRow) {\n          newRow = Array.from(newRow);\n          newRow.reverse();\n          [].forEach.call(newRow, el => {\n            headers[headers.length - 1].after(el);\n          });\n        });\n      }\n\n      ; /// get table rows array\n\n      for (let i = 0; i < ids.length; i++) {\n        let id = ids[i].dataset.id;\n        let row = common_$(table)[0].querySelectorAll(`[data-id='${id}']`);\n        rows.push(row);\n      } // Направление сортировки\n\n\n      const directions = Array.from(sortables).map(function (sortable) {\n        return '';\n      }); // Преобразовать содержимое данной ячейки в заданном столбце\n\n      function transform(index, content) {\n        // Получить тип данных столбца\n        const type = sortables[index].getAttribute('data-type');\n\n        switch (type) {\n          case 'number':\n            return parseFloat(content);\n\n          case 'string':\n          default:\n            return content;\n        }\n      }\n\n      ; /// INPUT\n\n      function handleInput(table, contenteditable, target) {\n        if (!target.hasAttribute('contenteditable')) return false;\n        let model = makeServerModel(target, modelName);\n        save(model);\n      }\n\n      async function save(model) {\n        let url = `/adminsc/${model.modelName}/update`;\n        let res = await post(url, model.model);\n        res = JSON.parse(res);\n\n        if (res.msg === 'ok') {\n          popup.show('Сохранено!');\n        }\n      }\n\n      function makeServerModel(el, modelName) {\n        let field = el.dataset['field'];\n        return {\n          model: {\n            token: common_$(),\n            id: el.dataset.id,\n            [field]: el.innerText\n          },\n          modelName\n        };\n      }\n    });\n  } // })\n\n}\n;// CONCATENATED MODULE: ./public/src/Admin/Rights/rights.js\n\n\n // import contenteditable from '../../components/contenteditable'\n\nfunction rights() {\n  // debugger\n  // contenteditable()\n  common_$('.rights-table').on('click', handle);\n\n  function handle(_ref) {\n    let {\n      target\n    } = _ref;\n    if (target.closest('.del')) del(target.closest('.del'));\n    if (target.closest('.save')) save(target.closest('.save'));\n\n    function model(el) {\n      let dataId = el.dataset.id ?? 'new';\n      let fields = common_$(`[data-id='${dataId}']`);\n      let model = {};\n      model.toServ = {};\n      model.empty = {};\n      fields.map(f => {\n        if (f.classList.contains('id')) {\n          model.id = f;\n          model.toServ.id = f.dataset.id;\n        } else if (f.classList.contains('name')) {\n          model.name = f;\n          model.toServ.name = f.innerText.trim();\n        } else if (f.classList.contains('description')) {\n          model.description = f;\n          model.toServ.description = f.innerText.trim();\n        } else if (f.classList.contains('save.svg')) {\n          model.save = f;\n        } else if (f.classList.contains('del')) {\n          model.del = f;\n        }\n      });\n      model.empty.del = model.id.previousElementSibling.cloneNode(true);\n      model.empty.save = model.id.previousElementSibling.previousElementSibling.cloneNode(true);\n      model.empty.description = model.id.previousElementSibling.previousElementSibling.previousElementSibling.cloneNode(true);\n      model.empty.name = model.id.previousElementSibling.previousElementSibling.previousElementSibling.previousElementSibling.cloneNode(true);\n      model.empty.id = model.id.previousElementSibling.previousElementSibling.previousElementSibling.previousElementSibling.previousElementSibling.cloneNode(true);\n      return model;\n    }\n\n    function del(el) {\n      let mod = model(el);\n      if (mod.toServ.id === 'new') return;\n\n      if (confirm(\"Удалить право?\")) {\n        delDom(mod);\n        delServer(mod);\n      }\n    }\n\n    async function delServer(model) {\n      let res = await post('/right/delete', {\n        id: model.toServ.id\n      });\n      res = await JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        popup.show('Удалено');\n      }\n    }\n\n    function delDom(model) {\n      model.id.remove();\n      model.name.remove();\n      model.description.remove();\n      model.save.remove();\n      model.del.remove();\n    }\n\n    function save(el) {\n      let mod = model(el);\n\n      if (mod.toServ.id !== 'new') {\n        update(mod.toServ);\n      } else {\n        if (!mod.toServ.name || !mod.toServ.description) return false;\n        create(mod);\n      }\n    }\n\n    async function update(toServ) {\n      let res = await post('/right/update', toServ);\n\n      if (await JSON.parse(res).updated) {\n        popup.show('Обновлено');\n      }\n    }\n\n    function clearModel(model) {\n      model.name.innerText = \"\";\n      model.description.innerText = \"\";\n    }\n\n    function createOnDom(model) {\n      let lastElement = common_$(\".id[data-id='new']\")[0];\n      lastElement.before(model.empty.id);\n      lastElement.before(model.empty.name);\n      lastElement.before(model.empty.description);\n      lastElement.before(model.empty.save);\n      lastElement.before(model.empty.del);\n    }\n\n    function assignNewValuesOnClone(model, id) {\n      model.empty.id.dataset.id = id;\n      model.empty.id.innerText = id;\n      model.empty.name.dataset.id = id;\n      model.empty.name.innerText = model.name.innerText.trim();\n      model.empty.description.dataset.id = id;\n      model.empty.description.innerText = model.description.innerText.trim();\n      model.empty.save.dataset.id = id;\n      model.empty.del.dataset.id = id;\n    }\n\n    async function create(model) {\n      let res = await post('/right/create', model.toServ);\n      res = await JSON.parse(res);\n\n      if (res.id) {\n        assignNewValuesOnClone(model, res.id - 1);\n        createOnDom(model);\n        clearModel(model);\n        popup.show('Сохранено');\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Admin/Planning/planning.js\n\n\nfunction planning() {\n  debugger;\n}\n;// CONCATENATED MODULE: ./public/src/Auth/getSex.js\n\nfunction getSex() {\n  function sex() {\n    const s = common_$('[name=\"sex\"]');\n\n    for (let f of s) {\n      if (f.checked) {\n        return f.value;\n      }\n    }\n\n    return 'm';\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Admin/user/user.js\n\n\n\nfunction user() {\n  let item = common_$('[data-model=\"user\"]')[0];\n\n  if (item) {\n    common_$(item).on('click', handleClick);\n  }\n\n  async function handleClick(_ref) {\n    let {\n      target\n    } = _ref;\n\n    if (!!target.closest('#save')) {\n      let wrapper = common_$('.user-item')[0];\n      let data = getModel(wrapper);\n      let res = await post('/adminsc/user/update', data);\n\n      if (res === 'ok') {\n        popup.show('Сохранено');\n      }\n    } else if (target.classList.contains('right')) {\n      let rights = common_$('input.right:checked');\n      let str = '';\n      [].map.call(rights, function (right) {\n        let s = right.previousElementSibling.innerText;\n        str += s + ',';\n      });\n      let tab = target.closest('[tab]');\n      tab.dataset.value = str;\n    }\n  }\n\n  function rights() {\n    let right = common_$('.right:checked');\n    let rights = '';\n    [].map.call(right, r => {\n      let str = r.previousElementSibling.innerText + ',';\n      rights += str;\n    }, rights);\n    return rights;\n  }\n\n  function confirm() {\n    const confirm = common_$('#conf option');\n\n    for (let f of confirm) {\n      if (f.selected) {\n        return f.value;\n      }\n    }\n\n    return '0';\n  }\n\n  function getModel(target) {\n    return {\n      id: common_$(target).find(\"#id\").innerText,\n      name: common_$(target).find('#name').innerText,\n      surName: common_$(target).find('#s-name').innerText,\n      middleName: common_$(target).find('#m-name').innerText,\n      birthDate: common_$(target).find('#bday').innerText,\n      phone: common_$(target).find('#phone').innerText,\n      email: common_$(target).find('#email').innerText,\n      hired: common_$(target).find('#hired').innerText,\n      fired: common_$(target).find('#fired').innerText,\n      confirm: confirm(),\n      sex: getSex(),\n      rights: rights()\n    };\n  }\n}\n;// CONCATENATED MODULE: ./public/src/Test/open_test.js\n\n\nlet openTest = common_$('.opentest_wrap')[0];\n\nif (openTest) {\n  common_$(openTest).on('click', open_test_handleClick);\n  common_$(openTest).on('keyup', handleKeyup);\n}\n\nfunction handleKeyup(_ref) {\n  let {\n    target\n  } = _ref;\n\n  if (target.classList.contains('textarea')) {\n    let activePagination = common_$('[data-pagination].active')[0];\n\n    if (!target.innerText) {\n      activePagination.classList.remove('filled');\n    } else {\n      activePagination.classList.add('filled');\n    }\n  }\n}\n\nasync function open_test_handleClick(_ref2) {\n  let {\n    target\n  } = _ref2;\n  let testid = target.dataset.id;\n  let activeQuestion = common_$('.question.show')[0];\n  let paginations = common_$('[data-pagination]');\n  let activePagination = common_$('[data-pagination].active')[0];\n  let i = paginations.indexOf(activePagination);\n\n  if (target.id === 'prev') {\n    prevQuest();\n  } else if (target.id === 'next') {\n    nextQuest();\n  } else if (target.dataset.pagination) {\n    paginate();\n  } else if (target.id === 'finish') {\n    finish();\n  }\n\n  async function finish() {\n    let questions = await getAnswers(testid);\n    parseAnswers(questions);\n    let obj = cachePage();\n    let res = await post('/adminsc/opentestresult/finish', obj);\n\n    if (IsJsonString(res)) {\n      res = JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        popup.show(res.msg);\n      }\n    }\n  }\n\n  function cachePage() {\n    return {\n      testId: testid,\n      questionCnt: paginations.length,\n      html: `<!DOCTYPE ${document.doctype.name}>` + document.documentElement.outerHTML,\n      testname: common_$('.test-name')[0].innerText,\n      username: common_$('.user-menu__fio')[0].innerText\n    };\n  }\n\n  function paginate() {\n    if (target === activePagination) return false;\n    let aimPagination = target;\n    toggleQuestion(aimPagination, activeQuestion);\n    toggleNav(aimPagination, activePagination);\n  }\n\n  function prevQuest() {\n    if (i < 1) return false;\n    let aimPagination = paginations[i - 1];\n    toggleQuestion(aimPagination, activeQuestion);\n    toggleNav(aimPagination, activePagination);\n  }\n\n  function nextQuest() {\n    if (i > paginations.length - 2) return false;\n    let aimPagination = paginations[i + 1];\n    toggleQuestion(aimPagination, activeQuestion);\n    toggleNav(aimPagination, activePagination);\n  }\n}\n\nfunction parseAnswers(questions) {\n  questions.forEach(q => {\n    let q_id = q.id;\n    let q_el = common_$(`question[data-id='${q_id}']`);\n    let userA = q_el.querySelector('.textarea');\n    q.answers.forEach(a => {\n      highlight(a, userAnswer, true);\n    }).bind(userA);\n  }); // let userAnswers = $('.textarea')\n  // userAnswers.map((userAnswer) => {\n  //   let a = answers[0].answer\n  // })\n}\n\nasync function getAnswers(id) {\n  let res = await post('/adminsc/opentestresult/getanswers', {\n    id\n  });\n  res = JSON.parse(res);\n  return res;\n}\n\nfunction toggleNav(aimPagination, activePagination) {\n  activePagination.classList.toggle('active');\n  aimPagination.classList.toggle('active');\n}\n\nfunction toggleQuestion(aimPaginationId, activeQuestion) {\n  let aimQuestionId = aimPaginationId.dataset.pagination;\n  let aimQuestion = common_$(`.question[data-id='${aimQuestionId}']`)[0];\n  aimQuestion.classList.toggle('show');\n  activeQuestion.classList.toggle('show');\n}\n\nfunction highlight(word, el, addEventLis) {\n  hiliter(word, el, addEventLis);\n  placeCaretAtEnd(document.getElementById(\"textBox\"));\n}\n\nfunction placeCaretAtEnd(el) {\n  el.focus();\n\n  if (typeof window.getSelection != \"undefined\" && typeof document.createRange != \"undefined\") {\n    var range = document.createRange();\n    range.selectNodeContents(el);\n    range.collapse(false);\n    var sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(range);\n  } else if (typeof document.body.createTextRange != \"undefined\") {\n    var textRange = document.body.createTextRange();\n    textRange.moveToElementText(el);\n    textRange.collapse(false);\n    textRange.select();\n  }\n}\n\nfunction hiliter(word, element, addEventLis) {\n  var rgxp = new RegExp(word, 'g');\n  var repl = '<span style=\"color:red;\">' + word + '</span>';\n  element.innerHTML = element.innerHTML.replace(rgxp, repl);\n  addEventLis && element.addEventListener(\"input\", function remove() {\n    removeHighlight();\n    highlight(false);\n    element.removeEventListener(\"input\", remove);\n  });\n}\n\nfunction removeHighlight(e) {\n  let element = document.getElementById(\"textBox\");\n  let i = element.innerHTML.replaceAll('<span style=\"color:#6ca3fe;font-weight: 600\">', \"\");\n  i = i.replaceAll('</span>', \"\");\n  element.innerHTML = i;\n  placeCaretAtEnd(document.getElementById(\"textBox\"));\n}\n;// CONCATENATED MODULE: ./public/src/components/radio/radio.js\n\n\nfunction radio_radio() {\n  let radios = common_$('[custom-radio]');\n  [].map.call(radios, function (radio) {\n    common_$(radio).on('click', handleClick);\n\n    function handleClick(_ref) {\n      let {\n        target\n      } = _ref;\n      let targ = target.closest(\"label\");\n      radio.dataset.value = targ.dataset.value;\n    }\n  });\n}\n;// CONCATENATED MODULE: ./public/src/components/multiselect/multiselect.js\n\n\nfunction multiselect() {\n  function getSelected() {\n    if (multi) {\n      let selected = [].map.call(multi, function (select) {\n        let chips = select.querySelectorAll('.chip-wrap');\n        let objs = [].map.call(chips, function (chip) {\n          return chip.dataset.id;\n        });\n        let obj = {};\n        obj.field = select.dataset.field;\n        obj.ids = objs;\n        return obj;\n      });\n    } // debugger\n\n  }\n\n  let multi = common_$('[multi-select] ');\n\n  if (multi) {\n    [].forEach.call(multi, function (select) {\n      select.addEventListener('click', handleClick, false);\n      select.addEventListener('blur', handleBlur, false);\n\n      function handleBlur(_ref) {\n        let {\n          target\n        } = _ref;\n        let show = common_$(this).find('.show');\n\n        if (show) {\n          show.classList.remove('show');\n        }\n      }\n\n      function handleClick(_ref2) {\n        let {\n          target\n        } = _ref2;\n        let multi = target.closest('[multi-select]'); // открыть выбор элементов\n\n        if (target.closest('.arrow') || ['chip-wrap'].includes(target.className)) {\n          // let multiselect = target.closest('[multi-select] ')\n          let ul = multi.querySelector('ul');\n          ul.classList.toggle('show'); // нажатие по крестику чипа\n        } else if (['del'].includes(target.className)) {\n          let id = target.closest('.chip').dataset.id;\n          toggleBackground(id);\n          let chip = target.closest('.chip');\n          chip.remove(); // выбор элемента, проверка существования чипа и его добавление\n        } else if (target.tagName.toLowerCase() === 'label') {\n          let id = target.dataset.id; // let m = target.closest('[multi-select] ')\n\n          let chips = multi.querySelectorAll('.chip');\n          let exist = [].some.call(chips, chip => {\n            return chip.dataset.id === id;\n          });\n          let wrap = common_$(multi).find('.chip-wrap');\n\n          if (!exist) {\n            target.classList.toggle('selected');\n            let chip = createChip(id);\n            wrap.append(chip);\n          } else {\n            target.classList.toggle('selected');\n            wrap.querySelector(`[data-id='${id}']`).remove();\n          }\n        }\n\n        function toggleBackground(id) {\n          // let multi = target.closest('[multi-select] ')\n          common_$(multi).find(`label[data-id='${id}']`).classList.remove('selected');\n        }\n\n        function createChip(id) {\n          let chip = document.createElement('div');\n          chip.classList.add('chip');\n          chip.innerText = target.innerText;\n          chip.dataset['id'] = id;\n          let del = document.createElement('div');\n          del.classList.add('del');\n          del.innerText = 'X';\n          chip.append(del);\n          return chip;\n        }\n      }\n    });\n  }\n}\n;// CONCATENATED MODULE: ./public/src/components/catalog-item/catalog-item.js\n\n\nfunction catalogItem() {\n  let customCatalogItem = common_$('.item_wrap')[0];\n\n  if (customCatalogItem) {\n    common_$(customCatalogItem).on('click', handleClick.bind(this));\n  }\n\n  function checkRequired() {\n    let required = common_$('[required]');\n    let errCount = 0;\n    [].forEach.call(required, function (el) {\n      if (!el.innerText) {\n        el.style.borderColor = 'red';\n        if (common_$(el).find('.error')) return;\n        let error = document.createElement('div');\n        error.innerText = 'Заполните поле';\n        error.classList.add('error');\n        el.closest('.value').appendChild(error);\n        errCount++;\n      }\n    });\n    return errCount;\n  }\n\n  async function handleClick(_ref) {\n    let {\n      target\n    } = _ref;\n    let item = customCatalogItem;\n    let modelName = item.dataset.model;\n\n    if (target.closest('.save')) {\n      if (checkRequired()) return false;\n      let model = getModel();\n      let res = await post(`/adminsc/${modelName}/updateorcreate`, { ...model\n      });\n      res = JSON.parse(res);\n\n      if (res.id) {\n        // window.location = '/adminsc/opentest/edit'\n        popup.show('Сохранено');\n      } else if (res.error) {\n        popup.show(res.error);\n      }\n    } else if (target.closest('.del')) {\n      let id = item.dataset.id;\n      let res = await post(`/adminsc/${modelName}/delete`, {\n        id\n      });\n      res = JSON.parse(res);\n\n      if (res.msg === 'ok') {\n        window.location.href = `/adminsc/${modelName}`;\n      }\n    } else if (target.classList.contains('tab')) {\n      let visibleSection = common_$(`section.show`)[0];\n      visibleSection.classList.toggle('show');\n      let section = common_$(`section[data-id='${target.dataset.id}']`)[0];\n      section.classList.toggle('show');\n      let activeTab = common_$(`.tab.active`)[0];\n      activeTab.classList.toggle('active');\n      target.classList.toggle('active');\n    }\n  }\n\n  function getModel() {\n    let fields = common_$('[data-field]');\n    let obj = {}; // debugger;\n\n    [].map.call(fields, field => {\n      if (field.hasAttribute('multi-select')) {\n        let chips = field.querySelectorAll('.chip');\n        let ids = [].map.call(chips, chip => {\n          return chip.dataset.id;\n        });\n        obj[field.dataset.field] = ids.toString();\n      } else if (field.hasAttribute('custom-select')) {\n        obj[field.dataset.field] = field.dataset.value;\n      } else if (field.hasAttribute('custom-radio')) {\n        obj[field.dataset.field] = field.dataset.value;\n      } else if (field.hasAttribute('tab')) {\n        obj[field.dataset.field] = field.dataset.value;\n      } else if (field.type === 'date') {\n        obj[field.dataset.field] = field.value;\n      } else {\n        obj[field.dataset.field] = field.innerText;\n      }\n    }, obj);\n    let isTest = common_$('[data-isTest]')[0];\n\n    if (isTest) {\n      obj.isTest = +isTest.dataset.istest;\n    }\n\n    return obj;\n  }\n}\n;// CONCATENATED MODULE: ./public/src/components/tooltip/tooltip.js\n\nfunction tooltips() {\n  document.addEventListener('mouseenter', showTip, true);\n  document.addEventListener('mouseleave', hideTip, true);\n\n  function showTip(_ref) {\n    let {\n      target\n    } = _ref;\n    // debugger\n    // если у нас есть подсказка...\n    if (!target.dataset || !target.dataset.tooltip) return;\n    let tooltipHtml = target.dataset.tooltip; // ...создадим элемент для подсказки\n\n    let tooltipElem = document.createElement('div');\n    tooltipElem.className = 'tooltip';\n    tooltipElem.innerHTML = tooltipHtml;\n    document.body.append(tooltipElem); // спозиционируем его сверху от аннотируемого элемента (top-center)\n\n    let coords = target.getBoundingClientRect();\n    let left = coords.left + (target.offsetWidth - tooltipElem.offsetWidth) / 2;\n    if (left < 0) left = 0; // не заезжать за левый край окна\n\n    let top = coords.top - tooltipElem.offsetHeight - 5;\n\n    if (top < 0) {\n      // если подсказка не помещается сверху, то отображать её снизу\n      top = coords.top + target.offsetHeight + 5;\n    }\n\n    tooltipElem.style.left = left + 'px';\n    tooltipElem.style.top = top + 'px';\n  }\n\n  ;\n\n  function hideTip() {\n    let tooltips = document.querySelectorAll('.tooltip');\n\n    if (tooltips) {\n      [].forEach.call(tooltips, tip => {\n        tip.remove();\n      });\n    }\n  }\n\n  ;\n}\n;// CONCATENATED MODULE: ./public/src/Admin/admin.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncommon_$(document).ready(function () {\n  navigate(window.location.pathname);\n  radio_radio();\n  list();\n  multiselect();\n  catalogItem();\n  tooltips();\n  accordionShow();\n  testEdit(); // opentestEdit()\n\n  function navigate(str) {\n    // debugger\n    switch (true) {\n      case /\\/adminsc\\/settings/.test(str):\n      case /\\/adminsc\\/right\\/list/.test(str):\n      case /\\/adminsc\\/post\\/list/.test(str):\n      case /\\/adminsc\\/todo\\/list/.test(str):\n        rights();\n        common_$(\"[href='/adminsc/settings']\").addClass('current');\n        break;\n\n      case /\\/adminsc\\/testresult\\/results/.test(str):\n        testResults();\n        common_$(\"[href='/adminsc/test/results']\").addClass('current');\n        break;\n\n      case /\\/auth\\/profile/.test(str):\n        user();\n        break;\n\n      case /\\/adminsc\\/crm/.test(str):\n        common_$(\"[href='/adminsc/crm']\").addClass('current');\n        break;\n\n      case /\\/adminsc\\/catalog/.test(str):\n        common_$(\"[href='/adminsc/catalog']\").addClass('current');\n        break;\n\n      case /\\/adminsc\\/planning/.test(str):\n        planning();\n        common_$(\"[href='/adminsc/planning']\").addClass('current');\n        break;\n\n      case /\\/adminsc\\/test\\/pathshow/.test(str):\n      case /\\/adminsc\\/test\\/edit/.test(str):\n        common_$(\"[href='/adminsc/test/edit']\").addClass('current');\n        break;\n\n      case /\\/test/.test(str) || /\\/test\\/result/.test(str):\n        testDo();\n        common_$(\"[href='/test/do']\").addClass('current');\n        break;\n\n      case /\\/adminsc\\/Sitemap/.test(str):\n        settings();\n        common_$(\"[href='/adminsc/settings']\").addClass('current');\n        break;\n\n      default:\n        common_$(\"[href='/adminsc']\").addClass('current');\n        break;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVCx3Q0FBd0MscURBQXFEOzs7QUFHN0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7OztBQUdWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0RBQWdEOztBQUVoRDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDOztBQUUxQztBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEOztBQUVoRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFOztBQUVyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJEQUEyRDs7QUFFM0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG1GQUFtRjtBQUNuRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjs7QUFFL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksUUFBUTtBQUNwQixZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUIsWUFBWSxjQUFjO0FBQzFCOzs7QUFHQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFOztBQUVBLGdCQUFnQjs7QUFFaEIsc0NBQXNDLFlBQVk7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7O0FBRXZEO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7OztBQUcxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7OztBQUdKOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjs7QUFFM0Isa0ZBQWtGOztBQUVsRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDOzs7QUFHaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkLE1BQU07OztBQUdOO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0EsMERBQTBEOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7OztBQUdWLDZDQUE2Qzs7O0FBRzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxHQUFHOzs7QUFHWjtBQUNBLFNBQVM7OztBQUdUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU8sR0FBRzs7QUFFVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ04sR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBLGtDQUFrQzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlNQUFpTTs7QUFFak07QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDOztBQUV0QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsK0RBQStEOztBQUUvRDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DOztBQUVuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxNQUFNOzs7QUFHTjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVOzs7QUFHVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7OztBQUdSO0FBQ0E7QUFDQSxRQUFROzs7QUFHUjtBQUNBLGlFQUFpRTs7O0FBR2pFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7O0FBRTNCOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTs7O0FBR1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qjs7QUFFekI7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osVUFBVTs7O0FBR1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZOzs7QUFHWjtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCw0Q0FBNEM7O0FBRTVDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsd0NBQXdDOzs7QUFHeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsMENBQTBDO0FBQzFDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEdBQUc7OztBQUdoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxHQUFHOzs7QUFHaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHOzs7QUFHZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLE9BQU87QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsY0FBYztBQUM3QixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQzs7QUFFMUM7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksYUFBYTtBQUN6QixZQUFZLDBCQUEwQjtBQUN0Qzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUIsYUFBYTtBQUNiO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7OztBQUdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCLFlBQVksNEJBQTRCO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9DQUFvQztBQUNoRDs7O0FBR0E7QUFDQSx5RUFBeUUsYUFBYTtBQUN0RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRjtBQUNyRjs7QUFFQSx1RUFBdUU7QUFDdkU7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsYUFBYTtBQUN4Qjs7O0FBR0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1REFBdUQ7O0FBRXZEOztBQUVBO0FBQ0EsMkVBQTJFOztBQUUzRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEOztBQUV0RDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUosa0NBQWtDO0FBQ2xDLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixrREFBRTtBQUMxQixzQkFBc0Isa0RBQUU7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsOEJBQThCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPLEdBQUc7O0FBRVY7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7OztBQUdWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTs7O0FBR1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlEQUFpRDs7O0FBR2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRzs7QUFFZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxRQUFROzs7QUFHUjtBQUNBLHlCQUF5Qjs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvREFBb0Q7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLEdBQUc7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOzs7QUFHWjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQSxRQUFROzs7QUFHUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFFQUFxRTs7QUFFckUsdURBQXVEOztBQUV2RCwrRkFBK0Y7O0FBRS9GOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixhQUFhO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0Esa0JBQWtCLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsR0FBRzs7QUFFWjs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkIsWUFBWSxhQUFhO0FBQ3pCOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUEsaURBQWUsUUFBUSxFQUFDO0FBQzhDOzs7QUM1ckh0RTtBQUNBO0FBRWUsU0FBUzRCLFFBQVQsQ0FBa0JDLGlCQUFsQixFQUFxQ0MsVUFBckMsRUFBaUR6QixLQUFqRCxFQUF3RDtBQUVyRSxNQUFJMEIsU0FBUyxHQUFHckosUUFBQyxDQUFDbUosaUJBQUQsQ0FBRCxDQUFxQixDQUFyQixDQUFoQixDQUZxRSxDQUdyRTs7QUFDQSxNQUFJRSxTQUFKLEVBQWU7QUFDYjtBQUNBLFFBQUlILFFBQVEsR0FBR0QsbUJBQUEsQ0FBZ0JJLFNBQWhCLEVBQTJCO0FBQ3hDQyxNQUFBQSxTQUFTLEVBQUUsR0FENkI7QUFFeENDLE1BQUFBLEtBQUssRUFBRSxVQUFVQyxHQUFWLEVBQWU7QUFDcEIsWUFBSUMsSUFBSSxHQUFHRCxHQUFHLENBQUNFLFFBQWY7QUFDQSxZQUFJQyxJQUFJLEdBQUdILEdBQUcsQ0FBQ0ksUUFBZixDQUZvQixDQUdwQjs7QUFDQSxZQUFJSCxJQUFJLEdBQUdFLElBQVgsRUFBaUI7QUFDZnBMLFVBQUFBLElBQUksQ0FBQ2tMLElBQUQsQ0FBSjtBQUNELFNBRkQsTUFFTztBQUNMbEwsVUFBQUEsSUFBSSxDQUFDb0wsSUFBRCxDQUFKO0FBQ0Q7O0FBRUQsdUJBQWVwTCxJQUFmLENBQW9COEosaUJBQXBCLEVBQXVDO0FBQ3JDLGNBQUl3QixHQUFHLEdBQUc3SixRQUFDLENBQUNvSixVQUFELENBQVg7QUFDQSxjQUFJZCxZQUFZLEdBQUcsR0FBR3hCLEdBQUgsQ0FBT2xDLElBQVAsQ0FBWWlGLEdBQVosRUFBaUIsVUFBVWhLLEVBQVYsRUFBY2tILENBQWQsRUFBaUI7QUFDakQsZ0JBQUlBLENBQUMsR0FBRyxDQUFKLEdBQVFzQixpQkFBWixFQUErQixPQUFPeEksRUFBUDtBQUNoQyxXQUZnQixDQUFuQjtBQUtBLGNBQUkySSxRQUFRLEdBQUdGLFlBQVksQ0FBQ3hCLEdBQWIsQ0FBa0JqSCxFQUFELElBQVE7QUFDdEMsbUJBQU9BLEVBQUUsQ0FBQytHLEVBQVY7QUFDRCxXQUZjLENBQWY7QUFHQSxjQUFJekgsR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUUsWUFBV2tHLEtBQU0sT0FBbkIsRUFBMkI7QUFBQ2EsWUFBQUE7QUFBRCxXQUEzQixDQUFwQjtBQUNBckosVUFBQUEsR0FBRyxHQUFHNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQU47O0FBQ0EsY0FBSUEsR0FBRyxDQUFDc0osR0FBUixFQUFhO0FBQ1hqSixZQUFBQSxVQUFBLENBQVdMLEdBQUcsQ0FBQ3NKLEdBQWY7QUFDRDs7QUFDREgsVUFBQUEsWUFBWSxDQUFDeEIsR0FBYixDQUFpQixDQUFDakgsRUFBRCxFQUFLa0gsQ0FBTCxLQUFXO0FBQzFCL0csWUFBQUEsUUFBQyxDQUFDSCxFQUFELENBQUQsQ0FBTTRGLElBQU4sQ0FBVyxPQUFYLEVBQW9CNUcsU0FBcEIsR0FBZ0NrSSxDQUFDLEdBQUcsQ0FBcEM7QUFDRCxXQUZEO0FBR0Q7QUFDRjtBQS9CdUMsS0FBM0IsQ0FBZjtBQWlDRDtBQUVGLEM7O0FDNUNEO0FBRWUsTUFBTStDLEtBQU4sQ0FBWTtBQUV6QkMsRUFBQUEsV0FBVyxHQUFHO0FBQ1osU0FBS3BDLEtBQUwsR0FBYSxVQUFiO0FBQ0Q7O0FBRVcsUUFBTkgsTUFBTSxHQUFHO0FBQ2IsUUFBSXBJLElBQUksR0FBRzBLLEtBQUssQ0FBQ0UsV0FBTixFQUFYOztBQUNBNUssSUFBQUEsSUFBSSxDQUFDd0gsRUFBTCxHQUFVLENBQVY7QUFDQXhILElBQUFBLElBQUksQ0FBQzZLLE1BQUwsR0FBYyxDQUFkO0FBQ0E7QUFDQSxRQUFJdkksR0FBRyxHQUFJLElBQUcsS0FBS2lHLEtBQU0saUJBQXpCO0FBQ0EsUUFBSXhJLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDQyxHQUFELEVBQU10QyxJQUFOLENBQXBCO0FBQ0FELElBQUFBLEdBQUcsR0FBRyxNQUFNNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQVo7QUFDQTs7QUFDQSxRQUFJQSxHQUFKLEVBQVM7QUFDUGYsTUFBQUEsTUFBTSxDQUFDa0QsUUFBUCxDQUFnQjRJLElBQWhCLEdBQXdCLFlBQVd2QyxLQUFNLFNBQVF4SSxHQUFHLENBQUN5SCxFQUFHLEVBQXhEO0FBQ0Q7QUFDRjs7QUFFRHVELEVBQUFBLFFBQVEsR0FBRztBQUNULFdBQU87QUFDTHZELE1BQUFBLEVBQUUsRUFBRTVHLFFBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUIsQ0FBakIsRUFBb0JuQixTQUFwQixHQUFnQyxDQUQvQjtBQUVMdUwsTUFBQUEsR0FBRyxFQUFFcEssUUFBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUIsQ0FBckIsQ0FGQTtBQUdMcUssTUFBQUEsU0FBUyxFQUFFckssUUFBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJrRCxNQUg3QjtBQUlMb0gsTUFBQUEsTUFBTSxFQUFFdEssUUFBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUIsQ0FBckIsRUFBd0J1SyxzQkFKM0I7QUFLTEMsTUFBQUEsT0FBTyxFQUFFeEssUUFBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUIsQ0FBckIsRUFBd0J2QjtBQUw1QixLQUFQO0FBT0Q7O0FBR0RnTSxFQUFBQSxTQUFTLEdBQUc7QUFDVixXQUFPO0FBQ0w3RCxNQUFBQSxFQUFFLEVBQUUsQ0FBQ3hJLE1BQU0sQ0FBQ2tELFFBQVAsQ0FBZ0I0SSxJQUFoQixDQUFxQlEsS0FBckIsQ0FBMkIsR0FBM0IsRUFBZ0NDLEdBQWhDLEVBREE7QUFFTC9CLE1BQUFBLFNBQVMsRUFBRTVJLFFBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0JmLElBQWhCLEVBRk47QUFHTDJMLE1BQUFBLE1BQU0sRUFBRTVLLFFBQUMsQ0FBQyxTQUFELENBQUQsQ0FBYSxDQUFiLENBSEg7QUFJTDRGLE1BQUFBLE1BQU0sRUFBRTVGLFFBQUMsQ0FBQyxRQUFELENBQUQsQ0FBWTZLLGtCQUFaO0FBSkgsS0FBUDtBQU1EOztBQUdEakUsRUFBQUEsRUFBRSxHQUFHO0FBQ0gsV0FBT0EsRUFBRSxJQUFJNUcsUUFBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQixDQUFoQixFQUFtQm9ILE9BQW5CLENBQTJCMEQsTUFBeEM7QUFDRDs7QUFHREMsRUFBQUEsUUFBUSxHQUFHO0FBQ1QsUUFBSUMsY0FBYyxHQUFHaEwsUUFBQyxDQUFDLFdBQUQsQ0FBRCxDQUFla0QsTUFBcEM7QUFDQSxRQUFJOEgsY0FBSixFQUNFLE9BQU9BLGNBQVA7QUFDRixXQUFPLEtBQVA7QUFDRDs7QUFHZ0IsUUFBWEMsV0FBVyxHQUFHO0FBQ2xCLFFBQUlDLFNBQVMsR0FBR3BCLEtBQUssQ0FBQ0UsV0FBTixFQUFoQjs7QUFDQWtCLElBQUFBLFNBQVMsQ0FBQ3RFLEVBQVYsR0FBZSxDQUFmO0FBQ0FzRSxJQUFBQSxTQUFTLENBQUNqQixNQUFWLEdBQW1CLENBQW5CO0FBQ0EsUUFBSXZJLEdBQUcsR0FBSSxZQUFXaUcsS0FBTSxTQUE1QjtBQUNBLFFBQUl4SSxHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FBQ0MsR0FBRCxFQUFNd0osU0FBTixDQUFwQjtBQUNBL0wsSUFBQUEsR0FBRyxHQUFHLE1BQU01QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBWjs7QUFDQSxRQUFJQSxHQUFKLEVBQVM7QUFDUGYsTUFBQUEsTUFBTSxDQUFDa0QsUUFBUCxDQUFnQjRJLElBQWhCLEdBQXdCLFlBQVd2QyxLQUFNLFNBQVF4SSxHQUFHLENBQUN5SCxFQUFKLEdBQVMsQ0FBRSxFQUE1RDtBQUNEO0FBQ0Y7O0FBR0R1RSxFQUFBQSxJQUFJLEdBQUc7QUFDTCxXQUFPbkwsUUFBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQixDQUFoQixFQUFtQm5CLFNBQTFCO0FBQ0Q7O0FBSUR1TSxFQUFBQSx5QkFBeUIsQ0FBQ3hLLFNBQUQsRUFBWTtBQUVuQyxRQUFJeUssTUFBTSxHQUFHckwsUUFBQyxDQUFFLGVBQWNZLFNBQVUsR0FBMUIsQ0FBRCxDQUErQixDQUEvQixDQUFiO0FBQ0EsUUFBSTBLLFFBQVEsR0FBRyxDQUFDLEdBQUdELE1BQU0sQ0FBQ2pJLE9BQVgsRUFBb0JXLE1BQXBCLENBQTRCd0gsR0FBRCxJQUFTQSxHQUFHLENBQUNELFFBQXhDLENBQWY7O0FBQ0EsUUFBSUEsUUFBSixFQUFjO0FBQ1osYUFBTyxDQUFDQSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVkzTSxLQUFwQjtBQUNEO0FBQ0Y7O0FBR0RxTCxFQUFBQSxXQUFXLEdBQUc7QUFDWixRQUFJckMsS0FBSyxHQUFHO0FBQ1ZmLE1BQUFBLEVBQUUsRUFBRSxDQUFDeEksTUFBTSxDQUFDa0QsUUFBUCxDQUFnQjRJLElBQWhCLENBQXFCUSxLQUFyQixDQUEyQixHQUEzQixFQUFnQ0MsR0FBaEMsRUFESztBQUVWL0IsTUFBQUEsU0FBUyxFQUFFNUksUUFBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQixDQUFoQixFQUFtQnJCLEtBRnBCO0FBR1ZzTCxNQUFBQSxNQUFNLEVBQUUsQ0FBQ2pLLFFBQUMsQ0FBQyxVQUFELENBQUQsQ0FBYyxDQUFkLEVBQWlCaUMsWUFBakIsQ0FBOEIsUUFBOUI7QUFIQyxLQUFaO0FBTUEsUUFBSXVKLE1BQU0sR0FBR3hMLFFBQUMsQ0FBQyxnQkFBRCxDQUFkO0FBQ0EsT0FBR3lELE9BQUgsQ0FBV21CLElBQVgsQ0FBZ0I0RyxNQUFoQixFQUF3QixVQUFVQyxLQUFWLEVBQWlCO0FBQ3ZDOUQsTUFBQUEsS0FBSyxDQUFDOEQsS0FBSyxDQUFDckUsT0FBTixDQUFjLE9BQWQsQ0FBRCxDQUFMLEdBQWdDcUUsS0FBSyxDQUFDckUsT0FBTixDQUFjLElBQWQsQ0FBaEM7QUFDRCxLQUZEO0FBR0EsV0FBT08sS0FBUDtBQUNEOztBQUVXLFFBQU4rRCxNQUFNLEdBQUc7QUFDYixRQUFJL0QsS0FBSyxHQUFHbUMsS0FBSyxDQUFDRSxXQUFOLEVBQVo7O0FBQ0EsUUFBSXRJLEdBQUcsR0FBSSxZQUFXaUcsS0FBTSxXQUFVQSxLQUFLLENBQUNmLEVBQUcsRUFBL0M7QUFDQSxRQUFJekgsR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUNDLEdBQUQsRUFBTWlHLEtBQU4sQ0FBcEI7QUFDQXhJLElBQUFBLEdBQUcsR0FBRyxNQUFNNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQVo7O0FBQ0EsUUFBSUEsR0FBSixFQUFTO0FBQ1BmLE1BQUFBLE1BQU0sQ0FBQ2tELFFBQVAsQ0FBZ0I0SSxJQUFoQixHQUF3QixZQUFXdkMsS0FBTSxTQUFRQSxLQUFLLENBQUNmLEVBQUcsRUFBMUQ7QUFDRDtBQUNGOztBQUdRLFFBQUhtQyxHQUFHLEdBQUc7QUFDVixRQUFJZSxLQUFLLENBQUNpQixRQUFOLEVBQUosRUFBc0I7QUFDcEJ2TCxNQUFBQSxVQUFBLENBQVcsb0NBQVg7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJb0gsRUFBRSxHQUFHa0QsS0FBSyxDQUFDbEQsRUFBTixFQUFUOztBQUNBLFFBQUl6SCxHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FBQywwQkFBRCxFQUE2QjtBQUFDbUYsTUFBQUE7QUFBRCxLQUE3QixDQUFwQjtBQUNBekgsSUFBQUEsR0FBRyxHQUFHLE1BQU01QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBWjs7QUFDQSxRQUFJQSxHQUFHLENBQUN3TSxRQUFSLEVBQWtCO0FBQ2hCbk0sTUFBQUEsVUFBQSxDQUFXLG1FQUFYO0FBQ0FwQyxNQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNmZ0IsUUFBQUEsTUFBTSxDQUFDa0QsUUFBUCxHQUFtQixZQUFXcUcsS0FBTSxXQUFwQztBQUNELE9BRlMsRUFFUCxJQUZPLENBQVY7QUFHRCxLQUxELE1BS087QUFDTHZKLE1BQUFBLE1BQU0sQ0FBQ2tELFFBQVAsR0FBbUIsWUFBV3FHLEtBQU0sV0FBcEM7QUFDRDtBQUVGOztBQTlId0IsQzs7QUNGM0I7QUFFTyxJQUFJaUUsT0FBTyxHQUFHO0FBRW5CLFFBQU1wRSxNQUFOLENBQWFxRSxNQUFiLEVBQXFCO0FBRW5CLFFBQUk3RCxRQUFRLEdBQUc2RCxNQUFNLENBQUNuTCxPQUFQLENBQWUsZ0JBQWYsQ0FBZjtBQUNBLFFBQUlvTCxlQUFlLEdBQUc5RCxRQUFRLENBQUNwQixFQUEvQjtBQUNBLFFBQUlySSxJQUFJLEdBQUd5SixRQUFRLENBQUNoRSxnQkFBVCxDQUEwQixTQUExQixFQUFxQ2QsTUFBckMsR0FBOEMsQ0FBekQ7QUFDQSxRQUFJL0QsR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUMsNEJBQUQsRUFDbEI7QUFBQ3FLLE1BQUFBLGVBQUQ7QUFBa0J2TixNQUFBQTtBQUFsQixLQURrQixDQUFwQjtBQUVBWSxJQUFBQSxHQUFHLEdBQUc1QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBTjtBQUNBLFFBQUl5SCxFQUFFLEdBQUd6SCxHQUFHLENBQUN5SCxFQUFiOztBQUNBLFFBQUlBLEVBQUosRUFBUTtBQUNOLFVBQUltRixJQUFJLEdBQUc1TSxHQUFHLENBQUM0TSxJQUFmO0FBQ0FGLE1BQUFBLE1BQU0sQ0FBQ0csa0JBQVAsQ0FBMEIsYUFBMUIsRUFBeUNELElBQXpDO0FBQ0QsS0FIRCxNQUdPO0FBQ0x2TSxNQUFBQSxVQUFBLENBQVcsV0FBWDtBQUNEO0FBQ0YsR0FqQmtCOztBQW1CbkIsUUFBTXVKLEdBQU4sQ0FBVXZJLE1BQVYsRUFBa0I7QUFDaEIsUUFBSXlMLFVBQVUsR0FBR3pMLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLFNBQWYsQ0FBakI7QUFDQSxRQUFJLENBQUN1TCxVQUFMLEVBQWlCLE9BQU8sS0FBUDs7QUFDakIsUUFBSWhGLE9BQU8sQ0FBQyxxQkFBRCxDQUFYLEVBQW9DO0FBQ2xDLFVBQUltQixNQUFNLEdBQUc2RCxVQUFVLENBQUN2TCxPQUFYLENBQW1CLFNBQW5CLENBQWI7QUFDQSxVQUFJa0csRUFBRSxHQUFHLENBQUN3QixNQUFNLENBQUNoQixPQUFQLENBQWUsVUFBZixDQUFWO0FBQ0EsVUFBSWpJLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDLG9CQUFELEVBQXVCO0FBQUNtRixRQUFBQTtBQUFELE9BQXZCLENBQXBCO0FBQ0F6SCxNQUFBQSxHQUFHLEdBQUc1QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBTjs7QUFDQSxVQUFJQSxHQUFHLENBQUNzSixHQUFKLEtBQVksSUFBaEIsRUFBc0I7QUFDcEJMLFFBQUFBLE1BQU0sQ0FBQy9ILE1BQVA7QUFDQWIsUUFBQUEsVUFBQSxDQUFXLGNBQVg7QUFDRDtBQUNGO0FBQ0Y7O0FBaENrQixDQUFkLEM7O0FDRlA7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBLElBQUkwTSxZQUFZLEdBQUdsTSxRQUFDLENBQUMsd0JBQUQsQ0FBRCxDQUE0QixDQUE1QixDQUFuQjs7QUFDQSxJQUFJa00sWUFBSixFQUFrQjtBQUNoQmhELEVBQUFBLFFBQVEsQ0FBQyxtQ0FBRCxFQUNOLHVDQURNLEVBRU4sY0FGTSxDQUFSO0FBS0FnRCxFQUFBQSxZQUFZLENBQUNqTSxnQkFBYixDQUE4QixPQUE5QixFQUNFLFFBQWM7QUFBQSxRQUFiO0FBQUNPLE1BQUFBO0FBQUQsS0FBYTtBQUNaLFVBQU1wQixJQUFJLEdBQUcsSUFBSTBLLEtBQUosRUFBYjs7QUFDQSxZQUFRLElBQVI7QUFDRSxXQUFLdEosTUFBTSxDQUFDSixTQUFQLENBQWlCSyxRQUFqQixDQUEwQixtQkFBMUIsQ0FBTDtBQUFxRDtBQUNuRHJCLFVBQUFBLElBQUksQ0FBQ3NNLE1BQUw7QUFDQTtBQUNEOztBQUNELFdBQUtsTCxNQUFNLENBQUNKLFNBQVAsQ0FBaUJLLFFBQWpCLENBQTBCLGNBQTFCLENBQUw7QUFBZ0Q7QUFDOUNyQixVQUFBQSxJQUFJLENBQUNzTSxNQUFMO0FBQ0E7QUFDRDs7QUFDRCxXQUFLbEwsTUFBTSxDQUFDSixTQUFQLENBQWlCSyxRQUFqQixDQUEwQixZQUExQixDQUFMO0FBQThDO0FBQzVDckIsVUFBQUEsSUFBSSxDQUFDc00sTUFBTDtBQUNBO0FBQ0Q7O0FBQ0QsV0FBS2xMLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsY0FBMUIsQ0FBTDtBQUFnRDtBQUM5Q3JCLFVBQUFBLElBQUksQ0FBQzRILE1BQUw7QUFDQTtBQUNEOztBQUNELFdBQUt4RyxNQUFNLENBQUNKLFNBQVAsQ0FBaUJLLFFBQWpCLENBQTBCLG1CQUExQixDQUFMO0FBQXFEO0FBQ25EckIsVUFBQUEsSUFBSSxDQUFDNkwsV0FBTDtBQUNBO0FBQ0Q7O0FBQ0QsV0FBS3pLLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsY0FBMUIsQ0FBTDtBQUFnRDtBQUM5Q3JCLFVBQUFBLElBQUksQ0FBQ29JLE1BQUw7QUFDQTtBQUNEO0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsV0FBSyxDQUFDLENBQUNoSCxNQUFNLENBQUNFLE9BQVAsQ0FBZSx5QkFBZixDQUFQO0FBQWtEO0FBQ2hEc0ksVUFBQUEseUJBQUEsQ0FBMEJ4SSxNQUExQjs7QUFDQTtBQUNEOztBQUNELFdBQUssQ0FBQyxDQUFDQSxNQUFNLENBQUNFLE9BQVAsQ0FBZSxtQkFBZixDQUFQO0FBQTRDO0FBQzFDc0ksVUFBQUEsaUJBQUEsQ0FBa0J4SSxNQUFsQjs7QUFDQTtBQUNEOztBQUNELFdBQUtBLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIseUJBQTFCLENBQUw7QUFBMkQ7QUFDekR1SSxVQUFBQSxvQkFBQSxDQUFxQnhJLE1BQXJCOztBQUNBO0FBQ0Q7O0FBQ0QsV0FBSyxDQUFDLENBQUNBLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLFNBQWYsQ0FBUDtBQUFrQztBQUNoQ2tMLFVBQUFBLFdBQUEsQ0FBWXBMLE1BQVo7O0FBQ0E7QUFDRDs7QUFDRCxXQUFLQSxNQUFNLENBQUNKLFNBQVAsQ0FBaUJLLFFBQWpCLENBQTBCLHVCQUExQixDQUFMO0FBQXlEO0FBQ3ZEbUwsVUFBQUEsY0FBQSxDQUFlcEwsTUFBZjs7QUFDQTtBQUNEOztBQUVELFdBQUksQ0FBQyxDQUFDQSxNQUFNLENBQUNFLE9BQVAsQ0FBZSwrQkFBZixDQUFOO0FBQXVEO0FBQ3JEc0ksVUFBQUEsMEJBQUEsQ0FBMkJ4SSxNQUEzQjs7QUFDQTtBQUNEO0FBdkRIO0FBMERELEdBN0RIOztBQWdFQSxNQUFJMkwsV0FBVyxHQUFHLHVCQUEwQjtBQUFBLFFBQVY7QUFBQzNMLE1BQUFBO0FBQUQsS0FBVTs7QUFFMUMsUUFBSUEsTUFBTSxDQUFDSixTQUFQLENBQWlCSyxRQUFqQixDQUEwQixNQUExQixDQUFKLEVBQXVDO0FBQ3JDLFVBQUkySCxNQUFNLEdBQUc1SCxNQUFNLENBQUNFLE9BQVAsQ0FBZSxTQUFmLENBQWI7O0FBQ0EsVUFBSTBILE1BQUosRUFBWTtBQUNWLFlBQUl4QixFQUFFLEdBQUd3QixNQUFNLENBQUNoQixPQUFQLENBQWVnRixRQUF4QjtBQUNBLFlBQUlOLGVBQWUsR0FBR3RMLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLGdCQUFmLEVBQWlDa0csRUFBdkQ7QUFDQXdCLFFBQUFBLE1BQU0sR0FBRzVILE1BQU0sQ0FBQzNCLFNBQWhCLENBSFUsQ0FJVjs7QUFDQSxZQUFJTSxHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FBQyxvQ0FBRCxFQUNsQjtBQUFDbUYsVUFBQUEsRUFBRDtBQUFLd0IsVUFBQUEsTUFBTDtBQUFZMEQsVUFBQUE7QUFBWixTQURrQixDQUFwQjtBQUVBM00sUUFBQUEsR0FBRyxHQUFHNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQU47O0FBQ0EsWUFBSUEsR0FBRyxDQUFDc0osR0FBSixLQUFVLElBQWQsRUFBbUI7QUFDakJqSixVQUFBQSxVQUFBLENBQVcsVUFBWDtBQUNEO0FBQ0YsT0FYRCxNQVdPO0FBQ0wsWUFBSW9ILEVBQUUsR0FBR3BHLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLGdCQUFmLEVBQWlDa0csRUFBMUM7QUFDQSxZQUFJb0IsUUFBUSxHQUFHeEgsTUFBTSxDQUFDM0IsU0FBdEI7QUFDQSxZQUFJTSxHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FBQyxzQ0FBRCxFQUNsQjtBQUFDbUYsVUFBQUEsRUFBRDtBQUFLb0IsVUFBQUE7QUFBTCxTQURrQixDQUFwQjtBQUVBN0ksUUFBQUEsR0FBRyxHQUFHLE1BQU01QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBWjs7QUFDQSxZQUFJQSxHQUFHLENBQUNzSixHQUFSLEVBQVk7QUFDVmpKLFVBQUFBLFVBQUEsQ0FBV0wsR0FBRyxDQUFDc0osR0FBZjtBQUNEO0FBQ0Y7QUFFRjtBQUVGLEdBNUJEOztBQThCQSxNQUFJNEQsY0FBYyxHQUFHelAsUUFBUSxDQUFDdVAsV0FBRCxDQUE3QjtBQUNBbk0sRUFBQUEsUUFBQyxDQUFDa00sWUFBRCxDQUFELENBQWdCakksRUFBaEIsQ0FBbUIsT0FBbkIsRUFBNEJvSSxjQUE1QjtBQUdELEM7O0FDMUhEO0FBRU8sSUFBSVQsYUFBTyxHQUFHO0FBRW5CL0wsRUFBQUEsRUFBRSxFQUFHeU0sVUFBRCxJQUFnQjtBQUNsQixRQUFJeEQsT0FBTyxHQUFHd0QsVUFBVSxDQUFDQyxVQUFYLENBQXNCdkksZ0JBQXRCLENBQXVDLFNBQXZDLENBQWQ7QUFDQSxRQUFJd0ksU0FBUyxHQUFHLENBQWhCOztBQUNBLFFBQUkxRCxPQUFPLENBQUM1RixNQUFaLEVBQW9CO0FBQ2xCc0osTUFBQUEsU0FBUyxHQUFHLENBQUN4TSxRQUFDLENBQUM4SSxPQUFPLENBQUNBLE9BQU8sQ0FBQzVGLE1BQVIsR0FBaUIsQ0FBbEIsQ0FBUixDQUFELENBQStCdUMsSUFBL0IsQ0FBb0MsT0FBcEMsRUFBNkM1RyxTQUExRDtBQUNEOztBQUNELFFBQUlnQixFQUFFLEdBQUdHLFFBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCeUYsSUFBckIsQ0FBMEIsU0FBMUIsRUFBcUN5QyxTQUFyQyxDQUErQyxJQUEvQyxDQUFUO0FBQ0FySSxJQUFBQSxFQUFFLENBQUNPLFNBQUgsQ0FBYUUsR0FBYixDQUFpQixRQUFqQjtBQUNBVCxJQUFBQSxFQUFFLENBQUNPLFNBQUgsQ0FBYUMsTUFBYixDQUFvQixnQkFBcEI7QUFDQSxXQUFPO0FBQ0xSLE1BQUFBLEVBQUUsRUFBRUEsRUFEQztBQUVMK0csTUFBQUEsRUFBRSxFQUFFLEtBRkM7QUFHTDZGLE1BQUFBLElBQUksRUFBRSxDQUFDSCxVQUFVLENBQUM1TCxPQUFYLENBQW1CLGdCQUFuQixFQUFxQ2tHLEVBSHZDO0FBSUw4RixNQUFBQSxhQUFhLEVBQUVGLFNBSlY7QUFLTEcsTUFBQUEsU0FBUyxFQUFFN0QsT0FBTyxDQUFDNUYsTUFMZDtBQU1MM0UsTUFBQUEsSUFBSSxFQUFFeUIsUUFBQyxDQUFDSCxFQUFELENBQUQsQ0FBTTRGLElBQU4sQ0FBVyxPQUFYLENBTkQ7QUFPTHBDLE1BQUFBLE9BQU8sRUFBRXJELFFBQUMsQ0FBQ0gsRUFBRCxDQUFELENBQU00RixJQUFOLENBQVcsT0FBWCxDQVBKO0FBUUx4RyxNQUFBQSxJQUFJLEVBQUVlLFFBQUMsQ0FBQ0gsRUFBRCxDQUFELENBQU00RixJQUFOLENBQVcsT0FBWCxDQVJEO0FBU0x1QixNQUFBQSxNQUFNLEVBQUVoSCxRQUFDLENBQUNBLFFBQUMsQ0FBQ0gsRUFBRCxDQUFELENBQU00RixJQUFOLENBQVcsU0FBWCxDQUFELENBQUQsQ0FBeUJ4QixFQUF6QixDQUE0QixPQUE1QixFQUFxQyxZQUFZO0FBQ3ZEMkgsUUFBQUEsYUFBTyxDQUFDN0MsR0FBUixDQUFZLElBQVo7QUFDRCxPQUZPO0FBVEgsS0FBUDtBQWFELEdBeEJrQjs7QUF5Qm5CNkQsRUFBQUEsaUJBQWlCLENBQUMvTSxFQUFELEVBQUs7QUFDcEIsV0FBTztBQUNMdUksTUFBQUEsTUFBTSxFQUFFLEVBREg7QUFFTHlFLE1BQUFBLGVBQWUsRUFBRWhOLEVBQUUsQ0FBQzRNLElBRmY7QUFHTEssTUFBQUEsY0FBYyxFQUFFLENBSFg7QUFJTEMsTUFBQUEsSUFBSSxFQUFFO0FBSkQsS0FBUDtBQU1ELEdBaENrQjs7QUFrQ25CLFFBQU12RixNQUFOLENBQWFxRSxNQUFiLEVBQXFCO0FBQ25CO0FBQ0EsUUFBSW1CLElBQUksR0FBRyxNQUFNQyxjQUFjLENBQUNwQixNQUFELENBQS9CO0FBQ0FwTSxJQUFBQSxJQUFJLENBQUN1TixJQUFELENBQUo7O0FBRUEsbUJBQWVDLGNBQWYsQ0FBOEJwQixNQUE5QixFQUFzQztBQUNwQyxVQUFJcUIsS0FBSyxHQUFHdEIsYUFBTyxDQUFDZ0IsaUJBQVIsQ0FBMEJoQixhQUFPLENBQUMvTCxFQUFSLENBQVdnTSxNQUFYLENBQTFCLENBQVo7O0FBRUEsVUFBSTFNLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDLGdCQUFELEVBQW1CeUwsS0FBbkIsQ0FBcEI7QUFDQS9OLE1BQUFBLEdBQUcsR0FBRzVCLElBQUksQ0FBQ0MsS0FBTCxDQUFXMkIsR0FBWCxDQUFOO0FBRUEsYUFBT0EsR0FBRyxDQUFDeUgsRUFBWDtBQUNEOztBQUVELGFBQVNuSCxJQUFULENBQWN1TixJQUFkLEVBQW9CO0FBQ2xCLFVBQUluTixFQUFFLEdBQUcrTCxhQUFPLENBQUMvTCxFQUFSLENBQVdnTSxNQUFYLENBQVQ7O0FBRUFoTSxNQUFBQSxFQUFFLENBQUN3RCxPQUFILENBQVdBLE9BQVgsR0FBcUIsS0FBckI7QUFDQXhELE1BQUFBLEVBQUUsQ0FBQ0EsRUFBSCxDQUFNdUgsT0FBTixDQUFjLFVBQWQsSUFBNEI0RixJQUE1QjtBQUNBbk4sTUFBQUEsRUFBRSxDQUFDWixJQUFILENBQVFKLFNBQVIsR0FBb0IsRUFBcEI7QUFDQWdCLE1BQUFBLEVBQUUsQ0FBQ3RCLElBQUgsQ0FBUU0sU0FBUixHQUFvQmdCLEVBQUUsQ0FBQzhNLFNBQUgsR0FBZSxDQUFuQztBQUVBOU0sTUFBQUEsRUFBRSxDQUFDQSxFQUFILENBQU1mLEtBQU4sQ0FBWXFPLE9BQVosR0FBc0IsTUFBdEI7QUFDQXRCLE1BQUFBLE1BQU0sQ0FBQzlELE1BQVAsQ0FBY2xJLEVBQUUsQ0FBQ0EsRUFBakI7QUFDQUEsTUFBQUEsRUFBRSxDQUFDQSxFQUFILENBQU1mLEtBQU4sQ0FBWUMsT0FBWixHQUFzQixDQUF0QjtBQUNEO0FBQ0YsR0E1RGtCOztBQThEbkIsUUFBTWdLLEdBQU4sQ0FBVXZJLE1BQVYsRUFBa0I7QUFDaEIsUUFBSXlMLFVBQVUsR0FBR3pMLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLFNBQWYsQ0FBakI7QUFDQSxRQUFJLENBQUN1TCxVQUFMLEVBQWlCLE9BQU8sS0FBUDs7QUFDakIsUUFBSWhGLE9BQU8sQ0FBQyxxQkFBRCxDQUFYLEVBQW9DO0FBQ2xDLFVBQUk5SCxHQUFHLEdBQUcsTUFBTWlPLGdCQUFnQixDQUFDbkIsVUFBRCxDQUFoQztBQUNEOztBQUVELG1CQUFlbUIsZ0JBQWYsQ0FBZ0NuQixVQUFoQyxFQUE0QztBQUUxQyxVQUFJZSxJQUFJLEdBQUcsQ0FBQ2YsVUFBVSxDQUFDdkwsT0FBWCxDQUFtQixTQUFuQixFQUE4QjBHLE9BQTlCLENBQXNDLFVBQXRDLENBQVo7QUFDQSxVQUFJakksR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUMsZ0JBQUQsRUFBbUI7QUFBQ3VMLFFBQUFBO0FBQUQsT0FBbkIsQ0FBcEI7QUFDQTdOLE1BQUFBLEdBQUcsR0FBRzVCLElBQUksQ0FBQ0MsS0FBTCxDQUFXMkIsR0FBWCxDQUFOOztBQUNBLFVBQUlBLEdBQUcsQ0FBQ3NKLEdBQUosS0FBWSxJQUFoQixFQUFzQjtBQUNwQndELFFBQUFBLFVBQVUsQ0FBQ3ZMLE9BQVgsQ0FBbUIsU0FBbkIsRUFBOEJMLE1BQTlCO0FBQ0FiLFFBQUFBLFVBQUEsQ0FBVyxjQUFYO0FBQ0Q7QUFDRjtBQUNGOztBQS9Fa0IsQ0FBZCxDOztBQ0ZQO0FBQ0E7QUFFTyxJQUFJNk4sU0FBUyxHQUFHO0FBS3JCM0UsRUFBQUEsWUFBWSxFQUFFLGdCQUFnQmxJLE1BQWhCLEVBQXdCO0FBQ3BDO0FBQ0EsUUFBSStLLEdBQUcsR0FBRy9LLE1BQU0sQ0FBQzRDLE9BQVAsQ0FBZTVDLE1BQU0sQ0FBQzhNLGFBQXRCLENBQVY7QUFDQSxRQUFJMUcsRUFBRSxHQUFHcEcsTUFBTSxDQUFDRSxPQUFQLENBQWUsZ0JBQWYsRUFBaUNrRyxFQUExQztBQUNBLFFBQUkrQixPQUFPLEdBQUc0QyxHQUFHLENBQUNuRSxPQUFKLENBQVksa0JBQVosQ0FBZDtBQUNBLFFBQUl3QixTQUFTLEdBQUcyQyxHQUFHLENBQUM1TSxLQUFwQjtBQUNBLFFBQUlRLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDLGdDQUFELEVBQW1DO0FBQUNtRixNQUFBQSxFQUFEO0FBQUsrQixNQUFBQTtBQUFMLEtBQW5DLENBQXBCO0FBQ0F4SixJQUFBQSxHQUFHLEdBQUc1QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBTjtBQUNBLFFBQUlBLEdBQUcsQ0FBQ3NKLEdBQUosS0FBWSxJQUFoQixFQUFzQixNQUFPaEwsQ0FBUDtBQUN0QixRQUFJdUssUUFBUSxHQUFHeEgsTUFBTSxDQUFDRSxPQUFQLENBQWUsZ0JBQWYsQ0FBZjtBQUNBc0gsSUFBQUEsUUFBUSxDQUFDM0gsTUFBVDtBQUNBYixJQUFBQSxVQUFBLENBQVcsaUJBQWlCb0osU0FBNUIsRUFYb0MsQ0FZcEM7QUFDRCxHQWxCb0I7QUFxQnJCMkUsRUFBQUEsT0FBTyxFQUFFLENBQUNDLE1BQUQsRUFBU3ZQLEtBQVQsS0FBbUI7QUFDMUIsUUFBSTRCLEVBQUUsR0FBRzVCLEtBQUssQ0FBQ3VDLE1BQWY7QUFDQSxRQUFJc0UsR0FBRyxHQUFHakgsUUFBUSxDQUFDZ0QsYUFBVCxDQUF1QixLQUF2QixDQUFWOztBQUVBLFFBQUkyTSxNQUFNLEtBQUssVUFBZixFQUEyQjtBQUN6QjlJLE1BQUFBLFVBQVUsQ0FBQzdFLEVBQUQsRUFBSyxXQUFMLENBQVY7QUFDRDtBQUNGLEdBNUJvQjtBQThCckI0TixFQUFBQSxTQUFTLEVBQUUsTUFBTTtBQUNmLFFBQUl6RixRQUFRLEdBQUdxRixTQUFTLENBQUN4RixlQUFWLEVBQWY7O0FBQ0EsUUFBSSxDQUFDRyxRQUFMLEVBQWU7O0FBRWYsUUFBSUwsS0FBSyxHQUFHMEYsU0FBUyxDQUFDNUMsU0FBVixDQUFvQnpDLFFBQXBCLENBQVo7O0FBQ0FMLElBQUFBLEtBQUssQ0FBQ3BKLElBQU4sQ0FBV00sU0FBWCxHQUF1QixHQUF2QjtBQUNBbUIsSUFBQUEsUUFBQyxDQUFDMkgsS0FBSyxDQUFDK0YsSUFBUCxDQUFELENBQWN6SixFQUFkLENBQWlCLE9BQWpCLEVBQTBCb0osU0FBUyxDQUFDSyxJQUFwQztBQUNBMU4sSUFBQUEsUUFBQyxDQUFDMkgsS0FBSyxDQUFDb0IsR0FBUCxDQUFELENBQWE5RSxFQUFiLENBQWdCLE9BQWhCLEVBQXlCb0osU0FBUyxDQUFDckcsTUFBbkM7QUFFQWhILElBQUFBLFFBQUMsQ0FBQ2dJLFFBQUQsQ0FBRCxDQUFZMkYsUUFBWixDQUFxQixlQUFyQjtBQUNBM04sSUFBQUEsUUFBQyxDQUFDZ0ksUUFBRCxDQUFELENBQVk0RixXQUFaLENBQXdCLGtCQUF4QjtBQUVBLFFBQUlyRixTQUFTLEdBQUd2SSxRQUFDLENBQUMsWUFBRCxDQUFELENBQWdCLENBQWhCLENBQWhCO0FBQ0F1SSxJQUFBQSxTQUFTLENBQUNzRixPQUFWLENBQWtCN0YsUUFBbEI7QUFDRCxHQTVDb0I7QUE4Q3JCSCxFQUFBQSxlQUFlLEVBQUUsTUFBTTtBQUNyQixRQUFJRyxRQUFRLEdBQUdoSSxRQUFDLENBQUMsNkNBQUQsQ0FBRCxDQUFpRCxDQUFqRCxDQUFmO0FBQ0EsUUFBSWdJLFFBQUosRUFBYyxPQUFPQSxRQUFRLENBQUNFLFNBQVQsQ0FBbUIsSUFBbkIsQ0FBUDtBQUNmLEdBakRvQjtBQW1EckJXLEVBQUFBLFdBQVcsRUFBR3JJLE1BQUQsSUFBWTtBQUN2QixRQUFJNkcsR0FBRyxHQUFHN0csTUFBTSxDQUFDRSxPQUFQLENBQWUsZ0JBQWYsQ0FBVjtBQUNBLFFBQUlvSSxPQUFPLEdBQUc5SSxRQUFDLENBQUNxSCxHQUFELENBQUQsQ0FBTzVCLElBQVAsQ0FBWSxvQkFBWixDQUFkO0FBQ0FxRCxJQUFBQSxPQUFPLENBQUMxSSxTQUFSLENBQWtCNkYsTUFBbEIsQ0FBeUIsUUFBekI7QUFDQTZDLElBQUFBLE9BQU8sQ0FBQzFJLFNBQVIsQ0FBa0I2RixNQUFsQixDQUF5QixPQUF6QjtBQUNBekYsSUFBQUEsTUFBTSxDQUFDSixTQUFQLENBQWlCNkYsTUFBakIsQ0FBd0IsUUFBeEI7QUFDRCxHQXpEb0I7QUEyRHJCd0UsRUFBQUEsU0FBUyxFQUFHNUssRUFBRCxJQUFRO0FBQ2pCLFdBQU87QUFDTCtHLE1BQUFBLEVBQUUsRUFBRSxDQUFDL0csRUFBRSxDQUFDK0csRUFESDtBQUVML0csTUFBQUEsRUFBRSxFQUFFQSxFQUZDO0FBR0x0QixNQUFBQSxJQUFJLEVBQUVzQixFQUFFLENBQUNtQyxhQUFILENBQWlCLE9BQWpCLENBSEQ7QUFJTDBMLE1BQUFBLElBQUksRUFBRTdOLEVBQUUsQ0FBQ21DLGFBQUgsQ0FBaUIsaUJBQWpCLENBSkQ7QUFLTC9DLE1BQUFBLElBQUksRUFBRVksRUFBRSxDQUFDbUMsYUFBSCxDQUFpQixpQkFBakIsQ0FMRDtBQU1MK0csTUFBQUEsR0FBRyxFQUFFbEosRUFBRSxDQUFDbUMsYUFBSCxDQUFpQixtQkFBakIsQ0FOQTtBQU9MOEwsTUFBQUEsa0JBQWtCLEVBQUVqTyxFQUFFLENBQUNtQyxhQUFILENBQWlCLHdCQUFqQixDQVBmO0FBUUwrTCxNQUFBQSxTQUFTLEVBQUUvTixRQUFDLENBQUNBLFFBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0IsQ0FBaEIsQ0FBRCxDQUFELENBQXNCeUYsSUFBdEIsQ0FBMkIsMEJBQTNCO0FBUk4sS0FBUDtBQVVELEdBdEVvQjtBQXdFckJ1RSxFQUFBQSxXQUFXLEVBQUUsTUFBTTtBQUNqQixXQUFPO0FBQ0xoQyxNQUFBQSxRQUFRLEVBQUU7QUFDUnBCLFFBQUFBLEVBQUUsRUFBRSxJQURJO0FBRVJvSCxRQUFBQSxPQUFPLEVBQUUsRUFGRDtBQUdScEksUUFBQUEsTUFBTSxFQUFFLENBQUN4SCxNQUFNLENBQUNrRCxRQUFQLENBQWdCNEksSUFBaEIsQ0FBcUJRLEtBQXJCLENBQTJCLEdBQTNCLEVBQWdDQyxHQUFoQyxFQUhEO0FBSVJwTSxRQUFBQSxJQUFJLEVBQUU4TyxTQUFTLENBQUNZLFFBQVY7QUFKRTtBQURMLEtBQVA7QUFRRCxHQWpGb0I7QUFtRnJCMUYsRUFBQUEsU0FBUyxFQUFFLE1BQU07QUFDZixXQUFPdkksUUFBQyxDQUFDLDJCQUFELENBQVIsQ0FEZSxDQUVmO0FBQ0QsR0F0Rm9CO0FBd0ZyQmtPLEVBQUFBLGNBQWMsRUFBRSxNQUFNO0FBQ3BCLFdBQU9sTyxRQUFDLENBQUMsMkJBQUQsQ0FBRCxDQUErQkgsRUFBL0IsQ0FBa0NxRCxNQUF6QztBQUNELEdBMUZvQjtBQTRGckIrSyxFQUFBQSxRQUFRLEVBQUUsTUFBTTtBQUNkLFFBQUlFLEVBQUUsR0FBR2QsU0FBUyxDQUFDOUUsU0FBVixFQUFUOztBQUNBLFFBQUlyRixNQUFNLEdBQUdpTCxFQUFFLENBQUNqTCxNQUFILEdBQVksQ0FBekI7QUFDQSxRQUFJa0wsSUFBSSxHQUFHLENBQUNmLFNBQVMsQ0FBQzVDLFNBQVYsQ0FBb0IwRCxFQUFFLENBQUNqTCxNQUFELENBQXRCLEVBQWdDM0UsSUFBaEMsQ0FBcUNNLFNBQWpEO0FBQ0EsV0FBT3VQLElBQUksR0FBRyxDQUFkO0FBQ0QsR0FqR29CO0FBbUdyQjVHLEVBQUFBLE1BQU0sRUFDSixNQUFPL0osQ0FBUCxJQUFhO0FBQ1gsUUFBSWdQLElBQUksR0FBRyxNQUFNWSxTQUFTLENBQUNKLGNBQVYsQ0FBeUJ4UCxDQUF6QixDQUFqQjs7QUFDQSxRQUFJZ1AsSUFBSixFQUFVO0FBQ1JZLE1BQUFBLFNBQVMsQ0FBQ2dCLFlBQVYsQ0FBdUI1QixJQUF2QjtBQUNEO0FBQ0YsR0F6R2tCO0FBMkdyQlEsRUFBQUEsY0FBYyxFQUNaLFlBQVk7QUFDVixRQUFJakYsUUFBUSxHQUFHcUYsU0FBUyxDQUFDckQsV0FBVixFQUFmOztBQUNBLFFBQUk3SyxHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FBQywwQkFBRCxFQUE2QjtBQUFDdUcsTUFBQUEsUUFBUSxFQUFFQSxRQUFRLENBQUNBLFFBQXBCO0FBQThCYyxNQUFBQSxPQUFPLEVBQUU7QUFBdkMsS0FBN0IsQ0FBcEI7QUFDQTNKLElBQUFBLEdBQUcsR0FBRyxNQUFNNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQVo7QUFFQSxXQUFPQSxHQUFHLENBQUN5SCxFQUFYO0FBQ0QsR0FsSGtCO0FBb0hyQnlILEVBQUFBLFlBQVksRUFDVDVCLElBQUQsSUFBVTtBQUNSLFFBQUk3RSxLQUFLLEdBQUd5RixTQUFTLENBQUN4RixlQUFWLEVBQVo7O0FBRUEsUUFBSUYsS0FBSyxHQUFHMEYsU0FBUyxDQUFDNUMsU0FBVixDQUFvQjdDLEtBQXBCLENBQVo7O0FBQ0FELElBQUFBLEtBQUssQ0FBQ3BKLElBQU4sQ0FBV00sU0FBWCxHQUF1QndPLFNBQVMsQ0FBQ1ksUUFBVixFQUF2QjtBQUNBdEcsSUFBQUEsS0FBSyxDQUFDMUksSUFBTixDQUFXSixTQUFYLEdBQXVCLEVBQXZCO0FBQ0E4SSxJQUFBQSxLQUFLLENBQUM5SCxFQUFOLENBQVMrRyxFQUFULEdBQWM2RixJQUFkO0FBRUE5RSxJQUFBQSxLQUFLLENBQUNvRyxTQUFOLENBQWdCaEcsTUFBaEIsQ0FBdUJILEtBQXZCO0FBQ0QsR0E5SGtCO0FBaUlyQjhGLEVBQUFBLElBQUksRUFDRixNQUFPbE4sTUFBUCxJQUFrQjtBQUNoQixRQUFJd0gsUUFBUSxHQUFHeEgsTUFBTSxDQUFDRSxPQUFQLENBQWUsZ0JBQWYsQ0FBZjtBQUNBLFFBQUl2QixHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FDbEIsMEJBRGtCLEVBRWxCO0FBQ0V1RyxNQUFBQSxRQUFRLEVBQUVxRixTQUFTLENBQUNULGlCQUFWLENBQTRCNUUsUUFBNUIsQ0FEWjtBQUVFYyxNQUFBQSxPQUFPLEVBQUV1RSxTQUFTLENBQUNpQixVQUFWLENBQXFCdEcsUUFBckI7QUFGWCxLQUZrQixDQUFwQjtBQU1BN0ksSUFBQUEsR0FBRyxHQUFHLE1BQU01QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBWjtBQUNBSyxJQUFBQSxVQUFBLENBQVdMLEdBQUcsQ0FBQ3NKLEdBQWY7QUFDRCxHQTVJa0I7QUE4SXJCekIsRUFBQUEsTUFBTSxFQUNKLE1BQU94RyxNQUFQLElBQWtCO0FBQ2hCLFFBQUl5RyxPQUFPLENBQUMsdUNBQUQsQ0FBWCxFQUFzRDtBQUNwRCxVQUFJd0QsU0FBUyxHQUFHNEMsU0FBUyxDQUFDNUMsU0FBVixDQUFvQmpLLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLGdCQUFmLENBQXBCLENBQWhCOztBQUNBLFVBQUlrRyxFQUFFLEdBQUc2RCxTQUFTLENBQUM3RCxFQUFuQjtBQUVBLFVBQUkySCxPQUFPLEdBQUcsTUFBTWxCLFNBQVMsQ0FBQ0QsZ0JBQVYsQ0FBMkJ4RyxFQUEzQixDQUFwQjs7QUFDQSxVQUFJMkgsT0FBSixFQUFhO0FBQ1hsQixRQUFBQSxTQUFTLENBQUNtQixjQUFWLENBQXlCL0QsU0FBekI7O0FBQ0FqTCxRQUFBQSxVQUFBLENBQVcrTyxPQUFPLENBQUM5RixHQUFuQjtBQUNEO0FBQ0Y7QUFDRixHQTFKa0I7QUE0SnJCK0YsRUFBQUEsY0FBYyxFQUNaLE1BQU8vRCxTQUFQLElBQXFCO0FBQ25CQSxJQUFBQSxTQUFTLENBQUM1SyxFQUFWLENBQWFRLE1BQWI7QUFDRCxHQS9Ka0I7QUFpS3JCK00sRUFBQUEsZ0JBQWdCLEVBQ2QsTUFBT1gsSUFBUCxJQUFnQjtBQUNkLFFBQUl0TixHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FBQyxrQkFBRCxFQUFxQjtBQUFDZ0wsTUFBQUE7QUFBRCxLQUFyQixDQUFwQjtBQUNBLFdBQU9sUCxJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBUDtBQUNELEdBcktrQjtBQXVLckJ5TixFQUFBQSxpQkFBaUIsRUFDZDVFLFFBQUQsSUFBYztBQUNaLFdBQU87QUFDTHBCLE1BQUFBLEVBQUUsRUFBRSxDQUFDb0IsUUFBUSxDQUFDcEIsRUFEVDtBQUVMaEIsTUFBQUEsTUFBTSxFQUFFLENBQUM1RixRQUFDLENBQUMsWUFBRCxDQUFELENBQWdCLENBQWhCLEVBQW1Cb0gsT0FBbkIsQ0FBMkJHLE1BRi9CO0FBR0xrSCxNQUFBQSxJQUFJLEVBQUUsRUFIRDtBQUlMVCxNQUFBQSxPQUFPLEVBQUVoTyxRQUFDLENBQUNnSSxRQUFELENBQUQsQ0FBWXZDLElBQVosQ0FBaUIsaUJBQWpCLEVBQW9DNUcsU0FKeEM7QUFLTE4sTUFBQUEsSUFBSSxFQUFFLENBQUN5QixRQUFDLENBQUNnSSxRQUFELENBQUQsQ0FBWXZDLElBQVosQ0FBaUIsT0FBakIsRUFBMEI1RztBQUw1QixLQUFQO0FBT0QsR0FoTGtCO0FBaUxyQnlQLEVBQUFBLFVBQVUsRUFDUHRHLFFBQUQsSUFBYztBQUNaLFFBQUkwRyxZQUFZLEdBQUcxRyxRQUFRLENBQUNoRSxnQkFBVCxDQUEwQixTQUExQixDQUFuQjtBQUNBLFdBQU8sQ0FBQyxHQUFHMEssWUFBSixFQUFrQjVILEdBQWxCLENBQXVCNkgsQ0FBRCxJQUFPO0FBQ2xDLGFBQU87QUFDTC9ILFFBQUFBLEVBQUUsRUFBRSxDQUFDK0gsQ0FBQyxDQUFDdkgsT0FBRixDQUFVLFVBQVYsQ0FEQTtBQUVMZ0IsUUFBQUEsTUFBTSxFQUFFdUcsQ0FBQyxDQUFDM00sYUFBRixDQUFnQixPQUFoQixFQUF5Qm5ELFNBRjVCO0FBR0xpTyxRQUFBQSxjQUFjLEVBQUUsQ0FBQzZCLENBQUMsQ0FBQzNNLGFBQUYsQ0FBZ0IsbUJBQWhCLEVBQXFDcUIsT0FIakQ7QUFJTHdKLFFBQUFBLGVBQWUsRUFBRSxDQUFDN0UsUUFBUSxDQUFDcEIsRUFKdEI7QUFLTG1HLFFBQUFBLElBQUksRUFBRTtBQUxELE9BQVA7QUFPRCxLQVJNLEVBUUovRSxRQVJJLENBQVA7QUFTRDtBQTdMa0IsQ0FBaEIsQzs7QUNIUDtBQUNBO0FBRWUsTUFBTTRHLFNBQU4sQ0FBZ0I7QUFFN0I3RSxFQUFBQSxXQUFXLENBQUNsSyxFQUFELEVBQUs7QUFFZCxRQUFJLENBQUNBLEVBQUwsRUFBUyxPQUFPLEtBQVA7QUFDVCxRQUFJQSxFQUFFLENBQUNnUCxRQUFQLEVBQWlCLE9BQU8sS0FBUDtBQUVqQixTQUFLQyxLQUFMLEdBQWFqUCxFQUFFLENBQUNpUCxLQUFILElBQVksRUFBekI7QUFDQSxTQUFLckQsS0FBTCxHQUFhNUwsRUFBRSxDQUFDdUgsT0FBSCxDQUFXLE9BQVgsQ0FBYjtBQUNBLFNBQUtoRSxPQUFMLEdBQWUyTCxtQkFBbUIsQ0FBQ2xQLEVBQUUsQ0FBQ21FLGdCQUFILENBQW9CLFFBQXBCLENBQUQsQ0FBbEM7QUFFQSxTQUFLZ0wsR0FBTCxHQUFXblIsUUFBUSxDQUFDZ0QsYUFBVCxDQUF1QixLQUF2QixDQUFYO0FBQ0EsUUFBSWhCLEVBQUUsQ0FBQ2UsU0FBUCxFQUFrQixLQUFLb08sR0FBTCxDQUFTNU8sU0FBVCxDQUFtQkUsR0FBbkIsQ0FBdUJULEVBQUUsQ0FBQ2UsU0FBMUI7QUFFbEIsU0FBS3FPLEtBQUwsR0FBYXBSLFFBQVEsQ0FBQ2dELGFBQVQsQ0FBdUIsTUFBdkIsQ0FBYjtBQUNBLFNBQUtxTyxLQUFMLEdBQWFyUixRQUFRLENBQUNnRCxhQUFULENBQXVCLEtBQXZCLENBQWI7QUFDQSxTQUFLc08sS0FBTCxHQUFhdFIsUUFBUSxDQUFDZ0QsYUFBVCxDQUF1QixLQUF2QixDQUFiO0FBRUEsU0FBSzJFLEVBQUwsR0FBVTNILFFBQVEsQ0FBQ2dELGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVjtBQUNBdU8sSUFBQUEsS0FBSyxDQUFDLElBQUQsQ0FBTDtBQUNBdlAsSUFBQUEsRUFBRSxDQUFDd1AsS0FBSCxDQUFTLEtBQUtMLEdBQWQsRUFsQmMsQ0FtQmQ7O0FBQ0FuUCxJQUFBQSxFQUFFLENBQUNRLE1BQUg7QUFDRDs7QUFFaUIsTUFBZGlQLGNBQWMsR0FBRztBQUNuQixXQUFPLEtBQUtsTSxPQUFMLENBQWFxQyxJQUFiLENBQWtCOEosTUFBTSxJQUFJQSxNQUFNLENBQUNqRSxRQUFuQyxDQUFQO0FBQ0Q7O0FBRXNCLE1BQW5Ca0UsbUJBQW1CLEdBQUc7QUFDeEIsV0FBTyxLQUFLcE0sT0FBTCxDQUFhcU0sT0FBYixDQUFxQixLQUFLSCxjQUExQixDQUFQO0FBQ0Q7O0FBRURJLEVBQUFBLFdBQVcsQ0FBQy9RLEtBQUQsRUFBUTtBQUNqQixVQUFNZ1IsSUFBSSxHQUFHLEtBQUt2TSxPQUFMLENBQWFxQyxJQUFiLENBQWtCOEosTUFBTSxJQUFJO0FBQ3ZDLGFBQU9BLE1BQU0sQ0FBQzVRLEtBQVAsS0FBaUJBLEtBQXhCO0FBQ0QsS0FGWSxDQUFiO0FBR0EsVUFBTWlSLElBQUksR0FBRyxLQUFLTixjQUFsQjtBQUNBTSxJQUFBQSxJQUFJLENBQUN0RSxRQUFMLEdBQWdCLEtBQWhCLENBTGlCLENBTWpCOztBQUVBcUUsSUFBQUEsSUFBSSxDQUFDckUsUUFBTCxHQUFnQixJQUFoQixDQVJpQixDQVNqQjs7QUFFQSxTQUFLNkQsS0FBTCxDQUFXdFEsU0FBWCxHQUF1QjhRLElBQUksQ0FBQ1YsS0FBNUI7QUFDQSxTQUFLQSxLQUFMLENBQVd2TyxPQUFYLENBQW1CLGlCQUFuQixFQUFzQzBHLE9BQXRDLENBQThDLElBQTlDLElBQXNEdUksSUFBSSxDQUFDaFIsS0FBM0Q7QUFDQSxTQUFLc1EsS0FBTCxDQUFXdk8sT0FBWCxDQUFtQixpQkFBbkIsRUFBc0MwRyxPQUF0QyxDQUE4QyxPQUE5QyxJQUF5RHVJLElBQUksQ0FBQ2hSLEtBQTlEO0FBQ0EsU0FBSzZHLEVBQUwsQ0FDR3hELGFBREgsQ0FDa0IsZ0JBQWU0TixJQUFJLENBQUNqUixLQUFNLElBRDVDLEVBRUd5QixTQUZILENBRWFDLE1BRmIsQ0FFb0IsVUFGcEI7QUFHQSxVQUFNd1AsZ0JBQWdCLEdBQUcsS0FBS3JLLEVBQUwsQ0FBUXhELGFBQVIsQ0FDdEIsZ0JBQWUyTixJQUFJLENBQUNoUixLQUFNLElBREosQ0FBekI7QUFHQWtSLElBQUFBLGdCQUFnQixDQUFDelAsU0FBakIsQ0FBMkJFLEdBQTNCLENBQStCLFVBQS9CO0FBQ0F1UCxJQUFBQSxnQkFBZ0IsQ0FBQ0MsY0FBakIsQ0FBZ0M7QUFBQ0MsTUFBQUEsS0FBSyxFQUFFO0FBQVIsS0FBaEM7QUFDRDs7QUF2RDRCOztBQTBEL0IsU0FBU1gsS0FBVCxDQUFlL0QsTUFBZixFQUF1QjtBQUVyQixNQUFJQSxNQUFNLENBQUN5RCxLQUFYLEVBQWtCO0FBQ2hCekQsSUFBQUEsTUFBTSxDQUFDMkUsWUFBUCxHQUFzQm5TLFFBQVEsQ0FBQ2dELGFBQVQsQ0FBdUIsS0FBdkIsQ0FBdEI7QUFDQXdLLElBQUFBLE1BQU0sQ0FBQzJFLFlBQVAsQ0FBb0I1UCxTQUFwQixDQUE4QkUsR0FBOUIsQ0FBa0MsT0FBbEM7QUFDQStLLElBQUFBLE1BQU0sQ0FBQzJFLFlBQVAsQ0FBb0JuUixTQUFwQixHQUFnQ3dNLE1BQU0sQ0FBQ3lELEtBQXZDO0FBQ0F6RCxJQUFBQSxNQUFNLENBQUMyRCxHQUFQLENBQVdqUCxNQUFYLENBQWtCc0wsTUFBTSxDQUFDMkUsWUFBekI7QUFDRCxHQVBvQixDQVNyQjs7O0FBQ0EzRSxFQUFBQSxNQUFNLENBQUMyRCxHQUFQLENBQVcvTCxZQUFYLENBQXdCLGVBQXhCLEVBQXdDLEVBQXhDO0FBQ0EsTUFBR29JLE1BQU0sQ0FBQ0ksS0FBVixFQUFnQkosTUFBTSxDQUFDMkQsR0FBUCxDQUFXNUgsT0FBWCxDQUFtQixPQUFuQixJQUE4QmlFLE1BQU0sQ0FBQ0ksS0FBckM7QUFDaEJKLEVBQUFBLE1BQU0sQ0FBQzJELEdBQVAsQ0FBVzVILE9BQVgsQ0FBbUIsSUFBbkIsSUFBMkJpRSxNQUFNLENBQUNpRSxjQUFQLENBQXNCM1EsS0FBakQ7QUFDQTBNLEVBQUFBLE1BQU0sQ0FBQzJELEdBQVAsQ0FBVzVILE9BQVgsQ0FBbUIsT0FBbkIsSUFBOEJpRSxNQUFNLENBQUNpRSxjQUFQLENBQXNCM1EsS0FBcEQ7QUFDQTBNLEVBQUFBLE1BQU0sQ0FBQzJELEdBQVAsQ0FBV2lCLFFBQVgsR0FBc0IsQ0FBdEIsQ0FkcUIsQ0FnQnJCOztBQUNBNUUsRUFBQUEsTUFBTSxDQUFDMkQsR0FBUCxDQUFXalAsTUFBWCxDQUFrQnNMLE1BQU0sQ0FBQzRELEtBQXpCO0FBRUE1RCxFQUFBQSxNQUFNLENBQUM4RCxLQUFQLENBQWEvTyxTQUFiLENBQXVCRSxHQUF2QixDQUEyQixPQUEzQjtBQUNBK0ssRUFBQUEsTUFBTSxDQUFDOEQsS0FBUCxDQUFhdFEsU0FBYixHQUF5QndNLE1BQU0sQ0FBQ2lFLGNBQVAsQ0FBc0JMLEtBQS9DO0FBQ0E1RCxFQUFBQSxNQUFNLENBQUM0RCxLQUFQLENBQWFsUCxNQUFiLENBQW9Cc0wsTUFBTSxDQUFDOEQsS0FBM0I7QUFFQTlELEVBQUFBLE1BQU0sQ0FBQzZELEtBQVAsQ0FBYTlPLFNBQWIsQ0FBdUJFLEdBQXZCLENBQTJCLE9BQTNCO0FBQ0ErSyxFQUFBQSxNQUFNLENBQUM0RCxLQUFQLENBQWFsUCxNQUFiLENBQW9Cc0wsTUFBTSxDQUFDNkQsS0FBM0I7QUFFQTdELEVBQUFBLE1BQU0sQ0FBQzdGLEVBQVAsQ0FBVXBGLFNBQVYsQ0FBb0JFLEdBQXBCLENBQXdCLFNBQXhCO0FBQ0ErSyxFQUFBQSxNQUFNLENBQUNqSSxPQUFQLENBQWVLLE9BQWYsQ0FBdUI4TCxNQUFNLElBQUk7QUFDL0JXLElBQUFBLFNBQVMsQ0FBQ1gsTUFBRCxDQUFUO0FBQ0QsR0FGRDs7QUFJQSxXQUFTVyxTQUFULENBQW1CWCxNQUFuQixFQUEyQjtBQUN6QixVQUFNakssRUFBRSxHQUFHekgsUUFBUSxDQUFDZ0QsYUFBVCxDQUF1QixJQUF2QixDQUFYO0FBQ0F5RSxJQUFBQSxFQUFFLENBQUN6RyxTQUFILEdBQWUwUSxNQUFNLENBQUNOLEtBQXRCO0FBQ0EzSixJQUFBQSxFQUFFLENBQUM4QixPQUFILENBQVd6SSxLQUFYLEdBQW1CNFEsTUFBTSxDQUFDNVEsS0FBMUI7QUFDQTJHLElBQUFBLEVBQUUsQ0FBQ2xGLFNBQUgsQ0FBYTZGLE1BQWIsQ0FBb0IsVUFBcEIsRUFBZ0NzSixNQUFNLENBQUNqRSxRQUF2QztBQUNBaEcsSUFBQUEsRUFBRSxDQUFDckYsZ0JBQUgsQ0FBb0IsT0FBcEIsRUFBNkIsTUFBTTtBQUNqQ29MLE1BQUFBLE1BQU0sQ0FBQ3FFLFdBQVAsQ0FBbUJILE1BQU0sQ0FBQzVRLEtBQTFCO0FBQ0EwTSxNQUFBQSxNQUFNLENBQUM3RixFQUFQLENBQVVwRixTQUFWLENBQW9CQyxNQUFwQixDQUEyQixNQUEzQjtBQUNELEtBSEQ7QUFJQWdMLElBQUFBLE1BQU0sQ0FBQzdGLEVBQVAsQ0FBVXpGLE1BQVYsQ0FBaUJ1RixFQUFqQjtBQUNEOztBQUVEK0YsRUFBQUEsTUFBTSxDQUFDMkQsR0FBUCxDQUFXalAsTUFBWCxDQUFrQnNMLE1BQU0sQ0FBQzdGLEVBQXpCO0FBRUE2RixFQUFBQSxNQUFNLENBQUM0RCxLQUFQLENBQWFoUCxnQkFBYixDQUE4QixPQUE5QixFQUF1QyxNQUFNO0FBQzNDb0wsSUFBQUEsTUFBTSxDQUFDN0YsRUFBUCxDQUFVcEYsU0FBVixDQUFvQjZGLE1BQXBCLENBQTJCLE1BQTNCO0FBQ0QsR0FGRDtBQUlBb0YsRUFBQUEsTUFBTSxDQUFDMkQsR0FBUCxDQUFXL08sZ0JBQVgsQ0FBNEIsTUFBNUIsRUFBb0MsTUFBTTtBQUN4Q29MLElBQUFBLE1BQU0sQ0FBQzdGLEVBQVAsQ0FBVXBGLFNBQVYsQ0FBb0JDLE1BQXBCLENBQTJCLE1BQTNCO0FBQ0QsR0FGRDtBQUlBLE1BQUk4UCxlQUFKO0FBQ0EsTUFBSUMsVUFBVSxHQUFHLEVBQWpCO0FBQ0EvRSxFQUFBQSxNQUFNLENBQUMyRCxHQUFQLENBQVcvTyxnQkFBWCxDQUE0QixTQUE1QixFQUF1Q3hDLENBQUMsSUFBSTtBQUMxQyxZQUFRQSxDQUFDLENBQUM0UyxJQUFWO0FBQ0UsV0FBSyxPQUFMO0FBQ0VoRixRQUFBQSxNQUFNLENBQUM3RixFQUFQLENBQVVwRixTQUFWLENBQW9CNkYsTUFBcEIsQ0FBMkIsTUFBM0I7QUFDQTs7QUFDRixXQUFLLFNBQUw7QUFBZ0I7QUFDZCxnQkFBTXFLLFVBQVUsR0FBR2pGLE1BQU0sQ0FBQ2pJLE9BQVAsQ0FBZWlJLE1BQU0sQ0FBQ21FLG1CQUFQLEdBQTZCLENBQTVDLENBQW5COztBQUNBLGNBQUljLFVBQUosRUFBZ0I7QUFDZGpGLFlBQUFBLE1BQU0sQ0FBQ3FFLFdBQVAsQ0FBbUJZLFVBQVUsQ0FBQzNSLEtBQTlCO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFDRCxXQUFLLFdBQUw7QUFBa0I7QUFDaEIsZ0JBQU00UixVQUFVLEdBQUdsRixNQUFNLENBQUNqSSxPQUFQLENBQWVpSSxNQUFNLENBQUNtRSxtQkFBUCxHQUE2QixDQUE1QyxDQUFuQjs7QUFDQSxjQUFJZSxVQUFKLEVBQWdCO0FBQ2RsRixZQUFBQSxNQUFNLENBQUNxRSxXQUFQLENBQW1CYSxVQUFVLENBQUM1UixLQUE5QjtBQUNEOztBQUNEO0FBQ0Q7O0FBQ0QsV0FBSyxPQUFMO0FBQ0EsV0FBSyxRQUFMO0FBQ0UwTSxRQUFBQSxNQUFNLENBQUM3RixFQUFQLENBQVVwRixTQUFWLENBQW9CQyxNQUFwQixDQUEyQixNQUEzQjtBQUNBOztBQUNGO0FBQVM7QUFDUGxELFVBQUFBLFlBQVksQ0FBQ2dULGVBQUQsQ0FBWjtBQUNBQyxVQUFBQSxVQUFVLElBQUkzUyxDQUFDLENBQUMyRCxHQUFoQjtBQUNBK08sVUFBQUEsZUFBZSxHQUFHL1MsVUFBVSxDQUFDLE1BQU07QUFDakNnVCxZQUFBQSxVQUFVLEdBQUcsRUFBYjtBQUNELFdBRjJCLEVBRXpCLEdBRnlCLENBQTVCO0FBSUEsZ0JBQU1JLGNBQWMsR0FBR25GLE1BQU0sQ0FBQ2pJLE9BQVAsQ0FBZXFDLElBQWYsQ0FBb0I4SixNQUFNLElBQUk7QUFDbkQsbUJBQU9BLE1BQU0sQ0FBQ04sS0FBUCxDQUFhM1AsV0FBYixHQUEyQm1SLFVBQTNCLENBQXNDTCxVQUF0QyxDQUFQO0FBQ0QsV0FGc0IsQ0FBdkI7O0FBR0EsY0FBSUksY0FBSixFQUFvQjtBQUNsQm5GLFlBQUFBLE1BQU0sQ0FBQ3FFLFdBQVAsQ0FBbUJjLGNBQWMsQ0FBQzdSLEtBQWxDO0FBQ0Q7QUFDRjtBQW5DSDtBQXFDRCxHQXRDRDtBQXVDRDs7QUFFRCxTQUFTb1EsbUJBQVQsQ0FBNkIzTCxPQUE3QixFQUFzQztBQUNwQyxTQUFPLENBQUMsR0FBR0EsT0FBSixFQUFhMEQsR0FBYixDQUFpQnlJLE1BQU0sSUFBSTtBQUNoQyxXQUFPO0FBQ0w1USxNQUFBQSxLQUFLLEVBQUU0USxNQUFNLENBQUM1USxLQURUO0FBRUxzUSxNQUFBQSxLQUFLLEVBQUVNLE1BQU0sQ0FBQ04sS0FGVDtBQUdMM0QsTUFBQUEsUUFBUSxFQUFFaUUsTUFBTSxDQUFDakUsUUFIWjtBQUlMdE4sTUFBQUEsT0FBTyxFQUFFdVI7QUFKSixLQUFQO0FBTUQsR0FQTSxDQUFQO0FBUUQsQzs7QUN0S0Q7QUFFZSxTQUFTbUIsYUFBVCxHQUF5QjtBQUV0QyxNQUFJQyxhQUFhLEdBQUczUSxRQUFDLENBQUUsZUFBRixDQUFELENBQW1CLENBQW5CLENBQXBCOztBQUNBLE1BQUkyUSxhQUFKLEVBQW1CO0FBQ2pCQSxJQUFBQSxhQUFhLEdBQUcsQ0FBQ0EsYUFBYSxDQUFDdkosT0FBZCxDQUFzQixRQUF0QixDQUFqQjtBQUNBLFFBQUl3SixrQkFBa0IsR0FBRzVRLFFBQUMsQ0FBQyx3QkFBRCxDQUExQjtBQUNBZ0IsSUFBQUEsS0FBSyxDQUFDQyxJQUFOLENBQVcyUCxrQkFBWCxFQUErQjdNLE1BQS9CLENBQXVDNEssQ0FBRCxJQUFPO0FBQzNDLFVBQUksQ0FBQ0EsQ0FBQyxDQUFDdkgsT0FBRixDQUFVUixFQUFYLEtBQWtCK0osYUFBdEIsRUFBcUM7QUFDbkNoQyxRQUFBQSxDQUFDLENBQUN2TyxTQUFGLENBQVlFLEdBQVosQ0FBZ0IsU0FBaEI7QUFDRDtBQUNGLEtBSkQ7QUFLRDs7QUFHRCxNQUFJdUwsTUFBTSxHQUFHN0wsUUFBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUIsQ0FBckIsQ0FBYjs7QUFDQSxNQUFJNkwsTUFBSixFQUFZO0FBQ1Y3TCxJQUFBQSxRQUFDLENBQUM2TCxNQUFELENBQUQsQ0FBVTVILEVBQVYsQ0FBYSxPQUFiLEVBQXNCLFlBQVk7QUFDaEMsVUFBSTRNLElBQUksR0FBRzdRLFFBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCLENBQXJCLENBQVg7QUFDQTZRLE1BQUFBLElBQUksQ0FBQ3pRLFNBQUwsQ0FBZTZGLE1BQWYsQ0FBc0IsTUFBdEI7QUFDRCxLQUhEO0FBSUQ7QUFFRixDOztBQ3hCRDtBQUVPLE1BQU02RCxTQUFLLEdBQUc7QUFFbkJnSCxFQUFBQSxLQUFLLEVBQUUsTUFBTTtBQUNYLFFBQUlDLE9BQU8sR0FBR2pILFNBQUssQ0FBQ0ssUUFBTixFQUFkOztBQUNBLFFBQUk0RyxPQUFPLENBQUNuSyxFQUFSLEdBQWFtSyxPQUFPLENBQUMxRyxTQUFSLEdBQW9CLENBQXJDLEVBQXdDLE9BQU8sS0FBUDs7QUFFeEMsUUFBSTJHLFFBQVEsR0FBR2xILFNBQUssQ0FBQ21ILGdCQUFOLENBQXVCRixPQUFPLENBQUNuSyxFQUEvQixFQUFtQyxNQUFuQyxDQUFmOztBQUNBLFFBQUlzSyxNQUFNLEdBQUdwSCxTQUFLLENBQUNxSCxjQUFOLENBQXFCSixPQUFyQixFQUE4QixNQUE5QixDQUFiOztBQUVBakgsSUFBQUEsU0FBSyxDQUFDc0gsT0FBTixDQUFjTCxPQUFPLENBQUNuSyxFQUF0QixFQUEwQm9LLFFBQTFCOztBQUNBbEgsSUFBQUEsU0FBSyxDQUFDdUgsS0FBTixDQUFZTixPQUFPLENBQUMzRyxHQUFwQixFQUF5QjhHLE1BQXpCO0FBQ0QsR0FYa0I7QUFhbkJJLEVBQUFBLEtBQUssRUFBRSxNQUFNO0FBQ1gsUUFBSVAsT0FBTyxHQUFHakgsU0FBSyxDQUFDSyxRQUFOLEVBQWQ7O0FBQ0EsUUFBSTRHLE9BQU8sQ0FBQ25LLEVBQVIsR0FBYSxDQUFqQixFQUFvQixPQUFPLEtBQVA7O0FBRXBCLFFBQUlvSyxRQUFRLEdBQUdsSCxTQUFLLENBQUNtSCxnQkFBTixDQUF1QkYsT0FBTyxDQUFDbkssRUFBL0IsRUFBbUMsTUFBbkMsQ0FBZjs7QUFDQSxRQUFJc0ssTUFBTSxHQUFHcEgsU0FBSyxDQUFDcUgsY0FBTixDQUFxQkosT0FBckIsRUFBOEIsTUFBOUIsQ0FBYjs7QUFFQWpILElBQUFBLFNBQUssQ0FBQ3NILE9BQU4sQ0FBY0wsT0FBTyxDQUFDbkssRUFBdEIsRUFBMEJvSyxRQUExQjs7QUFDQWxILElBQUFBLFNBQUssQ0FBQ3VILEtBQU4sQ0FBWU4sT0FBTyxDQUFDM0csR0FBcEIsRUFBeUI4RyxNQUF6QjtBQUNELEdBdEJrQjtBQXdCbkJFLEVBQUFBLE9BQU8sRUFBRSxDQUFDRyxTQUFELEVBQVlQLFFBQVosS0FBeUI7QUFDaEMsUUFBSVEsU0FBUyxHQUFHeFIsUUFBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJ1UixTQUF2QixDQUFoQjtBQUNBQyxJQUFBQSxTQUFTLENBQUNwUixTQUFWLENBQW9CNkYsTUFBcEIsQ0FBMkIsWUFBM0I7QUFFQSxRQUFJd0wsS0FBSyxHQUFHelIsUUFBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUJnUixRQUF2QixDQUFaO0FBQ0FTLElBQUFBLEtBQUssQ0FBQ3JSLFNBQU4sQ0FBZ0I2RixNQUFoQixDQUF1QixZQUF2QjtBQUNELEdBOUJrQjtBQWdDbkJvTCxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0ssU0FBRCxFQUFZUixNQUFaLEtBQXVCO0FBQzVCUSxJQUFBQSxTQUFTLENBQUN0UixTQUFWLENBQW9CNkYsTUFBcEIsQ0FBMkIsT0FBM0I7QUFDQWlMLElBQUFBLE1BQU0sQ0FBQzlRLFNBQVAsQ0FBaUI2RixNQUFqQixDQUF3QixPQUF4QjtBQUNELEdBbkNrQjtBQXFDbkJnTCxFQUFBQSxnQkFBZ0IsRUFBRSxDQUFDTSxTQUFELEVBQVlJLFNBQVosS0FBMEI7QUFDMUMsUUFBSUMsR0FBRyxHQUFHTCxTQUFWOztBQUNBLFlBQVEsSUFBUjtBQUNFLFdBQUtJLFNBQVMsS0FBSyxNQUFuQjtBQUNFLGVBQU9DLEdBQUcsSUFBSSxDQUFkO0FBQ0E7O0FBQ0YsV0FBS0QsU0FBUyxLQUFLLE1BQW5CO0FBQ0UsZUFBT0MsR0FBRyxJQUFJLENBQWQ7QUFDQTtBQU5KO0FBUUQsR0EvQ2tCO0FBaURuQlQsRUFBQUEsY0FBYyxFQUFFLENBQUNKLE9BQUQsRUFBVVksU0FBVixLQUF3QjtBQUN0QyxZQUFRLElBQVI7QUFDRSxXQUFLQSxTQUFTLEtBQUssTUFBbkI7QUFDRSxlQUFPWixPQUFPLENBQUN2RyxPQUFmO0FBQ0E7O0FBQ0YsV0FBS21ILFNBQVMsS0FBSyxNQUFuQjtBQUNFLGVBQU9aLE9BQU8sQ0FBQ3pHLE1BQWY7QUFDQTtBQU5KO0FBUUQsR0ExRGtCO0FBNERuQkgsRUFBQUEsUUFBUSxFQUFFLE1BQU07QUFDZCxXQUFPO0FBQ0x2RCxNQUFBQSxFQUFFLEVBQUU1RyxRQUFDLENBQUMsYUFBRCxDQUFELENBQWlCLENBQWpCLEVBQW9CbkIsU0FBcEIsR0FBZ0MsQ0FEL0I7QUFFTHVMLE1BQUFBLEdBQUcsRUFBRXBLLFFBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCLENBQXJCLENBRkE7QUFHTHFLLE1BQUFBLFNBQVMsRUFBRXJLLFFBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCa0QsTUFIN0I7QUFJTG9ILE1BQUFBLE1BQU0sRUFBRXRLLFFBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCLENBQXJCLEVBQXdCdUssc0JBSjNCO0FBS0xDLE1BQUFBLE9BQU8sRUFBRXhLLFFBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCLENBQXJCLEVBQXdCdkI7QUFMNUIsS0FBUDtBQU9ELEdBcEVrQjtBQXVFbkJnTSxFQUFBQSxTQUFTLEVBQUUsTUFBTTtBQUNmLFdBQU87QUFDTDdELE1BQUFBLEVBQUUsRUFBRSxDQUFDeEksTUFBTSxDQUFDa0QsUUFBUCxDQUFnQjRJLElBQWhCLENBQXFCUSxLQUFyQixDQUEyQixHQUEzQixFQUFnQ0MsR0FBaEMsRUFEQTtBQUVML0IsTUFBQUEsU0FBUyxFQUFFNUksUUFBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQmYsSUFBaEIsRUFGTjtBQUdMMkwsTUFBQUEsTUFBTSxFQUFFNUssUUFBQyxDQUFDLFNBQUQsQ0FBRCxDQUFhLENBQWIsQ0FISDtBQUlMNEYsTUFBQUEsTUFBTSxFQUFFNUYsUUFBQyxDQUFDLFFBQUQsQ0FBRCxDQUFZNkssa0JBQVo7QUFKSCxLQUFQO0FBTUQsR0E5RWtCO0FBZ0ZuQmpFLEVBQUFBLEVBQUUsRUFBR0EsRUFBRCxJQUFRO0FBQ1YsV0FBT0EsRUFBRSxJQUFJNUcsUUFBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQixDQUFoQixFQUFtQm9ILE9BQW5CLENBQTJCMEQsTUFBeEM7QUFDRCxHQWxGa0I7QUFtRm5CQyxFQUFBQSxRQUFRLEVBQUUsTUFBTTtBQUNkLFFBQUlDLGNBQWMsR0FBR2hMLFFBQUMsQ0FBQyxXQUFELENBQUQsQ0FBZWtELE1BQXBDO0FBQ0EsUUFBSThILGNBQUosRUFDRSxPQUFPQSxjQUFQO0FBQ0YsV0FBTyxLQUFQO0FBQ0QsR0F4RmtCO0FBMEZuQkMsRUFBQUEsV0FBVyxFQUFFLFlBQVk7QUFDdkIsUUFBSUMsU0FBUyxHQUFHcEIsU0FBSyxDQUFDRSxXQUFOLEVBQWhCOztBQUNBa0IsSUFBQUEsU0FBUyxDQUFDdEUsRUFBVixHQUFlLENBQWY7QUFDQXNFLElBQUFBLFNBQVMsQ0FBQ2pCLE1BQVYsR0FBbUIsQ0FBbkI7QUFDQSxRQUFJdkksR0FBRyxHQUFJLGNBQVg7QUFDQSxRQUFJdkMsR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUNDLEdBQUQsRUFBTXdKLFNBQU4sQ0FBcEI7QUFDQS9MLElBQUFBLEdBQUcsR0FBRyxNQUFNNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQVo7O0FBQ0EsUUFBSUEsR0FBSixFQUFTO0FBQ1BmLE1BQUFBLE1BQU0sQ0FBQ2tELFFBQVAsQ0FBZ0I0SSxJQUFoQixHQUF3QixzQkFBcUIvSyxHQUFHLENBQUN5SCxFQUFKLEdBQVMsQ0FBRSxFQUF4RDtBQUNEO0FBQ0YsR0FwR2tCO0FBc0duQnVFLEVBQUFBLElBQUksRUFBRSxNQUFNO0FBQ1YsV0FBT25MLFFBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0IsQ0FBaEIsRUFBbUJuQixTQUExQjtBQUNELEdBeEdrQjtBQTBHbkIySSxFQUFBQSxNQUFNLEVBQUUsWUFBWTtBQUNsQixRQUFJcEksSUFBSSxHQUFHMEssU0FBSyxDQUFDRSxXQUFOLEVBQVg7O0FBQ0E1SyxJQUFBQSxJQUFJLENBQUN3SCxFQUFMLEdBQVUsQ0FBVjtBQUNBeEgsSUFBQUEsSUFBSSxDQUFDNkssTUFBTCxHQUFjLENBQWQ7QUFDQSxRQUFJdkksR0FBRyxHQUFJLHNCQUFYO0FBQ0EsUUFBSXZDLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDQyxHQUFELEVBQU10QyxJQUFOLENBQXBCO0FBQ0FELElBQUFBLEdBQUcsR0FBRyxNQUFNNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQVo7QUFDQTs7QUFDQSxRQUFJQSxHQUFKLEVBQVM7QUFDUGYsTUFBQUEsTUFBTSxDQUFDa0QsUUFBUCxDQUFnQjRJLElBQWhCLEdBQXdCLHNCQUFxQi9LLEdBQUcsQ0FBQ3lILEVBQUcsRUFBcEQ7QUFDRDtBQUNGLEdBckhrQjs7QUF1SG5Cd0UsRUFBQUEseUJBQXlCLENBQUN4SyxTQUFELEVBQVk7QUFDbkMsUUFBSXlLLE1BQU0sR0FBR3JMLFFBQUMsQ0FBRSxlQUFjWSxTQUFVLEdBQTFCLENBQUQsQ0FBK0IsQ0FBL0IsQ0FBYjtBQUNBLFFBQUkwSyxRQUFRLEdBQUcsQ0FBQyxHQUFHRCxNQUFNLENBQUNqSSxPQUFYLEVBQW9CVyxNQUFwQixDQUE0QndILEdBQUQsSUFBT0EsR0FBRyxDQUFDRCxRQUF0QyxDQUFmOztBQUNBLFFBQUlBLFFBQUosRUFBYztBQUNaLGFBQU8sQ0FBQ0EsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZM00sS0FBcEI7QUFDRDtBQUNGLEdBN0hrQjs7QUErSG5CcUwsRUFBQUEsV0FBVyxFQUFFLE1BQU07QUFFakIsUUFBSXJDLEtBQUssR0FBRztBQUNWZixNQUFBQSxFQUFFLEVBQUUsQ0FBQ3hJLE1BQU0sQ0FBQ2tELFFBQVAsQ0FBZ0I0SSxJQUFoQixDQUFxQlEsS0FBckIsQ0FBMkIsR0FBM0IsRUFBZ0NDLEdBQWhDLEVBREs7QUFFVi9CLE1BQUFBLFNBQVMsRUFBRTVJLFFBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0IsQ0FBaEIsRUFBbUJyQixLQUZwQjtBQUdWc0wsTUFBQUEsTUFBTSxFQUFFLENBQUNqSyxRQUFDLENBQUMsVUFBRCxDQUFELENBQWMsQ0FBZCxFQUFpQmlDLFlBQWpCLENBQThCLFFBQTlCLENBSEMsQ0FJVjtBQUNBOztBQUxVLEtBQVosQ0FGaUIsQ0FTakI7O0FBQ0EsUUFBSXVKLE1BQU0sR0FBR3hMLFFBQUMsQ0FBQyxnQkFBRCxDQUFkO0FBQ0EsT0FBR3lELE9BQUgsQ0FBV21CLElBQVgsQ0FBZ0I0RyxNQUFoQixFQUF1QixVQUFVQyxLQUFWLEVBQWdCO0FBQ3JDOUQsTUFBQUEsS0FBSyxDQUFDOEQsS0FBSyxDQUFDckUsT0FBTixDQUFjLE9BQWQsQ0FBRCxDQUFMLEdBQThCcUUsS0FBSyxDQUFDckUsT0FBTixDQUFjLElBQWQsQ0FBOUI7QUFDRCxLQUZEO0FBR0EsV0FBT08sS0FBUDtBQUNELEdBOUlrQjtBQWdKbkIrRCxFQUFBQSxNQUFNLEVBQUUsWUFBWTtBQUNsQixRQUFJL0QsS0FBSyxHQUFHbUMsU0FBSyxDQUFDRSxXQUFOLEVBQVo7O0FBQ0EsUUFBSXRJLEdBQUcsR0FBSSx3QkFBdUJpRyxLQUFLLENBQUNmLEVBQUcsRUFBM0M7QUFDQSxRQUFJekgsR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUNDLEdBQUQsRUFBTWlHLEtBQU4sQ0FBcEI7QUFDQXhJLElBQUFBLEdBQUcsR0FBRyxNQUFNNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQVo7O0FBQ0EsUUFBSUEsR0FBSixFQUFTO0FBQ1BmLE1BQUFBLE1BQU0sQ0FBQ2tELFFBQVAsQ0FBZ0I0SSxJQUFoQixHQUF3QixzQkFBcUJ2QyxLQUFLLENBQUNmLEVBQUcsRUFBdEQ7QUFDRDtBQUNGLEdBeEprQjtBQTBKbkJJLEVBQUFBLE1BQU0sRUFBRSxrQkFBa0I7QUFFeEIsUUFBSThDLFNBQUssQ0FBQ2lCLFFBQU4sRUFBSixFQUFzQjtBQUNwQnZMLE1BQUFBLFVBQUEsQ0FBVyxvQ0FBWDtBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUVELFFBQUlvSCxFQUFFLEdBQUdrRCxTQUFLLENBQUNsRCxFQUFOLEVBQVQ7O0FBQ0EsUUFBSXpILEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDLHNCQUFELEVBQXlCO0FBQUNtRixNQUFBQTtBQUFELEtBQXpCLENBQXBCO0FBQ0F6SCxJQUFBQSxHQUFHLEdBQUcsTUFBTTVCLElBQUksQ0FBQ0MsS0FBTCxDQUFXMkIsR0FBWCxDQUFaOztBQUNBLFFBQUlBLEdBQUcsQ0FBQ3dNLFFBQVIsRUFBa0I7QUFDaEJuTSxNQUFBQSxVQUFBLENBQVcsbUVBQVg7QUFDQXBDLE1BQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZnQixRQUFBQSxNQUFNLENBQUNrRCxRQUFQLEdBQWtCLHdCQUFsQjtBQUNELE9BRlMsRUFFUCxJQUZPLENBQVY7QUFHRCxLQUxELE1BS087QUFDTGxELE1BQUFBLE1BQU0sQ0FBQ2tELFFBQVAsR0FBa0Isd0JBQWxCO0FBQ0Q7QUFFRjtBQTdLa0IsQ0FBZCxDOztBQ0ZQO0FBQ0E7QUFDQTtBQUVlLFNBQVN1USxlQUFULENBQXlCclIsTUFBekIsRUFBaUNzUixJQUFqQyxFQUF1QztBQUVwRCxNQUFJQSxJQUFJLEtBQUssT0FBYixFQUFzQjtBQUNwQixZQUFRLElBQVI7QUFDRSxXQUFLdFIsTUFBTSxDQUFDSixTQUFQLENBQWlCSyxRQUFqQixDQUEwQixtQkFBMUIsQ0FBTDtBQUFxRDtBQUNuRHFKLFVBQUFBLGdCQUFBOztBQUNBO0FBQ0Q7O0FBQ0QsV0FBS3RKLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsY0FBMUIsQ0FBTDtBQUFnRDtBQUM5Q3FKLFVBQUFBLGdCQUFBOztBQUNBO0FBQ0Q7O0FBQ0QsV0FBS3RKLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsWUFBMUIsQ0FBTDtBQUE4QztBQUM1Q3FKLFVBQUFBLGdCQUFBOztBQUNBO0FBQ0Q7O0FBQ0QsV0FBS3RKLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsY0FBMUIsQ0FBTDtBQUFnRDtBQUM5Q3FKLFVBQUFBLG1CQUFBOztBQUNBO0FBQ0Q7O0FBQ0QsV0FBS3RKLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsbUJBQTFCLENBQUw7QUFBcUQ7QUFDbkRxSixVQUFBQSxxQkFBQTs7QUFDQTtBQUNEOztBQUNELFdBQUt0SixNQUFNLENBQUNKLFNBQVAsQ0FBaUJLLFFBQWpCLENBQTBCLGNBQTFCLENBQUw7QUFBZ0Q7QUFDOUNxSixVQUFBQSxnQkFBQTs7QUFDQTtBQUNEOztBQUVELFdBQUssQ0FBQyxDQUFDdEosTUFBTSxDQUFDRSxPQUFQLENBQWUsaUJBQWYsQ0FBUDtBQUEwQztBQUN4QzJNLFVBQUFBLGNBQUEsQ0FBZTdNLE1BQWY7O0FBQ0E7QUFDRDs7QUFDRCxXQUFLLENBQUMsQ0FBQ0EsTUFBTSxDQUFDRSxPQUFQLENBQWUseUJBQWYsQ0FBUDtBQUFrRDtBQUNoRDJNLFVBQUFBLHFCQUFBLENBQXNCN00sTUFBdEI7O0FBQ0E7QUFDRDs7QUFDRCxXQUFLLENBQUMsQ0FBQ0EsTUFBTSxDQUFDRSxPQUFQLENBQWUsbUJBQWYsQ0FBUDtBQUE0QztBQUMxQzJNLFVBQUFBLG1CQUFBLENBQWlCN00sTUFBakI7O0FBQ0E7QUFDRDs7QUFDRCxXQUFLQSxNQUFNLENBQUNKLFNBQVAsQ0FBaUJLLFFBQWpCLENBQTBCLHlCQUExQixDQUFMO0FBQTJEO0FBQ3pENE0sVUFBQUEsZ0JBQUE7O0FBQ0E7QUFDRDs7QUFDRCxXQUFLLENBQUMsQ0FBQzdNLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLFNBQWYsQ0FBUDtBQUFrQztBQUNoQ2tMLFVBQUFBLGlCQUFBLENBQVlwTCxNQUFaOztBQUNBO0FBQ0Q7O0FBQ0QsV0FBS0EsTUFBTSxDQUFDSixTQUFQLENBQWlCSyxRQUFqQixDQUEwQix1QkFBMUIsQ0FBTDtBQUF5RDtBQUN2RG1MLFVBQUFBLG9CQUFBLENBQWVwTCxNQUFmOztBQUNBO0FBQ0Q7QUFqREg7QUFtREQ7O0FBRUQsTUFBSXNSLElBQUksS0FBSyxRQUFiLEVBQXVCO0FBQ25CO0FBQ0YsWUFBUSxJQUFSO0FBQ0UsV0FBSyxDQUFDLENBQUN0UixNQUFNLENBQUNFLE9BQVAsQ0FBZSwrQkFBZixDQUFQO0FBQXdEO0FBQ3REMk0sVUFBQUEsc0JBQUEsQ0FBdUI3TSxNQUF2Qjs7QUFDQTtBQUNEO0FBSkg7QUFNRDtBQUNGLEM7O0FDckVEO0FBQ0E7QUFFQTtBQUNBO0NBR0E7O0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFZSxTQUFTdVIsUUFBVCxHQUFvQjtBQUNqQyxNQUFJQSxRQUFRLEdBQUcvUixRQUFDLENBQUMsb0JBQUQsQ0FBaEI7O0FBQ0EsTUFBSStSLFFBQUosRUFBYztBQUVaN0ksSUFBQUEsUUFBUSxDQUFDLDhCQUFELENBQVIsQ0FGWSxDQUtaOztBQUNBLFFBQUk4SSxhQUFhLEdBQUdoUyxRQUFDLENBQUMsaUJBQUQsQ0FBckI7QUFDQSxPQUFHeUQsT0FBSCxDQUFXbUIsSUFBWCxDQUFnQm9OLGFBQWhCLEVBQStCLFVBQVUzRyxNQUFWLEVBQWtCO0FBQy9DLFVBQUl1RCxTQUFKLENBQWN2RCxNQUFkO0FBQ0QsS0FGRCxFQVBZLENBV2hCOztBQUNJLFFBQUksQ0FBQ2dDLG1CQUFBLEdBQXNCbkssTUFBdkIsSUFDQyx3QkFBd0I5RCxJQUF4QixDQUE2QmhCLE1BQU0sQ0FBQ2tELFFBQVAsQ0FBZ0IyUSxRQUE3QyxDQURMLEVBQzZEO0FBQzNENUUsTUFBQUEsbUJBQUE7QUFDRCxLQWZXLENBaUJaOzs7QUFDQSxRQUFJNkUsZUFBZSxHQUFHbFMsUUFBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0IsQ0FBeEIsQ0FBdEI7O0FBQ0EsUUFBSWtTLGVBQUosRUFBcUI7QUFDbkJBLE1BQUFBLGVBQWUsQ0FBQ2pTLGdCQUFoQixDQUFpQyxPQUFqQyxFQUNFLFFBQWM7QUFBQSxZQUFiO0FBQUNPLFVBQUFBO0FBQUQsU0FBYTtBQUNacVIsUUFBQUEsZUFBZSxDQUFDclIsTUFBRCxFQUFTLE9BQVQsQ0FBZjtBQUNELE9BSEg7QUFLQTBSLE1BQUFBLGVBQWUsQ0FBQ2pTLGdCQUFoQixDQUFpQyxRQUFqQyxFQUNFLFNBQWM7QUFBQSxZQUFiO0FBQUNPLFVBQUFBO0FBQUQsU0FBYTtBQUNacVIsUUFBQUEsZUFBZSxDQUFDclIsTUFBRCxFQUFTLFFBQVQsQ0FBZjtBQUNELE9BSEg7QUFLRDtBQUVGO0FBQ0YsQzs7QUN0REQ7QUFDQTtBQUdBUixRQUFDLENBQUMsYUFBRCxDQUFELENBQWlCaUUsRUFBakIsQ0FBb0IsT0FBcEIsRUFBNkJrRCxXQUE3Qjs7QUFFQSxTQUFTQSxXQUFULE9BQStCO0FBQUEsTUFBVjtBQUFDM0csSUFBQUE7QUFBRCxHQUFVO0FBQzNCO0FBQ0EsTUFBSSxDQUFDQSxNQUFNLENBQUM0RyxPQUFQLENBQWUrSyxVQUFwQixFQUFnQyxPQUZMLENBSS9COztBQUNJLE1BQUkzUixNQUFNLENBQUNKLFNBQVAsQ0FBaUJLLFFBQWpCLENBQTBCLFlBQTFCLENBQUosRUFBNkM7QUFFN0MsTUFBSTJSLFVBQVUsR0FBR3BTLFFBQUMsQ0FBQyxxQkFBRCxDQUFELENBQXlCLENBQXpCLENBQWpCLENBUDJCLENBUS9COztBQUNJb1MsRUFBQUEsVUFBVSxDQUFDaFMsU0FBWCxDQUFxQkMsTUFBckIsQ0FBNEIsUUFBNUI7QUFDQUcsRUFBQUEsTUFBTSxDQUFDSixTQUFQLENBQWlCRSxHQUFqQixDQUFxQixRQUFyQjtBQUVBLE1BQUkrUixVQUFVLEdBQUdELFVBQVUsQ0FBQ2hMLE9BQVgsQ0FBbUIsWUFBbkIsQ0FBakI7QUFDQXBILEVBQUFBLFFBQUMsQ0FBRSxzQkFBcUJxUyxVQUFXLElBQWxDLENBQUQsQ0FBd0N6RSxXQUF4QyxDQUFvRCxNQUFwRDtBQUVBLE1BQUkwRSxVQUFVLEdBQUc5UixNQUFNLENBQUM0RyxPQUFQLENBQWUsWUFBZixDQUFqQjtBQUNBcEgsRUFBQUEsUUFBQyxDQUFFLHNCQUFxQnNTLFVBQVcsSUFBbEMsQ0FBRCxDQUF3QzNFLFFBQXhDLENBQWlELE1BQWpEO0FBQ0g7O0FBQ0QsU0FBUzRFLE9BQVQsR0FBbUI7QUFDZixNQUFJQyxXQUFXLEdBQUd4UyxRQUFDLENBQUMsbUJBQUQsQ0FBbkI7QUFDQSxNQUFJLENBQUN3UyxXQUFXLENBQUMsQ0FBRCxDQUFoQixFQUFxQixPQUFPLEtBQVA7QUFDckJ4UixFQUFBQSxLQUFLLENBQUNDLElBQU4sQ0FBV3VSLFdBQVgsRUFBd0IxTCxHQUF4QixDQUE2QjJMLEdBQUQsSUFBTztBQUMvQkEsSUFBQUEsR0FBRyxDQUFDclMsU0FBSixDQUFjQyxNQUFkLENBQXFCLFlBQXJCO0FBQ0gsR0FGRDtBQUdBbVMsRUFBQUEsV0FBVyxDQUFDLENBQUQsQ0FBWCxDQUFlcFMsU0FBZixDQUF5QkUsR0FBekIsQ0FBNkIsWUFBN0I7QUFDSDs7OztBQy9CRDtBQUVBO0FBQ0E7QUFDQTtBQUdlLFNBQVNvUyxNQUFULEdBQWtCO0FBRWpDO0FBQ0UxUyxFQUFBQSxRQUFDLENBQUMsV0FBRCxDQUFELENBQWU0TixXQUFmLENBQTJCLE9BQTNCLEVBSCtCLENBS2pDOztBQUNFNU4sRUFBQUEsUUFBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkIyTixRQUEzQixDQUFvQyxPQUFwQyxFQU4rQixDQU9qQzs7QUFDRTRFLEVBQUFBLE9BQU87QUFDUHZTLEVBQUFBLFFBQUMsQ0FBQyxxQ0FBRCxDQUFELENBQXlDaUUsRUFBekMsQ0FBNEMsT0FBNUMsRUFBcUQsVUFBVXhHLENBQVYsRUFBYTtBQUNoRSxRQUFJa1IsQ0FBQyxHQUFHbFIsQ0FBQyxDQUFDK0MsTUFBRixDQUFTbVMsTUFBVCxDQUFnQixDQUFoQixDQUFSO0FBQ0FoRSxJQUFBQSxDQUFDLENBQUN2TyxTQUFGLENBQVk2RixNQUFaLENBQW1CLFFBQW5CO0FBQ0QsR0FIRDtBQU1BakcsRUFBQUEsUUFBQyxDQUFDLE9BQUQsQ0FBRCxDQUFXaUUsRUFBWCxDQUFjLE9BQWQsRUFBdUI2RixlQUF2QjtBQUNBOUosRUFBQUEsUUFBQyxDQUFDLE9BQUQsQ0FBRCxDQUFXaUUsRUFBWCxDQUFjLE9BQWQsRUFBdUI2RixlQUF2QixFQWhCK0IsQ0FtQmpDO0FBQ0E7QUFDQTtBQUVBOztBQUNFLE1BQUkrQixNQUFNLEdBQUc3TCxRQUFDLENBQUMsc0JBQUQsQ0FBRCxDQUEwQixDQUExQixDQUFiOztBQUNBLE1BQUk2TCxNQUFKLEVBQVk7QUFDVixRQUFJek4sTUFBTSxDQUFDa0QsUUFBUCxDQUFnQjJRLFFBQWhCLENBQXlCclQsS0FBekIsQ0FBK0Isa0JBQS9CLENBQUosRUFBd0Q7QUFDdERpTixNQUFBQSxNQUFNLENBQUN6TCxTQUFQLENBQWlCRSxHQUFqQixDQUFxQixVQUFyQjtBQUNEO0FBQ0Y7O0FBRUROLEVBQUFBLFFBQUMsQ0FBQyxzQkFBRCxDQUFELENBQTBCaUUsRUFBMUIsQ0FBNkIsT0FBN0IsRUFBc0MsZ0JBQWdCeEcsQ0FBaEIsRUFBbUI7QUFFdkQsUUFBSW9PLE1BQU0sR0FBR3BPLENBQUMsQ0FBQytDLE1BQWY7QUFDQSxRQUFJcUwsTUFBTSxDQUFDekwsU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsVUFBMUIsQ0FBSixFQUEyQyxPQUFPLEtBQVA7QUFDM0MsUUFBSW9MLE1BQU0sQ0FBQ2pGLEVBQVAsS0FBYyxNQUFsQixFQUEwQixPQUFPLEtBQVA7O0FBRTFCLFFBQUlpRixNQUFNLENBQUM1TSxJQUFQLElBQWUsb0JBQW5CLEVBQXlDO0FBQ3ZDcUMsTUFBQUEsUUFBUSxDQUFDc1IsTUFBVDtBQUNBO0FBQ0Q7O0FBQ0QsUUFBSUMsV0FBVyxHQUFHLE1BQU1wUixJQUFJLENBQUMseUJBQUQsRUFBNEIsRUFBNUIsQ0FBNUI7QUFDQW9SLElBQUFBLFdBQVcsR0FBR3RWLElBQUksQ0FBQ0MsS0FBTCxDQUFXcVYsV0FBWCxDQUFkO0FBQ0EsUUFBSUMsUUFBUSxHQUFHQyxTQUFTLENBQUNGLFdBQUQsQ0FBeEI7QUFDQSxRQUFJbFIsSUFBSSxHQUFHcVIsV0FBVyxDQUFDRixRQUFELENBQXRCO0FBQ0EsUUFBSTNULEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDLHdDQUFELEVBQTJDRSxJQUEzQyxDQUFwQjs7QUFDQSxRQUFJeEMsR0FBRyxLQUFHLElBQVYsRUFBZ0I7QUFDZGEsTUFBQUEsUUFBQyxDQUFDLE9BQUQsQ0FBRCxDQUFXLENBQVgsRUFBY2tLLElBQWQsR0FBcUI1SSxRQUFRLENBQUM0SSxJQUE5QjtBQUNBbEssTUFBQUEsUUFBQyxDQUFDLE9BQUQsQ0FBRCxDQUFXLENBQVgsRUFBY2YsSUFBZCxHQUFxQixvQkFBckI7QUFDRDtBQUNGLEdBbkJEOztBQXFCQSxXQUFTK1QsV0FBVCxDQUFxQkYsUUFBckIsRUFBK0I7QUFDN0IsV0FBTztBQUNMO0FBQ0FwTCxNQUFBQSxXQUFXLEVBQUUxSCxRQUFDLENBQUMsV0FBRCxDQUFELENBQWVrRCxNQUZ2QjtBQUdMNFAsTUFBQUEsUUFBUSxFQUFFQSxRQUhMO0FBSUwvRyxNQUFBQSxJQUFJLEVBQUcsYUFBWWxPLFFBQVEsQ0FBQ29WLE9BQVQsQ0FBaUI5SCxJQUFLLEdBQW5DLEdBQXdDdE4sUUFBUSxDQUFDcVYsZUFBVCxDQUF5QkMsU0FKbEU7QUFLTHJJLE1BQUFBLE1BQU0sRUFBRTlLLFFBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CLENBQXBCLEVBQXVCb0gsT0FBdkIsQ0FBK0JHLE1BTGxDO0FBTUw2TCxNQUFBQSxRQUFRLEVBQUVwVCxRQUFDLENBQUMsWUFBRCxDQUFELENBQWdCLENBQWhCLEVBQW1CbkIsU0FOeEI7QUFPTHdVLE1BQUFBLElBQUksRUFBRXJULFFBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCLENBQXJCLEVBQXdCbkI7QUFQekIsS0FBUDtBQVNEOztBQUdELFdBQVNrVSxTQUFULENBQW1CTyxjQUFuQixFQUFtQztBQUNqQyxRQUFJckwsQ0FBQyxHQUFHakksUUFBQyxDQUFDLFdBQUQsQ0FBVDtBQUNBLE9BQUc4RyxHQUFILENBQU9sQyxJQUFQLENBQVlxRCxDQUFaLEVBQWUsVUFBVUQsUUFBVixFQUFvQjtBQUNqQyxVQUFJYyxPQUFPLEdBQUdkLFFBQVEsQ0FBQ2hFLGdCQUFULENBQTBCLElBQTFCLENBQWQ7QUFDQSxVQUFJdVAsTUFBTSxHQUFHLEVBQWI7QUFDQSxTQUFHek0sR0FBSCxDQUFPbEMsSUFBUCxDQUFZa0UsT0FBWixFQUFxQixVQUFVVixNQUFWLEVBQWtCO0FBQ3JDLFlBQUlvTCxLQUFLLEdBQUd4VCxRQUFDLENBQUNvSSxNQUFELENBQUQsQ0FBVTNDLElBQVYsQ0FBZSxPQUFmLENBQVo7QUFDQSxZQUFJbUIsRUFBRSxHQUFHd0IsTUFBTSxDQUFDaEIsT0FBUCxDQUFlUixFQUF4QjtBQUNBNk0sUUFBQUEsbUJBQW1CLENBQUNGLE1BQUQsRUFBUzNNLEVBQVQsRUFBYTBNLGNBQWIsRUFBNkJFLEtBQTdCLEVBQW9DcEwsTUFBcEMsQ0FBbkI7QUFDRCxPQUpEO0FBTUEsVUFBSXhCLEVBQUUsR0FBR29CLFFBQVEsQ0FBQ1osT0FBVCxDQUFpQixJQUFqQixDQUFULENBVGlDLENBU0Q7O0FBQ2hDLFVBQUlzTSxTQUFTLEdBQUcxVCxRQUFDLENBQUUsaUNBQWdDLENBQUM0RyxFQUFHLElBQXRDLENBQUQsQ0FBNEMsQ0FBNUMsQ0FBaEI7O0FBQ0EsVUFBSTJNLE1BQU0sQ0FBQ3JRLE1BQVgsRUFBbUI7QUFDakJsRCxRQUFBQSxRQUFDLENBQUMwVCxTQUFELENBQUQsQ0FBYS9GLFFBQWIsQ0FBc0IsV0FBdEI7QUFDRCxPQUZELE1BRU87QUFDTDNOLFFBQUFBLFFBQUMsQ0FBQzBULFNBQUQsQ0FBRCxDQUFhL0YsUUFBYixDQUFzQixhQUF0QjtBQUNEO0FBQ0YsS0FoQkQ7QUFpQkEsV0FBTzNOLFFBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0JrRCxNQUF2QjtBQUNEOztBQUVELFdBQVN1USxtQkFBVCxDQUE2QkYsTUFBN0IsRUFBcUMzTSxFQUFyQyxFQUF5QzBNLGNBQXpDLEVBQXlERSxLQUF6RCxFQUFnRXBMLE1BQWhFLEVBQXdFO0FBQ3RFLFFBQUl1TCxZQUFZLEdBQUdMLGNBQWMsQ0FBQzdELE9BQWYsQ0FBdUI3SSxFQUF2QixNQUErQixDQUFDLENBQW5EOztBQUVBLFFBQUk0TSxLQUFLLENBQUNuUSxPQUFOLElBQWlCc1EsWUFBckIsRUFBbUM7QUFBQztBQUNsQ3ZMLE1BQUFBLE1BQU0sQ0FBQ2hJLFNBQVAsQ0FBaUJFLEdBQWpCLENBQXFCLE1BQXJCLEVBRGlDLENBQ0g7QUFDL0IsS0FGRCxNQUVPLElBQUlrVCxLQUFLLENBQUNuUSxPQUFOLElBQWlCLENBQUNzUSxZQUF0QixFQUFvQztBQUFDO0FBQzFDSixNQUFBQSxNQUFNLENBQUM1UCxJQUFQLENBQVksSUFBWjtBQUNELEtBRk0sTUFFQSxJQUFJLENBQUM2UCxLQUFLLENBQUNuUSxPQUFQLElBQWtCc1EsWUFBdEIsRUFBb0M7QUFBQztBQUMxQ3ZMLE1BQUFBLE1BQU0sQ0FBQ2hJLFNBQVAsQ0FBaUJFLEdBQWpCLENBQXFCLE1BQXJCLEVBRHlDLENBQ1g7O0FBQzlCaVQsTUFBQUEsTUFBTSxDQUFDNVAsSUFBUCxDQUFZLElBQVo7QUFDRCxLQUhNLE1BR0EsSUFBSSxDQUFDNlAsS0FBSyxDQUFDblEsT0FBUCxJQUFrQixDQUFDc1EsWUFBdkIsRUFBcUMsQ0FBQztBQUM1QztBQUNGO0FBRUYsQzs7QUM1R0Q7QUFFZSxTQUFTQyxJQUFULEdBQWUsQ0FFN0IsQzs7QUNKRDtDQUVBOztBQUVlLFNBQVNFLFFBQVQsR0FBbUI7QUFFaEM7QUFDQUQsRUFBQUEsSUFBSztBQUVOLEM7O0FDVEQ7QUFDQTtBQUVlLFNBQVNFLElBQVQsR0FBZ0I7QUFDN0I7QUFFQSxRQUFNQyxNQUFNLEdBQUdoVSxRQUFDLENBQUMsdUJBQUQsQ0FBaEI7O0FBQ0EsTUFBSWdVLE1BQUosRUFBWTtBQUNWLE9BQUd2USxPQUFILENBQVdtQixJQUFYLENBQWdCb1AsTUFBaEIsRUFBd0IsVUFBVUMsS0FBVixFQUFpQjtBQUV2QyxZQUFNQyxlQUFlLEdBQUdsVSxRQUFDLENBQUMsbUJBQUQsQ0FBekI7QUFDQSxZQUFNbVUsT0FBTyxHQUFHRixLQUFLLENBQUNqUSxnQkFBTixDQUF1QixPQUF2QixDQUFoQjtBQUNBLFlBQU1vUSxTQUFTLEdBQUdILEtBQUssQ0FBQ2pRLGdCQUFOLENBQXVCLGFBQXZCLENBQWxCO0FBQ0EsWUFBTXFRLE1BQU0sR0FBR3JVLFFBQUMsQ0FBQ2lVLEtBQUQsQ0FBRCxDQUFTSyxPQUFULENBQWlCLGFBQWpCLENBQWY7QUFDQSxZQUFNQyxHQUFHLEdBQUd2VSxRQUFDLENBQUNpVSxLQUFELENBQUQsQ0FBUyxDQUFULEVBQVlqUSxnQkFBWixDQUE2QixlQUE3QixDQUFaO0FBQ0EsWUFBTXdRLFNBQVMsR0FBR1AsS0FBSyxDQUFDN00sT0FBTixDQUFjLE9BQWQsQ0FBbEI7QUFDQSxZQUFNcU4sSUFBSSxHQUFHLEVBQWI7QUFFQXpVLE1BQUFBLFFBQUMsQ0FBQ2lVLEtBQUQsQ0FBRCxDQUFTaFEsRUFBVCxDQUFZLE9BQVosRUFBcUJrRCxXQUFXLENBQUNuQyxJQUFaLENBQWlCLElBQWpCLENBQXJCO0FBQ0FoRixNQUFBQSxRQUFDLENBQUNpVSxLQUFELENBQUQsQ0FBU2hRLEVBQVQsQ0FBWSxPQUFaLEVBQXFCeVEsV0FBVyxDQUFDMVAsSUFBWixDQUFpQixJQUFqQixDQUFyQixFQVh1QyxDQWF2Qzs7QUFDQSxZQUFNcEksUUFBUSxHQUFHLFVBQUNDLEVBQUQsRUFBb0I7QUFBQSxZQUFmQyxJQUFlLHVFQUFSLEdBQVE7QUFDbkMsWUFBSUMsT0FBSjtBQUNBLGVBQU8sWUFBWTtBQUNqQixnQkFBTUMsWUFBWSxHQUFHLE1BQU1ILEVBQUUsQ0FBQ0ksS0FBSCxDQUFTLElBQVQsRUFBZUMsU0FBZixDQUEzQjs7QUFDQUMsVUFBQUEsWUFBWSxDQUFDSixPQUFELENBQVo7QUFDQUEsVUFBQUEsT0FBTyxHQUFHSyxVQUFVLENBQUNKLFlBQUQsRUFBZUYsSUFBZixDQUFwQjtBQUNELFNBSkQ7QUFLRCxPQVBEOztBQVFBLFVBQUl1UCxjQUFjLEdBQUd6UCxRQUFRLENBQUMrWCxXQUFELENBQTdCOztBQUdBLGVBQVNELFdBQVQsT0FBK0I7QUFBQSxZQUFWO0FBQUNsVSxVQUFBQTtBQUFELFNBQVU7O0FBRTdCO0FBQ0EsWUFBSUEsTUFBTSxDQUFDb1UsWUFBUCxDQUFvQixpQkFBcEIsQ0FBSixFQUE0QztBQUMxQ3ZJLFVBQUFBLGNBQWMsQ0FBQzRILEtBQUQsRUFBUUMsZUFBUixFQUF5QjFULE1BQXpCLENBQWQsQ0FEMEMsQ0FHMUM7QUFDRCxTQUpELE1BSU8sSUFBSUEsTUFBTSxDQUFDRSxPQUFQLENBQWUsT0FBZixDQUFKLEVBQTZCO0FBQ2xDLGNBQUltVSxNQUFNLEdBQUdyVSxNQUFNLENBQUNFLE9BQVAsQ0FBZSxPQUFmLENBQWI7QUFDQSxjQUFJb1UsS0FBSyxHQUFHLEdBQUdDLFNBQUgsQ0FBYW5RLElBQWIsQ0FBa0J1UCxPQUFsQixFQUEyQixDQUFDdFUsRUFBRCxFQUFLa0gsQ0FBTCxFQUFRc04sTUFBUixLQUFtQjtBQUN4RCxtQkFBT3hVLEVBQUUsS0FBS2dWLE1BQWQ7QUFDRCxXQUZXLENBQVo7QUFHQXRULFVBQUFBLE1BQU0sQ0FBQ3VULEtBQUQsRUFBUXRVLE1BQVIsQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsZUFBUzJHLFdBQVQsUUFBK0I7QUFBQSxZQUFWO0FBQUMzRyxVQUFBQTtBQUFELFNBQVU7O0FBRTdCO0FBQ0EsWUFBSUEsTUFBTSxDQUFDSSxTQUFQLEtBQXFCLFdBQXpCLEVBQXNDO0FBQ3BDb1UsVUFBQUEsV0FBVyxDQUFDUixTQUFELENBQVgsQ0FEb0MsQ0FHcEM7QUFDRCxTQUpELE1BSU8sSUFDTGhVLE1BQU0sQ0FBQ0ksU0FBUCxLQUFxQixpQkFBckIsSUFDQUosTUFBTSxDQUFDRSxPQUFQLENBQWUsaUJBQWYsQ0FGSyxFQUU4QjtBQUNuQ3VVLFVBQUFBLFFBQVEsQ0FBQ3pVLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLGlCQUFmLENBQUQsQ0FBUixDQURtQyxDQUduQztBQUNELFNBTk0sTUFNQSxJQUFJRixNQUFNLENBQUNJLFNBQVAsS0FBcUIsa0JBQXJCLElBQ1RKLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLGtCQUFmLENBREssRUFDK0I7QUFDcEMsY0FBSWtHLEVBQUUsR0FBR3BHLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLGtCQUFmLEVBQW1DMEcsT0FBbkMsQ0FBMkMsSUFBM0MsQ0FBVDtBQUNBaEosVUFBQUEsTUFBTSxDQUFDa0QsUUFBUCxHQUFtQixZQUFXa1QsU0FBVSxTQUFRNU4sRUFBRyxFQUFuRCxDQUZvQyxDQUlwQztBQUNELFNBTk0sTUFNQSxJQUFJcEcsTUFBTSxDQUFDSixTQUFQLENBQWlCSyxRQUFqQixDQUEwQixNQUExQixDQUFKLEVBQXVDO0FBQzVDLGNBQUlvVSxNQUFNLEdBQUdyVSxNQUFNLENBQUNFLE9BQVAsQ0FBZSxPQUFmLENBQWI7QUFDQSxjQUFJb1UsS0FBSyxHQUFHLEdBQUdDLFNBQUgsQ0FBYW5RLElBQWIsQ0FBa0J1UCxPQUFsQixFQUEyQixDQUFDdFUsRUFBRCxFQUFLa0gsQ0FBTCxFQUFRc04sTUFBUixLQUFtQjtBQUN4RCxtQkFBT3hVLEVBQUUsS0FBS2dWLE1BQWQ7QUFDRCxXQUZXLENBQVo7QUFHQUssVUFBQUEsVUFBVSxDQUFDSixLQUFELENBQVY7QUFDRDtBQUNGLE9BbkVzQyxDQXFFdkM7OztBQUNBLHFCQUFlRyxRQUFmLENBQXdCcFYsRUFBeEIsRUFBNEI7QUFDMUI7QUFDQSxZQUFJLENBQUNvSCxPQUFPLENBQUMsdUJBQUQsQ0FBWixFQUF1QztBQUN2QyxZQUFJTCxFQUFFLEdBQUcvRyxFQUFFLENBQUN1SCxPQUFILENBQVcsSUFBWCxDQUFUO0FBQ0EsWUFBSWpJLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFFLFlBQVcrUyxTQUFVLFNBQXZCLEVBQWlDO0FBQUM1TixVQUFBQTtBQUFELFNBQWpDLENBQXBCO0FBQ0F6SCxRQUFBQSxHQUFHLEdBQUc1QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBTjs7QUFDQSxZQUFJQSxHQUFHLENBQUNzSixHQUFKLEtBQVksSUFBaEIsRUFBc0I7QUFDcEIwTSxVQUFBQSxPQUFPLENBQUN2TyxFQUFELENBQVA7QUFDQXBILFVBQUFBLFVBQUEsQ0FBWSxRQUFPb0gsRUFBRyxVQUF0QjtBQUNEO0FBQ0Y7O0FBRUQsZUFBU3VPLE9BQVQsQ0FBaUJ2TyxFQUFqQixFQUFxQjtBQUNuQixZQUFJcEQsR0FBRyxHQUFHeEQsUUFBQyxDQUFFLGFBQVk0RyxFQUFHLElBQWpCLENBQVg7QUFDQSxXQUFHbkQsT0FBSCxDQUFXbUIsSUFBWCxDQUFnQnBCLEdBQWhCLEVBQXFCLFVBQVUzRCxFQUFWLEVBQWM7QUFDakNBLFVBQUFBLEVBQUUsQ0FBQ1EsTUFBSDtBQUNELFNBRkQ7QUFHRCxPQXZGc0MsQ0EwRnZDOzs7QUFDQSxxQkFBZTJVLFdBQWYsQ0FBMkJSLFNBQTNCLEVBQXNDL1csQ0FBdEMsRUFBeUM7QUFDdkMsWUFBSTBCLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFFLFlBQVcrUyxTQUFVLFNBQXZCLEVBQWlDLEVBQWpDLENBQXBCO0FBQ0FyVixRQUFBQSxHQUFHLEdBQUc1QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBTjs7QUFDQSxZQUFJQSxHQUFHLENBQUN5SCxFQUFSLEVBQVk7QUFDVnhJLFVBQUFBLE1BQU0sQ0FBQ2tELFFBQVAsQ0FBZ0I0SSxJQUFoQixHQUF3QixZQUFXc0ssU0FBVSxPQUE3QyxDQURVLENBRVY7QUFDRDtBQUNGOztBQUVELGVBQVNZLE1BQVQsQ0FBZ0J4TyxFQUFoQixFQUFvQjtBQUNsQixZQUFJeU8sR0FBRyxHQUFHLENBQUMsR0FBR1osSUFBSSxDQUFDLENBQUQsQ0FBUixDQUFWO0FBQ0EsV0FBR2hSLE9BQUgsQ0FBV21CLElBQVgsQ0FBZ0J5USxHQUFoQixFQUFxQixVQUFVeFYsRUFBVixFQUFjO0FBQ2pDLGNBQUlxTixLQUFLLEdBQUdyTixFQUFFLENBQUNxSSxTQUFILENBQWEsSUFBYixDQUFaO0FBQ0EsY0FBSW9OLFlBQVksR0FBR3RWLFFBQUMsQ0FBQ2lVLEtBQUQsQ0FBRCxDQUFTeE8sSUFBVCxDQUFjLGNBQWQsQ0FBbkI7QUFDQTZQLFVBQUFBLFlBQVksQ0FBQzFSLFdBQWIsQ0FBeUJzSixLQUF6Qjs7QUFDQSxjQUFJLENBQUMsSUFBRCxFQUFPcUksUUFBUCxDQUFnQnJJLEtBQUssQ0FBQ3RNLFNBQXRCLENBQUosRUFBc0M7QUFDcENzTSxZQUFBQSxLQUFLLENBQUNyTyxTQUFOLEdBQWtCK0gsRUFBbEI7QUFDRCxXQUZELE1BRU8sSUFBSSxDQUFDLENBQUMsS0FBRCxFQUFRLE1BQVIsRUFBZ0IsTUFBaEIsRUFBd0IyTyxRQUF4QixDQUFpQ3JJLEtBQUssQ0FBQ3RNLFNBQXZDLENBQUwsRUFBd0Q7QUFDN0RzTSxZQUFBQSxLQUFLLENBQUNyTyxTQUFOLEdBQWtCLEVBQWxCO0FBQ0Q7O0FBQ0RxTyxVQUFBQSxLQUFLLENBQUM5RixPQUFOLENBQWMsSUFBZCxJQUFzQlIsRUFBdEI7QUFFRCxTQVhEO0FBWUQsT0FsSHNDLENBb0h2Qzs7O0FBQ0EsZUFBUzRPLFdBQVQsR0FBdUI7QUFDckIsV0FBRy9SLE9BQUgsQ0FBV21CLElBQVgsQ0FBZ0I2UCxJQUFoQixFQUF1QnBOLEdBQUQsSUFBUztBQUM3QixhQUFHNUQsT0FBSCxDQUFXbUIsSUFBWCxDQUFnQnlDLEdBQWhCLEVBQXFCeEgsRUFBRSxJQUFJO0FBQ3pCQSxZQUFBQSxFQUFFLENBQUNmLEtBQUgsQ0FBU3FPLE9BQVQsR0FBbUIsTUFBbkI7QUFDRCxXQUZEO0FBR0QsU0FKRDtBQUtEOztBQUVELGVBQVM1TCxNQUFULENBQWdCdVQsS0FBaEIsRUFBdUJ0QixLQUF2QixFQUE4QjtBQUM1QmdDLFFBQUFBLFdBQVc7QUFDWCxjQUFNN1csS0FBSyxHQUFHNlUsS0FBSyxDQUFDN1UsS0FBcEI7QUFFQSxXQUFHOEUsT0FBSCxDQUFXbUIsSUFBWCxDQUFnQnlQLE1BQWhCLEVBQXlCb0IsR0FBRCxJQUFTO0FBQy9CLGNBQUlBLEdBQUcsS0FBS2pDLEtBQVosRUFBbUJpQyxHQUFHLENBQUM5VyxLQUFKLEdBQVksRUFBWjtBQUNwQixTQUZEO0FBSUEsV0FBRzhFLE9BQUgsQ0FBV21CLElBQVgsQ0FBZ0I2UCxJQUFoQixFQUFzQixVQUFVcE4sR0FBVixFQUFlO0FBQ25DLGdCQUFNL0osR0FBRyxHQUFHK0osR0FBRyxDQUFDeU4sS0FBRCxDQUFILENBQVdqVyxTQUF2QjtBQUNBLGdCQUFNNlcsTUFBTSxHQUFHLElBQUlsVSxNQUFKLENBQVksR0FBRTdDLEtBQU0sRUFBcEIsRUFBdUIsSUFBdkIsQ0FBZjs7QUFDQSxjQUFJLENBQUNyQixHQUFHLENBQUNzQixLQUFKLENBQVU4VyxNQUFWLENBQUwsRUFBd0I7QUFDdEIsZUFBR2pTLE9BQUgsQ0FBV21CLElBQVgsQ0FBZ0J5QyxHQUFoQixFQUFxQnhILEVBQUUsSUFBSTtBQUN6QkEsY0FBQUEsRUFBRSxDQUFDZixLQUFILENBQVNxTyxPQUFULEdBQW1CLE1BQW5CO0FBQ0QsYUFGRDtBQUdEO0FBQ0YsU0FSRDtBQVNEOztBQUFBLE9BOUlzQyxDQWdKdkM7O0FBQ0EsZUFBUytILFVBQVQsQ0FBb0JKLEtBQXBCLEVBQTJCO0FBQ3pCO0FBQ0EsY0FBTW5ELFNBQVMsR0FBR2dFLFVBQVUsQ0FBQ2IsS0FBRCxDQUFWLElBQXFCLEtBQXZDLENBRnlCLENBSXpCOztBQUNBLGNBQU1jLFVBQVUsR0FBSWpFLFNBQVMsS0FBSyxLQUFmLEdBQXdCLENBQXhCLEdBQTRCLENBQUMsQ0FBaEQ7QUFFQSxjQUFNa0UsT0FBTyxHQUFHN1UsS0FBSyxDQUFDQyxJQUFOLENBQVd3VCxJQUFYLENBQWhCO0FBRUFvQixRQUFBQSxPQUFPLENBQUN0WCxJQUFSLENBQWEsVUFBVXVYLElBQVYsRUFBZ0JDLElBQWhCLEVBQXNCO0FBQ2pDLGdCQUFNQyxLQUFLLEdBQUdGLElBQUksQ0FBQ2hCLEtBQUQsQ0FBSixDQUFZalMsU0FBMUI7QUFDQSxnQkFBTW9ULEtBQUssR0FBR0YsSUFBSSxDQUFDakIsS0FBRCxDQUFKLENBQVlqUyxTQUExQjtBQUVBLGdCQUFNOEwsQ0FBQyxHQUFHdUgsU0FBUyxDQUFDcEIsS0FBRCxFQUFRa0IsS0FBUixDQUFuQjtBQUNBLGdCQUFNRyxDQUFDLEdBQUdELFNBQVMsQ0FBQ3BCLEtBQUQsRUFBUW1CLEtBQVIsQ0FBbkI7O0FBRUEsa0JBQVEsSUFBUjtBQUNFLGlCQUFLdEgsQ0FBQyxHQUFHd0gsQ0FBVDtBQUNFLHFCQUFPLElBQUlQLFVBQVg7O0FBQ0YsaUJBQUtqSCxDQUFDLEdBQUd3SCxDQUFUO0FBQ0UscUJBQU8sQ0FBQyxDQUFELEdBQUtQLFVBQVo7O0FBQ0YsaUJBQUtqSCxDQUFDLEtBQUt3SCxDQUFYO0FBQ0UscUJBQU8sQ0FBUDtBQU5KO0FBUUQsU0FmRCxFQVR5QixDQTBCekI7O0FBQ0EsV0FBRzFTLE9BQUgsQ0FBV21CLElBQVgsQ0FBZ0I2UCxJQUFoQixFQUFzQixVQUFVMkIsUUFBVixFQUFvQjtBQUN4QyxhQUFHM1MsT0FBSCxDQUFXbUIsSUFBWCxDQUFnQndSLFFBQWhCLEVBQTBCdlcsRUFBRSxJQUFJO0FBQzlCQSxZQUFBQSxFQUFFLENBQUNRLE1BQUg7QUFDRCxXQUZEO0FBR0QsU0FKRCxFQTNCeUIsQ0FpQ3pCOztBQUNBc1YsUUFBQUEsVUFBVSxDQUFDYixLQUFELENBQVYsR0FBb0JuRCxTQUFTLEtBQUssS0FBZCxHQUFzQixNQUF0QixHQUErQixLQUFuRCxDQWxDeUIsQ0FvQ3pCOztBQUNBa0UsUUFBQUEsT0FBTyxDQUFDcFMsT0FBUixDQUFnQixVQUFVMlIsTUFBVixFQUFrQjtBQUNoQ0EsVUFBQUEsTUFBTSxHQUFHcFUsS0FBSyxDQUFDQyxJQUFOLENBQVdtVSxNQUFYLENBQVQ7QUFDQUEsVUFBQUEsTUFBTSxDQUFDaUIsT0FBUDtBQUNBLGFBQUc1UyxPQUFILENBQVdtQixJQUFYLENBQWdCd1EsTUFBaEIsRUFBd0J2VixFQUFFLElBQUk7QUFDNUJzVSxZQUFBQSxPQUFPLENBQUNBLE9BQU8sQ0FBQ2pSLE1BQVIsR0FBaUIsQ0FBbEIsQ0FBUCxDQUE0Qm1NLEtBQTVCLENBQWtDeFAsRUFBbEM7QUFDRCxXQUZEO0FBR0QsU0FORDtBQU9EOztBQUFBLE9BN0xzQyxDQStMdkM7O0FBQ0EsV0FBSyxJQUFJa0gsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3dOLEdBQUcsQ0FBQ3JSLE1BQXhCLEVBQWdDNkQsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQyxZQUFJSCxFQUFFLEdBQUcyTixHQUFHLENBQUN4TixDQUFELENBQUgsQ0FBT0ssT0FBUCxDQUFlUixFQUF4QjtBQUNBLFlBQUlTLEdBQUcsR0FBR3JILFFBQUMsQ0FBQ2lVLEtBQUQsQ0FBRCxDQUFTLENBQVQsRUFBWWpRLGdCQUFaLENBQThCLGFBQVk0QyxFQUFHLElBQTdDLENBQVY7QUFDQTZOLFFBQUFBLElBQUksQ0FBQzlRLElBQUwsQ0FBVTBELEdBQVY7QUFDRCxPQXBNc0MsQ0FzTXZDOzs7QUFDQSxZQUFNc08sVUFBVSxHQUFHM1UsS0FBSyxDQUFDQyxJQUFOLENBQVdtVCxTQUFYLEVBQXNCdE4sR0FBdEIsQ0FBMEIsVUFBVW9DLFFBQVYsRUFBb0I7QUFDL0QsZUFBTyxFQUFQO0FBQ0QsT0FGa0IsQ0FBbkIsQ0F2TXVDLENBMk12Qzs7QUFDQSxlQUFTZ04sU0FBVCxDQUFtQnBCLEtBQW5CLEVBQTBCd0IsT0FBMUIsRUFBbUM7QUFDakM7QUFDQSxjQUFNeEUsSUFBSSxHQUFHc0MsU0FBUyxDQUFDVSxLQUFELENBQVQsQ0FBaUI3UyxZQUFqQixDQUE4QixXQUE5QixDQUFiOztBQUNBLGdCQUFRNlAsSUFBUjtBQUNFLGVBQUssUUFBTDtBQUNFLG1CQUFPeUUsVUFBVSxDQUFDRCxPQUFELENBQWpCOztBQUNGLGVBQUssUUFBTDtBQUNBO0FBQ0UsbUJBQU9BLE9BQVA7QUFMSjtBQU9EOztBQUFBLE9BdE5zQyxDQXdOdkM7O0FBQ0EsZUFBUzNCLFdBQVQsQ0FBcUJWLEtBQXJCLEVBQTRCQyxlQUE1QixFQUE2QzFULE1BQTdDLEVBQXFEO0FBQ25ELFlBQUksQ0FBQ0EsTUFBTSxDQUFDb1UsWUFBUCxDQUFvQixpQkFBcEIsQ0FBTCxFQUE2QyxPQUFPLEtBQVA7QUFDN0MsWUFBSWpOLEtBQUssR0FBRzZPLGVBQWUsQ0FBQ2hXLE1BQUQsRUFBU2dVLFNBQVQsQ0FBM0I7QUFDQTlHLFFBQUFBLElBQUksQ0FBQy9GLEtBQUQsQ0FBSjtBQUNEOztBQUVELHFCQUFlK0YsSUFBZixDQUFvQi9GLEtBQXBCLEVBQTJCO0FBQ3pCLFlBQUlqRyxHQUFHLEdBQUksWUFBV2lHLEtBQUssQ0FBQzZNLFNBQVUsU0FBdEM7QUFDQSxZQUFJclYsR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUNDLEdBQUQsRUFBTWlHLEtBQUssQ0FBQ0EsS0FBWixDQUFwQjtBQUNBeEksUUFBQUEsR0FBRyxHQUFHNUIsSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLENBQU47O0FBQ0EsWUFBSUEsR0FBRyxDQUFDc0osR0FBSixLQUFZLElBQWhCLEVBQXNCO0FBQ3BCakosVUFBQUEsVUFBQSxDQUFXLFlBQVg7QUFDRDtBQUNGOztBQUVELGVBQVNnWCxlQUFULENBQXlCM1csRUFBekIsRUFBNkIyVSxTQUE3QixFQUF3QztBQUN0QyxZQUFJL0ksS0FBSyxHQUFHNUwsRUFBRSxDQUFDdUgsT0FBSCxDQUFXLE9BQVgsQ0FBWjtBQUNBLGVBQU87QUFDTE8sVUFBQUEsS0FBSyxFQUFFO0FBQ0w1RixZQUFBQSxLQUFLLEVBQUUvQixRQUFDLEVBREg7QUFFTDRHLFlBQUFBLEVBQUUsRUFBRS9HLEVBQUUsQ0FBQ3VILE9BQUgsQ0FBV1IsRUFGVjtBQUdMLGFBQUM2RSxLQUFELEdBQVM1TCxFQUFFLENBQUNoQjtBQUhQLFdBREY7QUFNTDJWLFVBQUFBO0FBTkssU0FBUDtBQVFEO0FBRUYsS0FwUEQ7QUFxUEQsR0ExUDRCLENBMlA3Qjs7QUFDRCxDOztBQy9QRDtBQUNBO0NBRUE7O0FBRWUsU0FBU2lDLE1BQVQsR0FBa0I7QUFDL0I7QUFDQTtBQUlBelcsRUFBQUEsUUFBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQmlFLEVBQW5CLENBQXNCLE9BQXRCLEVBQStCb0IsTUFBL0I7O0FBRUEsV0FBU0EsTUFBVCxPQUEwQjtBQUFBLFFBQVY7QUFBQzdFLE1BQUFBO0FBQUQsS0FBVTtBQUN4QixRQUFJQSxNQUFNLENBQUNFLE9BQVAsQ0FBZSxNQUFmLENBQUosRUFBNEJxSSxHQUFHLENBQUN2SSxNQUFNLENBQUNFLE9BQVAsQ0FBZSxNQUFmLENBQUQsQ0FBSDtBQUM1QixRQUFJRixNQUFNLENBQUNFLE9BQVAsQ0FBZSxPQUFmLENBQUosRUFBNkJnTixJQUFJLENBQUNsTixNQUFNLENBQUNFLE9BQVAsQ0FBZSxPQUFmLENBQUQsQ0FBSjs7QUFFN0IsYUFBU2lILEtBQVQsQ0FBZTlILEVBQWYsRUFBbUI7QUFDakIsVUFBSTZXLE1BQU0sR0FBRzdXLEVBQUUsQ0FBQ3VILE9BQUgsQ0FBV1IsRUFBWCxJQUFpQixLQUE5QjtBQUNBLFVBQUk0RSxNQUFNLEdBQUd4TCxRQUFDLENBQUUsYUFBWTBXLE1BQU8sSUFBckIsQ0FBZDtBQUNBLFVBQUkvTyxLQUFLLEdBQUcsRUFBWjtBQUNBQSxNQUFBQSxLQUFLLENBQUNnUCxNQUFOLEdBQWUsRUFBZjtBQUNBaFAsTUFBQUEsS0FBSyxDQUFDaVAsS0FBTixHQUFjLEVBQWQ7QUFFQXBMLE1BQUFBLE1BQU0sQ0FBQzFFLEdBQVAsQ0FBWStQLENBQUQsSUFBTztBQUNoQixZQUFJQSxDQUFDLENBQUN6VyxTQUFGLENBQVlLLFFBQVosQ0FBcUIsSUFBckIsQ0FBSixFQUFnQztBQUM5QmtILFVBQUFBLEtBQUssQ0FBQ2YsRUFBTixHQUFXaVEsQ0FBWDtBQUNBbFAsVUFBQUEsS0FBSyxDQUFDZ1AsTUFBTixDQUFhL1AsRUFBYixHQUFrQmlRLENBQUMsQ0FBQ3pQLE9BQUYsQ0FBVVIsRUFBNUI7QUFDRCxTQUhELE1BR08sSUFBSWlRLENBQUMsQ0FBQ3pXLFNBQUYsQ0FBWUssUUFBWixDQUFxQixNQUFyQixDQUFKLEVBQWtDO0FBQ3ZDa0gsVUFBQUEsS0FBSyxDQUFDd0QsSUFBTixHQUFhMEwsQ0FBYjtBQUNBbFAsVUFBQUEsS0FBSyxDQUFDZ1AsTUFBTixDQUFheEwsSUFBYixHQUFvQjBMLENBQUMsQ0FBQ2hZLFNBQUYsQ0FBWWlZLElBQVosRUFBcEI7QUFDRCxTQUhNLE1BR0EsSUFBSUQsQ0FBQyxDQUFDelcsU0FBRixDQUFZSyxRQUFaLENBQXFCLGFBQXJCLENBQUosRUFBeUM7QUFDOUNrSCxVQUFBQSxLQUFLLENBQUNvUCxXQUFOLEdBQW9CRixDQUFwQjtBQUNBbFAsVUFBQUEsS0FBSyxDQUFDZ1AsTUFBTixDQUFhSSxXQUFiLEdBQTJCRixDQUFDLENBQUNoWSxTQUFGLENBQVlpWSxJQUFaLEVBQTNCO0FBQ0QsU0FITSxNQUdBLElBQUlELENBQUMsQ0FBQ3pXLFNBQUYsQ0FBWUssUUFBWixDQUFxQixVQUFyQixDQUFKLEVBQXNDO0FBQzNDa0gsVUFBQUEsS0FBSyxDQUFDK0YsSUFBTixHQUFhbUosQ0FBYjtBQUNELFNBRk0sTUFFQSxJQUFJQSxDQUFDLENBQUN6VyxTQUFGLENBQVlLLFFBQVosQ0FBcUIsS0FBckIsQ0FBSixFQUFpQztBQUN0Q2tILFVBQUFBLEtBQUssQ0FBQ29CLEdBQU4sR0FBWThOLENBQVo7QUFDRDtBQUNGLE9BZkQ7QUFpQkFsUCxNQUFBQSxLQUFLLENBQUNpUCxLQUFOLENBQVk3TixHQUFaLEdBQWtCcEIsS0FBSyxDQUFDZixFQUFOLENBQVMyRCxzQkFBVCxDQUFnQ3JDLFNBQWhDLENBQTBDLElBQTFDLENBQWxCO0FBQ0FQLE1BQUFBLEtBQUssQ0FBQ2lQLEtBQU4sQ0FBWWxKLElBQVosR0FBbUIvRixLQUFLLENBQUNmLEVBQU4sQ0FBUzJELHNCQUFULENBQWdDQSxzQkFBaEMsQ0FBdURyQyxTQUF2RCxDQUFpRSxJQUFqRSxDQUFuQjtBQUNBUCxNQUFBQSxLQUFLLENBQUNpUCxLQUFOLENBQVlHLFdBQVosR0FBMEJwUCxLQUFLLENBQUNmLEVBQU4sQ0FBUzJELHNCQUFULENBQWdDQSxzQkFBaEMsQ0FBdURBLHNCQUF2RCxDQUE4RXJDLFNBQTlFLENBQXdGLElBQXhGLENBQTFCO0FBQ0FQLE1BQUFBLEtBQUssQ0FBQ2lQLEtBQU4sQ0FBWXpMLElBQVosR0FBbUJ4RCxLQUFLLENBQUNmLEVBQU4sQ0FBUzJELHNCQUFULENBQWdDQSxzQkFBaEMsQ0FBdURBLHNCQUF2RCxDQUE4RUEsc0JBQTlFLENBQXFHckMsU0FBckcsQ0FBK0csSUFBL0csQ0FBbkI7QUFDQVAsTUFBQUEsS0FBSyxDQUFDaVAsS0FBTixDQUFZaFEsRUFBWixHQUFpQmUsS0FBSyxDQUFDZixFQUFOLENBQVMyRCxzQkFBVCxDQUFnQ0Esc0JBQWhDLENBQXVEQSxzQkFBdkQsQ0FBOEVBLHNCQUE5RSxDQUFxR0Esc0JBQXJHLENBQTRIckMsU0FBNUgsQ0FBc0ksSUFBdEksQ0FBakI7QUFFQSxhQUFPUCxLQUFQO0FBQ0Q7O0FBR0QsYUFBU29CLEdBQVQsQ0FBYWxKLEVBQWIsRUFBaUI7QUFDZixVQUFJbVgsR0FBRyxHQUFHclAsS0FBSyxDQUFDOUgsRUFBRCxDQUFmO0FBQ0EsVUFBSW1YLEdBQUcsQ0FBQ0wsTUFBSixDQUFXL1AsRUFBWCxLQUFrQixLQUF0QixFQUE2Qjs7QUFDN0IsVUFBSUssT0FBTyxDQUFDLGdCQUFELENBQVgsRUFBK0I7QUFDN0JKLFFBQUFBLE1BQU0sQ0FBQ21RLEdBQUQsQ0FBTjtBQUNBclEsUUFBQUEsU0FBUyxDQUFDcVEsR0FBRCxDQUFUO0FBQ0Q7QUFDRjs7QUFFRCxtQkFBZXJRLFNBQWYsQ0FBeUJnQixLQUF6QixFQUFnQztBQUM5QixVQUFJeEksR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUMsZUFBRCxFQUFrQjtBQUFDbUYsUUFBQUEsRUFBRSxFQUFFZSxLQUFLLENBQUNnUCxNQUFOLENBQWEvUDtBQUFsQixPQUFsQixDQUFwQjtBQUNBekgsTUFBQUEsR0FBRyxHQUFHLE1BQU01QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBWjs7QUFDQSxVQUFJQSxHQUFHLENBQUNzSixHQUFKLEtBQVksSUFBaEIsRUFBc0I7QUFDcEJqSixRQUFBQSxVQUFBLENBQVcsU0FBWDtBQUNEO0FBQ0Y7O0FBRUQsYUFBU3FILE1BQVQsQ0FBZ0JjLEtBQWhCLEVBQXVCO0FBQ3JCQSxNQUFBQSxLQUFLLENBQUNmLEVBQU4sQ0FBU3ZHLE1BQVQ7QUFDQXNILE1BQUFBLEtBQUssQ0FBQ3dELElBQU4sQ0FBVzlLLE1BQVg7QUFDQXNILE1BQUFBLEtBQUssQ0FBQ29QLFdBQU4sQ0FBa0IxVyxNQUFsQjtBQUNBc0gsTUFBQUEsS0FBSyxDQUFDK0YsSUFBTixDQUFXck4sTUFBWDtBQUNBc0gsTUFBQUEsS0FBSyxDQUFDb0IsR0FBTixDQUFVMUksTUFBVjtBQUNEOztBQUdELGFBQVNxTixJQUFULENBQWM3TixFQUFkLEVBQWtCO0FBQ2hCLFVBQUltWCxHQUFHLEdBQUdyUCxLQUFLLENBQUM5SCxFQUFELENBQWY7O0FBQ0EsVUFBSW1YLEdBQUcsQ0FBQ0wsTUFBSixDQUFXL1AsRUFBWCxLQUFrQixLQUF0QixFQUE2QjtBQUMzQjhFLFFBQUFBLE1BQU0sQ0FBQ3NMLEdBQUcsQ0FBQ0wsTUFBTCxDQUFOO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsWUFBSSxDQUFDSyxHQUFHLENBQUNMLE1BQUosQ0FBV3hMLElBQVosSUFBb0IsQ0FBQzZMLEdBQUcsQ0FBQ0wsTUFBSixDQUFXSSxXQUFwQyxFQUFpRCxPQUFPLEtBQVA7QUFDakR2UCxRQUFBQSxNQUFNLENBQUN3UCxHQUFELENBQU47QUFDRDtBQUNGOztBQUVELG1CQUFldEwsTUFBZixDQUFzQmlMLE1BQXRCLEVBQThCO0FBQzVCLFVBQUl4WCxHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FBQyxlQUFELEVBQWtCa1YsTUFBbEIsQ0FBcEI7O0FBQ0EsVUFBSSxNQUFNcFosSUFBSSxDQUFDQyxLQUFMLENBQVcyQixHQUFYLEVBQWdCOFgsT0FBMUIsRUFBbUM7QUFDakN6WCxRQUFBQSxVQUFBLENBQVcsV0FBWDtBQUNEO0FBQ0Y7O0FBRUQsYUFBUzBYLFVBQVQsQ0FBb0J2UCxLQUFwQixFQUEwQjtBQUN4QkEsTUFBQUEsS0FBSyxDQUFDd0QsSUFBTixDQUFXdE0sU0FBWCxHQUF1QixFQUF2QjtBQUNBOEksTUFBQUEsS0FBSyxDQUFDb1AsV0FBTixDQUFrQmxZLFNBQWxCLEdBQThCLEVBQTlCO0FBQ0Q7O0FBRUQsYUFBU3NZLFdBQVQsQ0FBcUJ4UCxLQUFyQixFQUEyQjtBQUN6QixVQUFJeVAsV0FBVyxHQUFHcFgsUUFBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0IsQ0FBeEIsQ0FBbEI7QUFDQW9YLE1BQUFBLFdBQVcsQ0FBQ3JQLE1BQVosQ0FBbUJKLEtBQUssQ0FBQ2lQLEtBQU4sQ0FBWWhRLEVBQS9CO0FBQ0F3USxNQUFBQSxXQUFXLENBQUNyUCxNQUFaLENBQW1CSixLQUFLLENBQUNpUCxLQUFOLENBQVl6TCxJQUEvQjtBQUNBaU0sTUFBQUEsV0FBVyxDQUFDclAsTUFBWixDQUFtQkosS0FBSyxDQUFDaVAsS0FBTixDQUFZRyxXQUEvQjtBQUNBSyxNQUFBQSxXQUFXLENBQUNyUCxNQUFaLENBQW1CSixLQUFLLENBQUNpUCxLQUFOLENBQVlsSixJQUEvQjtBQUNBMEosTUFBQUEsV0FBVyxDQUFDclAsTUFBWixDQUFtQkosS0FBSyxDQUFDaVAsS0FBTixDQUFZN04sR0FBL0I7QUFDRDs7QUFFRCxhQUFTc08sc0JBQVQsQ0FBZ0MxUCxLQUFoQyxFQUF1Q2YsRUFBdkMsRUFBMEM7QUFDeENlLE1BQUFBLEtBQUssQ0FBQ2lQLEtBQU4sQ0FBWWhRLEVBQVosQ0FBZVEsT0FBZixDQUF1QlIsRUFBdkIsR0FBNEJBLEVBQTVCO0FBQ0FlLE1BQUFBLEtBQUssQ0FBQ2lQLEtBQU4sQ0FBWWhRLEVBQVosQ0FBZS9ILFNBQWYsR0FBMkIrSCxFQUEzQjtBQUNBZSxNQUFBQSxLQUFLLENBQUNpUCxLQUFOLENBQVl6TCxJQUFaLENBQWlCL0QsT0FBakIsQ0FBeUJSLEVBQXpCLEdBQThCQSxFQUE5QjtBQUNBZSxNQUFBQSxLQUFLLENBQUNpUCxLQUFOLENBQVl6TCxJQUFaLENBQWlCdE0sU0FBakIsR0FBNkI4SSxLQUFLLENBQUN3RCxJQUFOLENBQVd0TSxTQUFYLENBQXFCaVksSUFBckIsRUFBN0I7QUFDQW5QLE1BQUFBLEtBQUssQ0FBQ2lQLEtBQU4sQ0FBWUcsV0FBWixDQUF3QjNQLE9BQXhCLENBQWdDUixFQUFoQyxHQUFxQ0EsRUFBckM7QUFDQWUsTUFBQUEsS0FBSyxDQUFDaVAsS0FBTixDQUFZRyxXQUFaLENBQXdCbFksU0FBeEIsR0FBb0M4SSxLQUFLLENBQUNvUCxXQUFOLENBQWtCbFksU0FBbEIsQ0FBNEJpWSxJQUE1QixFQUFwQztBQUNBblAsTUFBQUEsS0FBSyxDQUFDaVAsS0FBTixDQUFZbEosSUFBWixDQUFpQnRHLE9BQWpCLENBQXlCUixFQUF6QixHQUE4QkEsRUFBOUI7QUFDQWUsTUFBQUEsS0FBSyxDQUFDaVAsS0FBTixDQUFZN04sR0FBWixDQUFnQjNCLE9BQWhCLENBQXdCUixFQUF4QixHQUE2QkEsRUFBN0I7QUFDRDs7QUFFRCxtQkFBZVksTUFBZixDQUFzQkcsS0FBdEIsRUFBNkI7QUFDM0IsVUFBSXhJLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDLGVBQUQsRUFBa0JrRyxLQUFLLENBQUNnUCxNQUF4QixDQUFwQjtBQUNBeFgsTUFBQUEsR0FBRyxHQUFHLE1BQU01QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBWjs7QUFFQSxVQUFJQSxHQUFHLENBQUN5SCxFQUFSLEVBQVk7QUFFVnlRLFFBQUFBLHNCQUFzQixDQUFDMVAsS0FBRCxFQUFReEksR0FBRyxDQUFDeUgsRUFBSixHQUFPLENBQWYsQ0FBdEI7QUFDQXVRLFFBQUFBLFdBQVcsQ0FBQ3hQLEtBQUQsQ0FBWDtBQUNBdVAsUUFBQUEsVUFBVSxDQUFDdlAsS0FBRCxDQUFWO0FBRUFuSSxRQUFBQSxVQUFBLENBQVcsV0FBWDtBQUNEO0FBRUY7QUFHRjtBQUNGLEM7O0FDeElEO0FBRUE7QUFHZSxTQUFTOFgsUUFBVCxHQUFtQjtBQUNsQztBQUVDLEM7O0FDUkQ7QUFFZSxTQUFTQyxNQUFULEdBQWtCO0FBQy9CLFdBQVNDLEdBQVQsR0FBZTtBQUNiLFVBQU05VCxDQUFDLEdBQUcxRCxRQUFDLENBQUMsY0FBRCxDQUFYOztBQUNBLFNBQUssSUFBSTZXLENBQVQsSUFBY25ULENBQWQsRUFBaUI7QUFDZixVQUFJbVQsQ0FBQyxDQUFDeFQsT0FBTixFQUFlO0FBQ2IsZUFBT3dULENBQUMsQ0FBQ2xZLEtBQVQ7QUFDRDtBQUNGOztBQUNELFdBQU8sR0FBUDtBQUNEO0FBQ0YsQzs7QUNaRDtBQUVBO0FBQ0E7QUFFZSxTQUFTMFUsSUFBVCxHQUFnQjtBQUU3QixNQUFJeFAsSUFBSSxHQUFHN0QsUUFBQyxDQUFDLHFCQUFELENBQUQsQ0FBeUIsQ0FBekIsQ0FBWDs7QUFDQSxNQUFJNkQsSUFBSixFQUFVO0FBQ1I3RCxJQUFBQSxRQUFDLENBQUM2RCxJQUFELENBQUQsQ0FBUUksRUFBUixDQUFXLE9BQVgsRUFBb0JrRCxXQUFwQjtBQUNEOztBQUVELGlCQUFlQSxXQUFmLE9BQXFDO0FBQUEsUUFBVjtBQUFDM0csTUFBQUE7QUFBRCxLQUFVOztBQUNuQyxRQUFJLENBQUMsQ0FBQ0EsTUFBTSxDQUFDRSxPQUFQLENBQWUsT0FBZixDQUFOLEVBQStCO0FBRTdCLFVBQUkrVyxPQUFPLEdBQUd6WCxRQUFDLENBQUMsWUFBRCxDQUFELENBQWdCLENBQWhCLENBQWQ7QUFDQSxVQUFJMkIsSUFBSSxHQUFHK1YsUUFBUSxDQUFDRCxPQUFELENBQW5CO0FBRUEsVUFBSXRZLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDLHNCQUFELEVBQXlCRSxJQUF6QixDQUFwQjs7QUFDQSxVQUFJeEMsR0FBRyxLQUFLLElBQVosRUFBa0I7QUFDaEJLLFFBQUFBLFVBQUEsQ0FBVyxXQUFYO0FBQ0Q7QUFDRixLQVRELE1BU08sSUFBSWdCLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsT0FBMUIsQ0FBSixFQUF3QztBQUM3QyxVQUFJZ1csTUFBTSxHQUFHelcsUUFBQyxDQUFDLHFCQUFELENBQWQ7QUFDQSxVQUFJMUMsR0FBRyxHQUFHLEVBQVY7QUFDQSxTQUFHd0osR0FBSCxDQUFPbEMsSUFBUCxDQUFZNlIsTUFBWixFQUFvQixVQUFVa0IsS0FBVixFQUFpQjtBQUNuQyxZQUFJalUsQ0FBQyxHQUFHaVUsS0FBSyxDQUFDcE4sc0JBQU4sQ0FBNkIxTCxTQUFyQztBQUNBdkIsUUFBQUEsR0FBRyxJQUFFb0csQ0FBQyxHQUFDLEdBQVA7QUFDRCxPQUhEO0FBSUUsVUFBSWtVLEdBQUcsR0FBR3BYLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLE9BQWYsQ0FBVjtBQUNBa1gsTUFBQUEsR0FBRyxDQUFDeFEsT0FBSixDQUFZekksS0FBWixHQUFvQnJCLEdBQXBCO0FBQ0g7QUFDRjs7QUFFRCxXQUFTbVosTUFBVCxHQUFrQjtBQUNoQixRQUFJa0IsS0FBSyxHQUFHM1gsUUFBQyxDQUFDLGdCQUFELENBQWI7QUFDQSxRQUFJeVcsTUFBTSxHQUFHLEVBQWI7QUFDQSxPQUFHM1AsR0FBSCxDQUFPbEMsSUFBUCxDQUFZK1MsS0FBWixFQUFvQkUsQ0FBRCxJQUFPO0FBQ3hCLFVBQUl2YSxHQUFHLEdBQUd1YSxDQUFDLENBQUN0TixzQkFBRixDQUF5QjFMLFNBQXpCLEdBQXFDLEdBQS9DO0FBQ0E0WCxNQUFBQSxNQUFNLElBQUluWixHQUFWO0FBQ0QsS0FIRCxFQUdHbVosTUFISDtBQUlBLFdBQU9BLE1BQVA7QUFDRDs7QUFFRCxXQUFTeFAsT0FBVCxHQUFtQjtBQUNqQixVQUFNQSxPQUFPLEdBQUdqSCxRQUFDLENBQUMsY0FBRCxDQUFqQjs7QUFDQSxTQUFLLElBQUk2VyxDQUFULElBQWM1UCxPQUFkLEVBQXVCO0FBQ3JCLFVBQUk0UCxDQUFDLENBQUN2TCxRQUFOLEVBQWdCO0FBQ2QsZUFBT3VMLENBQUMsQ0FBQ2xZLEtBQVQ7QUFDRDtBQUNGOztBQUNELFdBQU8sR0FBUDtBQUNEOztBQUdELFdBQVMrWSxRQUFULENBQWtCbFgsTUFBbEIsRUFBMEI7QUFDeEIsV0FBTztBQUNMb0csTUFBQUEsRUFBRSxFQUFFNUcsUUFBQyxDQUFDUSxNQUFELENBQUQsQ0FBVWlGLElBQVYsQ0FBZSxLQUFmLEVBQXNCNUcsU0FEckI7QUFFTHNNLE1BQUFBLElBQUksRUFBRW5MLFFBQUMsQ0FBQ1EsTUFBRCxDQUFELENBQVVpRixJQUFWLENBQWUsT0FBZixFQUF3QjVHLFNBRnpCO0FBR0xpWixNQUFBQSxPQUFPLEVBQUU5WCxRQUFDLENBQUNRLE1BQUQsQ0FBRCxDQUFVaUYsSUFBVixDQUFlLFNBQWYsRUFBMEI1RyxTQUg5QjtBQUlMa1osTUFBQUEsVUFBVSxFQUFFL1gsUUFBQyxDQUFDUSxNQUFELENBQUQsQ0FBVWlGLElBQVYsQ0FBZSxTQUFmLEVBQTBCNUcsU0FKakM7QUFLTG1aLE1BQUFBLFNBQVMsRUFBRWhZLFFBQUMsQ0FBQ1EsTUFBRCxDQUFELENBQVVpRixJQUFWLENBQWUsT0FBZixFQUF3QjVHLFNBTDlCO0FBTUxvWixNQUFBQSxLQUFLLEVBQUVqWSxRQUFDLENBQUNRLE1BQUQsQ0FBRCxDQUFVaUYsSUFBVixDQUFlLFFBQWYsRUFBeUI1RyxTQU4zQjtBQU9MRyxNQUFBQSxLQUFLLEVBQUVnQixRQUFDLENBQUNRLE1BQUQsQ0FBRCxDQUFVaUYsSUFBVixDQUFlLFFBQWYsRUFBeUI1RyxTQVAzQjtBQVFMcVosTUFBQUEsS0FBSyxFQUFFbFksUUFBQyxDQUFDUSxNQUFELENBQUQsQ0FBVWlGLElBQVYsQ0FBZSxRQUFmLEVBQXlCNUcsU0FSM0I7QUFTTHNaLE1BQUFBLEtBQUssRUFBRW5ZLFFBQUMsQ0FBQ1EsTUFBRCxDQUFELENBQVVpRixJQUFWLENBQWUsUUFBZixFQUF5QjVHLFNBVDNCO0FBVUxvSSxNQUFBQSxPQUFPLEVBQUVBLE9BQU8sRUFWWDtBQVdMdVEsTUFBQUEsR0FBRyxFQUFFRCxNQUFNLEVBWE47QUFZTGQsTUFBQUEsTUFBTSxFQUFFQSxNQUFNO0FBWlQsS0FBUDtBQWNEO0FBQ0YsQzs7QUN2RUQ7QUFDQTtBQUVBLElBQUkyQixRQUFRLEdBQUdwWSxRQUFDLENBQUMsZ0JBQUQsQ0FBRCxDQUFvQixDQUFwQixDQUFmOztBQUNBLElBQUlvWSxRQUFKLEVBQWM7QUFDWnBZLEVBQUFBLFFBQUMsQ0FBQ29ZLFFBQUQsQ0FBRCxDQUFZblUsRUFBWixDQUFlLE9BQWYsRUFBd0JrRCxxQkFBeEI7QUFDQW5ILEVBQUFBLFFBQUMsQ0FBQ29ZLFFBQUQsQ0FBRCxDQUFZblUsRUFBWixDQUFlLE9BQWYsRUFBd0JrSSxXQUF4QjtBQUNEOztBQUVELFNBQVNBLFdBQVQsT0FBK0I7QUFBQSxNQUFWO0FBQUMzTCxJQUFBQTtBQUFELEdBQVU7O0FBQzdCLE1BQUlBLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQkssUUFBakIsQ0FBMEIsVUFBMUIsQ0FBSixFQUEyQztBQUN6QyxRQUFJNFgsZ0JBQWdCLEdBQUdyWSxRQUFDLENBQUMsMEJBQUQsQ0FBRCxDQUE4QixDQUE5QixDQUF2Qjs7QUFDQSxRQUFJLENBQUNRLE1BQU0sQ0FBQzNCLFNBQVosRUFBdUI7QUFDckJ3WixNQUFBQSxnQkFBZ0IsQ0FBQ2pZLFNBQWpCLENBQTJCQyxNQUEzQixDQUFrQyxRQUFsQztBQUNELEtBRkQsTUFFTztBQUNMZ1ksTUFBQUEsZ0JBQWdCLENBQUNqWSxTQUFqQixDQUEyQkUsR0FBM0IsQ0FBK0IsUUFBL0I7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsZUFBZTZHLHFCQUFmLFFBQXFDO0FBQUEsTUFBVjtBQUFDM0csSUFBQUE7QUFBRCxHQUFVO0FBQ25DLE1BQUlzSyxNQUFNLEdBQUd0SyxNQUFNLENBQUM0RyxPQUFQLENBQWVSLEVBQTVCO0FBQ0EsTUFBSTBSLGNBQWMsR0FBR3RZLFFBQUMsQ0FBQyxnQkFBRCxDQUFELENBQW9CLENBQXBCLENBQXJCO0FBQ0EsTUFBSXVZLFdBQVcsR0FBR3ZZLFFBQUMsQ0FBQyxtQkFBRCxDQUFuQjtBQUNBLE1BQUlxWSxnQkFBZ0IsR0FBR3JZLFFBQUMsQ0FBQywwQkFBRCxDQUFELENBQThCLENBQTlCLENBQXZCO0FBQ0EsTUFBSStHLENBQUMsR0FBR3dSLFdBQVcsQ0FBQzlJLE9BQVosQ0FBb0I0SSxnQkFBcEIsQ0FBUjs7QUFFQSxNQUFJN1gsTUFBTSxDQUFDb0csRUFBUCxLQUFjLE1BQWxCLEVBQTBCO0FBQ3hCNFIsSUFBQUEsU0FBUztBQUNWLEdBRkQsTUFFTyxJQUFJaFksTUFBTSxDQUFDb0csRUFBUCxLQUFjLE1BQWxCLEVBQTBCO0FBQy9CNlIsSUFBQUEsU0FBUztBQUNWLEdBRk0sTUFFQSxJQUFJalksTUFBTSxDQUFDNEcsT0FBUCxDQUFlK0ssVUFBbkIsRUFBK0I7QUFDcEN1RyxJQUFBQSxRQUFRO0FBQ1QsR0FGTSxNQUVBLElBQUlsWSxNQUFNLENBQUNvRyxFQUFQLEtBQWMsUUFBbEIsRUFBNEI7QUFDakMrUixJQUFBQSxNQUFNO0FBQ1A7O0FBRUQsaUJBQWVBLE1BQWYsR0FBd0I7QUFDdEIsUUFBSXBRLFNBQVMsR0FBRyxNQUFNK0YsVUFBVSxDQUFDeEQsTUFBRCxDQUFoQztBQUNBOE4sSUFBQUEsWUFBWSxDQUFDclEsU0FBRCxDQUFaO0FBQ0EsUUFBSXNRLEdBQUcsR0FBR0MsU0FBUyxFQUFuQjtBQUNBLFFBQUkzWixHQUFHLEdBQUcsTUFBTXNDLElBQUksQ0FBQyxnQ0FBRCxFQUFtQ29YLEdBQW5DLENBQXBCOztBQUNBLFFBQUl4YixZQUFZLENBQUM4QixHQUFELENBQWhCLEVBQXVCO0FBQ3JCQSxNQUFBQSxHQUFHLEdBQUc1QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBTjs7QUFDQSxVQUFJQSxHQUFHLENBQUNzSixHQUFKLEtBQVksSUFBaEIsRUFBc0I7QUFDcEJqSixRQUFBQSxVQUFBLENBQVdMLEdBQUcsQ0FBQ3NKLEdBQWY7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsV0FBU3FRLFNBQVQsR0FBcUI7QUFDbkIsV0FBTztBQUNMdlIsTUFBQUEsTUFBTSxFQUFFdUQsTUFESDtBQUVMcEQsTUFBQUEsV0FBVyxFQUFFNlEsV0FBVyxDQUFDclYsTUFGcEI7QUFHTDZJLE1BQUFBLElBQUksRUFBRyxhQUFZbE8sUUFBUSxDQUFDb1YsT0FBVCxDQUFpQjlILElBQUssR0FBbkMsR0FBd0N0TixRQUFRLENBQUNxVixlQUFULENBQXlCQyxTQUhsRTtBQUlMQyxNQUFBQSxRQUFRLEVBQUVwVCxRQUFDLENBQUMsWUFBRCxDQUFELENBQWdCLENBQWhCLEVBQW1CbkIsU0FKeEI7QUFLTGthLE1BQUFBLFFBQVEsRUFBRS9ZLFFBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCLENBQXJCLEVBQXdCbkI7QUFMN0IsS0FBUDtBQU9EOztBQUVELFdBQVM2WixRQUFULEdBQW9CO0FBQ2xCLFFBQUlsWSxNQUFNLEtBQUs2WCxnQkFBZixFQUFpQyxPQUFPLEtBQVA7QUFDakMsUUFBSVcsYUFBYSxHQUFHeFksTUFBcEI7QUFDQXlZLElBQUFBLGNBQWMsQ0FBQ0QsYUFBRCxFQUFnQlYsY0FBaEIsQ0FBZDtBQUNBWSxJQUFBQSxTQUFTLENBQUNGLGFBQUQsRUFBZ0JYLGdCQUFoQixDQUFUO0FBQ0Q7O0FBRUQsV0FBU0csU0FBVCxHQUFxQjtBQUNuQixRQUFJelIsQ0FBQyxHQUFHLENBQVIsRUFBVyxPQUFPLEtBQVA7QUFDWCxRQUFJaVMsYUFBYSxHQUFHVCxXQUFXLENBQUN4UixDQUFDLEdBQUcsQ0FBTCxDQUEvQjtBQUNBa1MsSUFBQUEsY0FBYyxDQUFDRCxhQUFELEVBQWdCVixjQUFoQixDQUFkO0FBQ0FZLElBQUFBLFNBQVMsQ0FBQ0YsYUFBRCxFQUFnQlgsZ0JBQWhCLENBQVQ7QUFDRDs7QUFFRCxXQUFTSSxTQUFULEdBQXFCO0FBQ25CLFFBQUkxUixDQUFDLEdBQUd3UixXQUFXLENBQUNyVixNQUFaLEdBQXFCLENBQTdCLEVBQWdDLE9BQU8sS0FBUDtBQUNoQyxRQUFJOFYsYUFBYSxHQUFHVCxXQUFXLENBQUN4UixDQUFDLEdBQUcsQ0FBTCxDQUEvQjtBQUNBa1MsSUFBQUEsY0FBYyxDQUFDRCxhQUFELEVBQWdCVixjQUFoQixDQUFkO0FBQ0FZLElBQUFBLFNBQVMsQ0FBQ0YsYUFBRCxFQUFnQlgsZ0JBQWhCLENBQVQ7QUFDRDtBQUNGOztBQUdELFNBQVNPLFlBQVQsQ0FBc0JyUSxTQUF0QixFQUFpQztBQUMvQkEsRUFBQUEsU0FBUyxDQUFDOUUsT0FBVixDQUFtQndFLENBQUQsSUFBTztBQUN2QixRQUFJd0UsSUFBSSxHQUFHeEUsQ0FBQyxDQUFDckIsRUFBYjtBQUNBLFFBQUl1UyxJQUFJLEdBQUduWixRQUFDLENBQUUscUJBQW9CeU0sSUFBSyxJQUEzQixDQUFaO0FBQ0EsUUFBSTJNLEtBQUssR0FBR0QsSUFBSSxDQUFDblgsYUFBTCxDQUFtQixXQUFuQixDQUFaO0FBQ0FpRyxJQUFBQSxDQUFDLENBQUNhLE9BQUYsQ0FBVXJGLE9BQVYsQ0FBbUJrTCxDQUFELElBQU87QUFDdkIwSyxNQUFBQSxTQUFTLENBQUMxSyxDQUFELEVBQUkySyxVQUFKLEVBQWdCLElBQWhCLENBQVQ7QUFFRCxLQUhELEVBR0d0VSxJQUhILENBR1FvVSxLQUhSO0FBS0QsR0FURCxFQUQrQixDQWEvQjtBQUNBO0FBQ0E7QUFDQTtBQUNEOztBQUdELGVBQWU5SyxVQUFmLENBQTBCMUgsRUFBMUIsRUFBOEI7QUFDNUIsTUFBSXpILEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFDLG9DQUFELEVBQXVDO0FBQUNtRixJQUFBQTtBQUFELEdBQXZDLENBQXBCO0FBQ0F6SCxFQUFBQSxHQUFHLEdBQUc1QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBTjtBQUNBLFNBQU9BLEdBQVA7QUFDRDs7QUFFRCxTQUFTK1osU0FBVCxDQUFtQkYsYUFBbkIsRUFBa0NYLGdCQUFsQyxFQUFvRDtBQUNsREEsRUFBQUEsZ0JBQWdCLENBQUNqWSxTQUFqQixDQUEyQjZGLE1BQTNCLENBQWtDLFFBQWxDO0FBQ0ErUyxFQUFBQSxhQUFhLENBQUM1WSxTQUFkLENBQXdCNkYsTUFBeEIsQ0FBK0IsUUFBL0I7QUFDRDs7QUFFRCxTQUFTZ1QsY0FBVCxDQUF3Qk0sZUFBeEIsRUFBeUNqQixjQUF6QyxFQUF5RDtBQUN2RCxNQUFJa0IsYUFBYSxHQUFHRCxlQUFlLENBQUNuUyxPQUFoQixDQUF3QitLLFVBQTVDO0FBQ0EsTUFBSXNILFdBQVcsR0FBR3paLFFBQUMsQ0FBRSxzQkFBcUJ3WixhQUFjLElBQXJDLENBQUQsQ0FBMkMsQ0FBM0MsQ0FBbEI7QUFDQUMsRUFBQUEsV0FBVyxDQUFDclosU0FBWixDQUFzQjZGLE1BQXRCLENBQTZCLE1BQTdCO0FBQ0FxUyxFQUFBQSxjQUFjLENBQUNsWSxTQUFmLENBQXlCNkYsTUFBekIsQ0FBZ0MsTUFBaEM7QUFDRDs7QUFFRCxTQUFTb1QsU0FBVCxDQUFtQkssSUFBbkIsRUFBeUI3WixFQUF6QixFQUE2QjhaLFdBQTdCLEVBQTBDO0FBQ3hDQyxFQUFBQSxPQUFPLENBQUNGLElBQUQsRUFBTzdaLEVBQVAsRUFBVzhaLFdBQVgsQ0FBUDtBQUNBRSxFQUFBQSxlQUFlLENBQUNoYyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsU0FBeEIsQ0FBRCxDQUFmO0FBQ0Q7O0FBRUQsU0FBUytiLGVBQVQsQ0FBeUJoYSxFQUF6QixFQUE2QjtBQUMzQkEsRUFBQUEsRUFBRSxDQUFDaWEsS0FBSDs7QUFDQSxNQUFJLE9BQU8xYixNQUFNLENBQUMyYixZQUFkLElBQThCLFdBQTlCLElBQ0YsT0FBT2xjLFFBQVEsQ0FBQ21jLFdBQWhCLElBQStCLFdBRGpDLEVBQzhDO0FBQzVDLFFBQUlDLEtBQUssR0FBR3BjLFFBQVEsQ0FBQ21jLFdBQVQsRUFBWjtBQUNBQyxJQUFBQSxLQUFLLENBQUNDLGtCQUFOLENBQXlCcmEsRUFBekI7QUFDQW9hLElBQUFBLEtBQUssQ0FBQ0UsUUFBTixDQUFlLEtBQWY7QUFDQSxRQUFJbkwsR0FBRyxHQUFHNVEsTUFBTSxDQUFDMmIsWUFBUCxFQUFWO0FBQ0EvSyxJQUFBQSxHQUFHLENBQUNvTCxlQUFKO0FBQ0FwTCxJQUFBQSxHQUFHLENBQUNxTCxRQUFKLENBQWFKLEtBQWI7QUFDRCxHQVJELE1BUU8sSUFBSSxPQUFPcGMsUUFBUSxDQUFDcUMsSUFBVCxDQUFjb2EsZUFBckIsSUFBd0MsV0FBNUMsRUFBeUQ7QUFDOUQsUUFBSUMsU0FBUyxHQUFHMWMsUUFBUSxDQUFDcUMsSUFBVCxDQUFjb2EsZUFBZCxFQUFoQjtBQUNBQyxJQUFBQSxTQUFTLENBQUNDLGlCQUFWLENBQTRCM2EsRUFBNUI7QUFDQTBhLElBQUFBLFNBQVMsQ0FBQ0osUUFBVixDQUFtQixLQUFuQjtBQUNBSSxJQUFBQSxTQUFTLENBQUNsUCxNQUFWO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTdU8sT0FBVCxDQUFpQkYsSUFBakIsRUFBdUIxYixPQUF2QixFQUFnQzJiLFdBQWhDLEVBQTZDO0FBQzNDLE1BQUljLElBQUksR0FBRyxJQUFJalosTUFBSixDQUFXa1ksSUFBWCxFQUFpQixHQUFqQixDQUFYO0FBQ0EsTUFBSWdCLElBQUksR0FBRyw4QkFBOEJoQixJQUE5QixHQUFxQyxTQUFoRDtBQUNBMWIsRUFBQUEsT0FBTyxDQUFDNkUsU0FBUixHQUFvQjdFLE9BQU8sQ0FBQzZFLFNBQVIsQ0FBa0I4WCxPQUFsQixDQUEwQkYsSUFBMUIsRUFBZ0NDLElBQWhDLENBQXBCO0FBQ0FmLEVBQUFBLFdBQVcsSUFBSTNiLE9BQU8sQ0FBQ2lDLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDLFNBQVNJLE1BQVQsR0FBa0I7QUFDakV1YSxJQUFBQSxlQUFlO0FBQ2Z2QixJQUFBQSxTQUFTLENBQUMsS0FBRCxDQUFUO0FBQ0FyYixJQUFBQSxPQUFPLENBQUM2YyxtQkFBUixDQUE0QixPQUE1QixFQUFxQ3hhLE1BQXJDO0FBQ0QsR0FKYyxDQUFmO0FBS0Q7O0FBRUQsU0FBU3VhLGVBQVQsQ0FBeUJuZCxDQUF6QixFQUE0QjtBQUMxQixNQUFJTyxPQUFPLEdBQUdILFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixTQUF4QixDQUFkO0FBQ0EsTUFBSWlKLENBQUMsR0FBRy9JLE9BQU8sQ0FBQzZFLFNBQVIsQ0FBa0JpWSxVQUFsQixDQUE2QiwrQ0FBN0IsRUFBOEUsRUFBOUUsQ0FBUjtBQUNBL1QsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUMrVCxVQUFGLENBQWEsU0FBYixFQUF3QixFQUF4QixDQUFKO0FBQ0E5YyxFQUFBQSxPQUFPLENBQUM2RSxTQUFSLEdBQW9Ca0UsQ0FBcEI7QUFDQThTLEVBQUFBLGVBQWUsQ0FBQ2hjLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixTQUF4QixDQUFELENBQWY7QUFDRCxDOztBQ2pLRDtBQUNBO0FBRWUsU0FBU2lkLFdBQVQsR0FBZ0I7QUFDN0IsTUFBSUMsTUFBTSxHQUFHaGIsUUFBQyxDQUFDLGdCQUFELENBQWQ7QUFFQSxLQUFHOEcsR0FBSCxDQUFPbEMsSUFBUCxDQUFZb1csTUFBWixFQUFvQixVQUFVRCxLQUFWLEVBQWlCO0FBQ25DL2EsSUFBQUEsUUFBQyxDQUFDK2EsS0FBRCxDQUFELENBQVM5VyxFQUFULENBQVksT0FBWixFQUFvQmtELFdBQXBCOztBQUVBLGFBQVNBLFdBQVQsT0FBK0I7QUFBQSxVQUFWO0FBQUMzRyxRQUFBQTtBQUFELE9BQVU7QUFDN0IsVUFBSXlhLElBQUksR0FBR3phLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLE9BQWYsQ0FBWDtBQUNBcWEsTUFBQUEsS0FBSyxDQUFDM1QsT0FBTixDQUFjekksS0FBZCxHQUFzQnNjLElBQUksQ0FBQzdULE9BQUwsQ0FBYXpJLEtBQW5DO0FBQ0Q7QUFFRixHQVJEO0FBVUQsQzs7QUNoQkQ7QUFDQTtBQUVlLFNBQVN1YyxXQUFULEdBQXVCO0FBRXBDLFdBQVNDLFdBQVQsR0FBc0I7QUFDcEIsUUFBSUMsS0FBSixFQUFVO0FBQ1IsVUFBSTlQLFFBQVEsR0FBRyxHQUFHeEUsR0FBSCxDQUFPbEMsSUFBUCxDQUFZd1csS0FBWixFQUFtQixVQUFVL1AsTUFBVixFQUFrQjtBQUNsRCxZQUFJZ1EsS0FBSyxHQUFHaFEsTUFBTSxDQUFDckgsZ0JBQVAsQ0FBd0IsWUFBeEIsQ0FBWjtBQUNBLFlBQUlzWCxJQUFJLEdBQUcsR0FBR3hVLEdBQUgsQ0FBT2xDLElBQVAsQ0FBWXlXLEtBQVosRUFBbUIsVUFBVUUsSUFBVixFQUFnQjtBQUM1QyxpQkFBT0EsSUFBSSxDQUFDblUsT0FBTCxDQUFhUixFQUFwQjtBQUNELFNBRlUsQ0FBWDtBQUdBLFlBQUlpUyxHQUFHLEdBQUcsRUFBVjtBQUNBQSxRQUFBQSxHQUFHLENBQUNwTixLQUFKLEdBQWFKLE1BQU0sQ0FBQ2pFLE9BQVAsQ0FBZXFFLEtBQTVCO0FBQ0FvTixRQUFBQSxHQUFHLENBQUN0RSxHQUFKLEdBQVUrRyxJQUFWO0FBQ0EsZUFBT3pDLEdBQVA7QUFDRCxPQVRjLENBQWY7QUFVRCxLQVptQixDQWFwQjs7QUFDRDs7QUFFRCxNQUFJdUMsS0FBSyxHQUFHcGIsUUFBQyxDQUFDLGlCQUFELENBQWI7O0FBQ0EsTUFBSW9iLEtBQUosRUFBVztBQUVULE9BQUczWCxPQUFILENBQVdtQixJQUFYLENBQWdCd1csS0FBaEIsRUFBdUIsVUFBVS9QLE1BQVYsRUFBa0I7QUFFdkNBLE1BQUFBLE1BQU0sQ0FBQ3BMLGdCQUFQLENBQXdCLE9BQXhCLEVBQWlDa0gsV0FBakMsRUFBOEMsS0FBOUM7QUFDQWtFLE1BQUFBLE1BQU0sQ0FBQ3BMLGdCQUFQLENBQXdCLE1BQXhCLEVBQWdDdWIsVUFBaEMsRUFBNEMsS0FBNUM7O0FBRUEsZUFBU0EsVUFBVCxPQUE4QjtBQUFBLFlBQVY7QUFBQ2hiLFVBQUFBO0FBQUQsU0FBVTtBQUM1QixZQUFJZixJQUFJLEdBQUdPLFFBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUXlGLElBQVIsQ0FBYSxPQUFiLENBQVg7O0FBQ0EsWUFBSWhHLElBQUosRUFBVTtBQUNSQSxVQUFBQSxJQUFJLENBQUNXLFNBQUwsQ0FBZUMsTUFBZixDQUFzQixNQUF0QjtBQUNEO0FBQ0Y7O0FBRUQsZUFBUzhHLFdBQVQsUUFBK0I7QUFBQSxZQUFWO0FBQUMzRyxVQUFBQTtBQUFELFNBQVU7QUFDN0IsWUFBSTRhLEtBQUssR0FBRzVhLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLGdCQUFmLENBQVosQ0FENkIsQ0FFckM7O0FBQ1EsWUFBSUYsTUFBTSxDQUFDRSxPQUFQLENBQWUsUUFBZixLQUEwQixDQUFDLFdBQUQsRUFBYzZVLFFBQWQsQ0FBdUIvVSxNQUFNLENBQUNJLFNBQTlCLENBQTlCLEVBQXlFO0FBQ3ZFO0FBQ0EsY0FBSTRFLEVBQUUsR0FBRzRWLEtBQUssQ0FBQ3BaLGFBQU4sQ0FBb0IsSUFBcEIsQ0FBVDtBQUNBd0QsVUFBQUEsRUFBRSxDQUFDcEYsU0FBSCxDQUFhNkYsTUFBYixDQUFvQixNQUFwQixFQUh1RSxDQUtqRjtBQUNTLFNBTkQsTUFNTyxJQUFJLENBQUMsS0FBRCxFQUFRc1AsUUFBUixDQUFpQi9VLE1BQU0sQ0FBQ0ksU0FBeEIsQ0FBSixFQUF3QztBQUM3QyxjQUFJZ0csRUFBRSxHQUFHcEcsTUFBTSxDQUFDRSxPQUFQLENBQWUsT0FBZixFQUF3QjBHLE9BQXhCLENBQWdDUixFQUF6QztBQUNBNlUsVUFBQUEsZ0JBQWdCLENBQUM3VSxFQUFELENBQWhCO0FBQ0EsY0FBSTJVLElBQUksR0FBRy9hLE1BQU0sQ0FBQ0UsT0FBUCxDQUFlLE9BQWYsQ0FBWDtBQUNBNmEsVUFBQUEsSUFBSSxDQUFDbGIsTUFBTCxHQUo2QyxDQU12RDtBQUNTLFNBUE0sTUFPQSxJQUFJRyxNQUFNLENBQUNHLE9BQVAsQ0FBZXJCLFdBQWYsT0FBaUMsT0FBckMsRUFBOEM7QUFDbkQsY0FBSXNILEVBQUUsR0FBR3BHLE1BQU0sQ0FBQzRHLE9BQVAsQ0FBZVIsRUFBeEIsQ0FEbUQsQ0FFbkQ7O0FBQ0EsY0FBSXlVLEtBQUssR0FBR0QsS0FBSyxDQUFDcFgsZ0JBQU4sQ0FBdUIsT0FBdkIsQ0FBWjtBQUNBLGNBQUkwWCxLQUFLLEdBQUcsR0FBR25YLElBQUgsQ0FBUUssSUFBUixDQUFheVcsS0FBYixFQUFxQkUsSUFBRCxJQUFVO0FBQ3hDLG1CQUFPQSxJQUFJLENBQUNuVSxPQUFMLENBQWFSLEVBQWIsS0FBb0JBLEVBQTNCO0FBQ0QsV0FGVyxDQUFaO0FBSUEsY0FBSStVLElBQUksR0FBRzNiLFFBQUMsQ0FBQ29iLEtBQUQsQ0FBRCxDQUFTM1YsSUFBVCxDQUFjLFlBQWQsQ0FBWDs7QUFDQSxjQUFJLENBQUNpVyxLQUFMLEVBQVk7QUFDVmxiLFlBQUFBLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQjZGLE1BQWpCLENBQXdCLFVBQXhCO0FBQ0EsZ0JBQUlzVixJQUFJLEdBQUdLLFVBQVUsQ0FBQ2hWLEVBQUQsQ0FBckI7QUFDQStVLFlBQUFBLElBQUksQ0FBQzViLE1BQUwsQ0FBWXdiLElBQVo7QUFDRCxXQUpELE1BSU87QUFDTC9hLFlBQUFBLE1BQU0sQ0FBQ0osU0FBUCxDQUFpQjZGLE1BQWpCLENBQXdCLFVBQXhCO0FBQ0EwVixZQUFBQSxJQUFJLENBQUMzWixhQUFMLENBQW9CLGFBQVk0RSxFQUFHLElBQW5DLEVBQXdDdkcsTUFBeEM7QUFDRDtBQUNGOztBQUNELGlCQUFTb2IsZ0JBQVQsQ0FBMEI3VSxFQUExQixFQUE4QjtBQUM1QjtBQUNBNUcsVUFBQUEsUUFBQyxDQUFDb2IsS0FBRCxDQUFELENBQVMzVixJQUFULENBQWUsa0JBQWlCbUIsRUFBRyxJQUFuQyxFQUF3Q3hHLFNBQXhDLENBQWtEQyxNQUFsRCxDQUF5RCxVQUF6RDtBQUNEOztBQUVELGlCQUFTdWIsVUFBVCxDQUFvQmhWLEVBQXBCLEVBQXdCO0FBQ3RCLGNBQUkyVSxJQUFJLEdBQUcxZCxRQUFRLENBQUNnRCxhQUFULENBQXVCLEtBQXZCLENBQVg7QUFDQTBhLFVBQUFBLElBQUksQ0FBQ25iLFNBQUwsQ0FBZUUsR0FBZixDQUFtQixNQUFuQjtBQUNBaWIsVUFBQUEsSUFBSSxDQUFDMWMsU0FBTCxHQUFpQjJCLE1BQU0sQ0FBQzNCLFNBQXhCO0FBQ0EwYyxVQUFBQSxJQUFJLENBQUNuVSxPQUFMLENBQWEsSUFBYixJQUFxQlIsRUFBckI7QUFFQSxjQUFJbUMsR0FBRyxHQUFHbEwsUUFBUSxDQUFDZ0QsYUFBVCxDQUF1QixLQUF2QixDQUFWO0FBQ0FrSSxVQUFBQSxHQUFHLENBQUMzSSxTQUFKLENBQWNFLEdBQWQsQ0FBa0IsS0FBbEI7QUFDQXlJLFVBQUFBLEdBQUcsQ0FBQ2xLLFNBQUosR0FBZ0IsR0FBaEI7QUFFQTBjLFVBQUFBLElBQUksQ0FBQ3hiLE1BQUwsQ0FBWWdKLEdBQVo7QUFFQSxpQkFBT3dTLElBQVA7QUFDRDtBQUNGO0FBQ0YsS0FsRUQ7QUFtRUQ7QUFDRixDOztBQzVGRDtBQUNBO0FBRWUsU0FBU00sV0FBVCxHQUF1QjtBQUNwQyxNQUFJQyxpQkFBaUIsR0FBRzliLFFBQUMsQ0FBQyxZQUFELENBQUQsQ0FBZ0IsQ0FBaEIsQ0FBeEI7O0FBQ0EsTUFBSThiLGlCQUFKLEVBQXVCO0FBQ3JCOWIsSUFBQUEsUUFBQyxDQUFDOGIsaUJBQUQsQ0FBRCxDQUFxQjdYLEVBQXJCLENBQXdCLE9BQXhCLEVBQWlDa0QsV0FBVyxDQUFDbkMsSUFBWixDQUFpQixJQUFqQixDQUFqQztBQUNEOztBQUVELFdBQVMrVyxhQUFULEdBQXlCO0FBQ3ZCLFFBQUlDLFFBQVEsR0FBR2hjLFFBQUMsQ0FBQyxZQUFELENBQWhCO0FBQ0EsUUFBSWljLFFBQVEsR0FBRyxDQUFmO0FBQ0EsT0FBR3hZLE9BQUgsQ0FBV21CLElBQVgsQ0FBZ0JvWCxRQUFoQixFQUEwQixVQUFVbmMsRUFBVixFQUFjO0FBQ3RDLFVBQUksQ0FBQ0EsRUFBRSxDQUFDaEIsU0FBUixFQUFrQjtBQUNoQmdCLFFBQUFBLEVBQUUsQ0FBQ2YsS0FBSCxDQUFTb2QsV0FBVCxHQUF1QixLQUF2QjtBQUNBLFlBQUlsYyxRQUFDLENBQUNILEVBQUQsQ0FBRCxDQUFNNEYsSUFBTixDQUFXLFFBQVgsQ0FBSixFQUF5QjtBQUN6QixZQUFJakgsS0FBSyxHQUFHWCxRQUFRLENBQUNnRCxhQUFULENBQXVCLEtBQXZCLENBQVo7QUFDQXJDLFFBQUFBLEtBQUssQ0FBQ0ssU0FBTixHQUFnQixnQkFBaEI7QUFDQUwsUUFBQUEsS0FBSyxDQUFDNEIsU0FBTixDQUFnQkUsR0FBaEIsQ0FBb0IsT0FBcEI7QUFDQVQsUUFBQUEsRUFBRSxDQUFDYSxPQUFILENBQVcsUUFBWCxFQUFxQmtELFdBQXJCLENBQWlDcEYsS0FBakM7QUFDQXlkLFFBQUFBLFFBQVE7QUFDVDtBQUNGLEtBVkQ7QUFXQSxXQUFPQSxRQUFQO0FBQ0Q7O0FBQ0QsaUJBQWU5VSxXQUFmLE9BQXFDO0FBQUEsUUFBVjtBQUFDM0csTUFBQUE7QUFBRCxLQUFVO0FBRW5DLFFBQUlxRCxJQUFJLEdBQUdpWSxpQkFBWDtBQUNBLFFBQUl0SCxTQUFTLEdBQUczUSxJQUFJLENBQUN1RCxPQUFMLENBQWFPLEtBQTdCOztBQUNBLFFBQUluSCxNQUFNLENBQUNFLE9BQVAsQ0FBZSxPQUFmLENBQUosRUFBNkI7QUFDM0IsVUFBSXFiLGFBQWEsRUFBakIsRUFBcUIsT0FBTyxLQUFQO0FBQ3JCLFVBQUlwVSxLQUFLLEdBQUcrUCxRQUFRLEVBQXBCO0FBQ0EsVUFBSXZZLEdBQUcsR0FBRyxNQUFNc0MsSUFBSSxDQUFFLFlBQVcrUyxTQUFVLGlCQUF2QixFQUF5QyxFQUFDLEdBQUc3TTtBQUFKLE9BQXpDLENBQXBCO0FBQ0F4SSxNQUFBQSxHQUFHLEdBQUc1QixJQUFJLENBQUNDLEtBQUwsQ0FBVzJCLEdBQVgsQ0FBTjs7QUFDQSxVQUFJQSxHQUFHLENBQUN5SCxFQUFSLEVBQVk7QUFDVjtBQUVBcEgsUUFBQUEsVUFBQSxDQUFXLFdBQVg7QUFDRCxPQUpELE1BSU0sSUFBR0wsR0FBRyxDQUFDWCxLQUFQLEVBQWE7QUFDakJnQixRQUFBQSxVQUFBLENBQVdMLEdBQUcsQ0FBQ1gsS0FBZjtBQUNEO0FBQ0YsS0FaRCxNQVlPLElBQUlnQyxNQUFNLENBQUNFLE9BQVAsQ0FBZSxNQUFmLENBQUosRUFBNEI7QUFDakMsVUFBSWtHLEVBQUUsR0FBRy9DLElBQUksQ0FBQ3VELE9BQUwsQ0FBYVIsRUFBdEI7QUFDQSxVQUFJekgsR0FBRyxHQUFHLE1BQU1zQyxJQUFJLENBQUUsWUFBVytTLFNBQVUsU0FBdkIsRUFBaUM7QUFBQzVOLFFBQUFBO0FBQUQsT0FBakMsQ0FBcEI7QUFDQXpILE1BQUFBLEdBQUcsR0FBRzVCLElBQUksQ0FBQ0MsS0FBTCxDQUFXMkIsR0FBWCxDQUFOOztBQUNBLFVBQUlBLEdBQUcsQ0FBQ3NKLEdBQUosS0FBWSxJQUFoQixFQUFzQjtBQUNwQnJLLFFBQUFBLE1BQU0sQ0FBQ2tELFFBQVAsQ0FBZ0I0SSxJQUFoQixHQUF3QixZQUFXc0ssU0FBVSxFQUE3QztBQUNEO0FBQ0YsS0FQTSxNQU9ELElBQUloVSxNQUFNLENBQUNKLFNBQVAsQ0FBaUJLLFFBQWpCLENBQTBCLEtBQTFCLENBQUosRUFBc0M7QUFDMUMsVUFBSTBiLGNBQWMsR0FBR25jLFFBQUMsQ0FBRSxjQUFGLENBQUQsQ0FBa0IsQ0FBbEIsQ0FBckI7QUFDQW1jLE1BQUFBLGNBQWMsQ0FBQy9iLFNBQWYsQ0FBeUI2RixNQUF6QixDQUFnQyxNQUFoQztBQUNBLFVBQUltVyxPQUFPLEdBQUdwYyxRQUFDLENBQUUsb0JBQW1CUSxNQUFNLENBQUM0RyxPQUFQLENBQWVSLEVBQUcsSUFBdkMsQ0FBRCxDQUE2QyxDQUE3QyxDQUFkO0FBQ0F3VixNQUFBQSxPQUFPLENBQUNoYyxTQUFSLENBQWtCNkYsTUFBbEIsQ0FBeUIsTUFBekI7QUFDQSxVQUFJb1csU0FBUyxHQUFHcmMsUUFBQyxDQUFFLGFBQUYsQ0FBRCxDQUFpQixDQUFqQixDQUFoQjtBQUNBcWMsTUFBQUEsU0FBUyxDQUFDamMsU0FBVixDQUFvQjZGLE1BQXBCLENBQTJCLFFBQTNCO0FBQ0F6RixNQUFBQSxNQUFNLENBQUNKLFNBQVAsQ0FBaUI2RixNQUFqQixDQUF3QixRQUF4QjtBQUNEO0FBQ0Y7O0FBRUQsV0FBU3lSLFFBQVQsR0FBb0I7QUFDbEIsUUFBSWxNLE1BQU0sR0FBR3hMLFFBQUMsQ0FBQyxjQUFELENBQWQ7QUFDQSxRQUFJNlksR0FBRyxHQUFHLEVBQVYsQ0FGa0IsQ0FHbEI7O0FBQ0EsT0FBRy9SLEdBQUgsQ0FBT2xDLElBQVAsQ0FBWTRHLE1BQVosRUFBcUJDLEtBQUQsSUFBVztBQUM3QixVQUFJQSxLQUFLLENBQUNtSixZQUFOLENBQW1CLGNBQW5CLENBQUosRUFBd0M7QUFDdEMsWUFBSXlHLEtBQUssR0FBRzVQLEtBQUssQ0FBQ3pILGdCQUFOLENBQXVCLE9BQXZCLENBQVo7QUFDQSxZQUFJdVEsR0FBRyxHQUFHLEdBQUd6TixHQUFILENBQU9sQyxJQUFQLENBQVl5VyxLQUFaLEVBQW9CRSxJQUFELElBQVU7QUFDckMsaUJBQU9BLElBQUksQ0FBQ25VLE9BQUwsQ0FBYVIsRUFBcEI7QUFDRCxTQUZTLENBQVY7QUFHQWlTLFFBQUFBLEdBQUcsQ0FBQ3BOLEtBQUssQ0FBQ3JFLE9BQU4sQ0FBY3FFLEtBQWYsQ0FBSCxHQUEyQjhJLEdBQUcsQ0FBQytILFFBQUosRUFBM0I7QUFDRCxPQU5ELE1BTU8sSUFBSTdRLEtBQUssQ0FBQ21KLFlBQU4sQ0FBbUIsZUFBbkIsQ0FBSixFQUF3QztBQUM3Q2lFLFFBQUFBLEdBQUcsQ0FBQ3BOLEtBQUssQ0FBQ3JFLE9BQU4sQ0FBY3FFLEtBQWYsQ0FBSCxHQUEyQkEsS0FBSyxDQUFDckUsT0FBTixDQUFjekksS0FBekM7QUFDRCxPQUZNLE1BRUEsSUFBSThNLEtBQUssQ0FBQ21KLFlBQU4sQ0FBbUIsY0FBbkIsQ0FBSixFQUF1QztBQUM1Q2lFLFFBQUFBLEdBQUcsQ0FBQ3BOLEtBQUssQ0FBQ3JFLE9BQU4sQ0FBY3FFLEtBQWYsQ0FBSCxHQUEyQkEsS0FBSyxDQUFDckUsT0FBTixDQUFjekksS0FBekM7QUFDRCxPQUZNLE1BRUEsSUFBSThNLEtBQUssQ0FBQ21KLFlBQU4sQ0FBbUIsS0FBbkIsQ0FBSixFQUE4QjtBQUNuQ2lFLFFBQUFBLEdBQUcsQ0FBQ3BOLEtBQUssQ0FBQ3JFLE9BQU4sQ0FBY3FFLEtBQWYsQ0FBSCxHQUEyQkEsS0FBSyxDQUFDckUsT0FBTixDQUFjekksS0FBekM7QUFDRCxPQUZNLE1BRUEsSUFBSThNLEtBQUssQ0FBQ3FHLElBQU4sS0FBZSxNQUFuQixFQUEwQjtBQUMvQitHLFFBQUFBLEdBQUcsQ0FBQ3BOLEtBQUssQ0FBQ3JFLE9BQU4sQ0FBY3FFLEtBQWYsQ0FBSCxHQUEyQkEsS0FBSyxDQUFDOU0sS0FBakM7QUFDRCxPQUZNLE1BRUQ7QUFDSmthLFFBQUFBLEdBQUcsQ0FBQ3BOLEtBQUssQ0FBQ3JFLE9BQU4sQ0FBY3FFLEtBQWYsQ0FBSCxHQUEyQkEsS0FBSyxDQUFDNU0sU0FBakM7QUFDRDtBQUNGLEtBbEJELEVBa0JHZ2EsR0FsQkg7QUFtQkEsUUFBSTVPLE1BQU0sR0FBR2pLLFFBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUIsQ0FBbkIsQ0FBYjs7QUFDQSxRQUFJaUssTUFBSixFQUFXO0FBQ1Q0TyxNQUFBQSxHQUFHLENBQUM1TyxNQUFKLEdBQWEsQ0FBQ0EsTUFBTSxDQUFDN0MsT0FBUCxDQUFlbVYsTUFBN0I7QUFDRDs7QUFDRCxXQUFPMUQsR0FBUDtBQUNEO0FBQ0YsQzs7QUN4RkQ7QUFFZSxTQUFTMkQsUUFBVCxHQUFvQjtBQUVqQzNlLEVBQUFBLFFBQVEsQ0FBQ29DLGdCQUFULENBQTBCLFlBQTFCLEVBQXdDc04sT0FBeEMsRUFBaUQsSUFBakQ7QUFDQTFQLEVBQUFBLFFBQVEsQ0FBQ29DLGdCQUFULENBQTBCLFlBQTFCLEVBQXdDd2MsT0FBeEMsRUFBaUQsSUFBakQ7O0FBR0EsV0FBU2xQLE9BQVQsT0FBMkI7QUFBQSxRQUFWO0FBQUMvTSxNQUFBQTtBQUFELEtBQVU7QUFDN0I7QUFDSTtBQUNBLFFBQUksQ0FBQ0EsTUFBTSxDQUFDNEcsT0FBUixJQUFpQixDQUFDNUcsTUFBTSxDQUFDNEcsT0FBUCxDQUFlc1YsT0FBckMsRUFBOEM7QUFFOUMsUUFBSUMsV0FBVyxHQUFHbmMsTUFBTSxDQUFDNEcsT0FBUCxDQUFlc1YsT0FBakMsQ0FMeUIsQ0FNekI7O0FBQ0EsUUFBSUUsV0FBVyxHQUFHL2UsUUFBUSxDQUFDZ0QsYUFBVCxDQUF1QixLQUF2QixDQUFsQjtBQUNBK2IsSUFBQUEsV0FBVyxDQUFDaGMsU0FBWixHQUF3QixTQUF4QjtBQUNBZ2MsSUFBQUEsV0FBVyxDQUFDL1osU0FBWixHQUF3QjhaLFdBQXhCO0FBQ0E5ZSxJQUFBQSxRQUFRLENBQUNxQyxJQUFULENBQWNILE1BQWQsQ0FBcUI2YyxXQUFyQixFQVZ5QixDQVl6Qjs7QUFDQSxRQUFJQyxNQUFNLEdBQUdyYyxNQUFNLENBQUNzYyxxQkFBUCxFQUFiO0FBRUEsUUFBSUMsSUFBSSxHQUFHRixNQUFNLENBQUNFLElBQVAsR0FBYyxDQUFDdmMsTUFBTSxDQUFDd2MsV0FBUCxHQUFxQkosV0FBVyxDQUFDSSxXQUFsQyxJQUFpRCxDQUExRTtBQUNBLFFBQUlELElBQUksR0FBRyxDQUFYLEVBQWNBLElBQUksR0FBRyxDQUFQLENBaEJXLENBZ0JEOztBQUV4QixRQUFJRSxHQUFHLEdBQUdKLE1BQU0sQ0FBQ0ksR0FBUCxHQUFhTCxXQUFXLENBQUNNLFlBQXpCLEdBQXdDLENBQWxEOztBQUNBLFFBQUlELEdBQUcsR0FBRyxDQUFWLEVBQWE7QUFBRTtBQUNiQSxNQUFBQSxHQUFHLEdBQUdKLE1BQU0sQ0FBQ0ksR0FBUCxHQUFhemMsTUFBTSxDQUFDMGMsWUFBcEIsR0FBbUMsQ0FBekM7QUFDRDs7QUFFRE4sSUFBQUEsV0FBVyxDQUFDOWQsS0FBWixDQUFrQmllLElBQWxCLEdBQXlCQSxJQUFJLEdBQUcsSUFBaEM7QUFDQUgsSUFBQUEsV0FBVyxDQUFDOWQsS0FBWixDQUFrQm1lLEdBQWxCLEdBQXdCQSxHQUFHLEdBQUcsSUFBOUI7QUFDRDs7QUFBQTs7QUFFRCxXQUFTUixPQUFULEdBQW1CO0FBQ2pCLFFBQUlELFFBQVEsR0FBRzNlLFFBQVEsQ0FBQ21HLGdCQUFULENBQTBCLFVBQTFCLENBQWY7O0FBQ0EsUUFBSXdZLFFBQUosRUFBYztBQUNaLFNBQUcvWSxPQUFILENBQVdtQixJQUFYLENBQWdCNFgsUUFBaEIsRUFBMkIxWCxHQUFELElBQVM7QUFDL0JBLFFBQUFBLEdBQUcsQ0FBQ3pFLE1BQUo7QUFDRCxPQUZIO0FBSUQ7QUFDRjs7QUFBQTtBQUNGLEM7O0FDNUNEO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFMLFFBQUMsQ0FBQ25DLFFBQUQsQ0FBRCxDQUFZd0csS0FBWixDQUFrQixZQUFZO0FBRTVCK1ksRUFBQUEsUUFBUSxDQUFDaGYsTUFBTSxDQUFDa0QsUUFBUCxDQUFnQjJRLFFBQWpCLENBQVI7QUFDQThJLEVBQUFBLFdBQUs7QUFDTGhILEVBQUFBLElBQUk7QUFDSm1ILEVBQUFBLFdBQVc7QUFDWFcsRUFBQUEsV0FBVztBQUNYVyxFQUFBQSxRQUFRO0FBR1I5TCxFQUFBQSxhQUFhO0FBRWJxQixFQUFBQSxRQUFRLEdBWm9CLENBYzVCOztBQUVBLFdBQVNxTCxRQUFULENBQWtCOWYsR0FBbEIsRUFBdUI7QUFDckI7QUFDQSxZQUFRLElBQVI7QUFDRSxXQUFLLHNCQUFzQjhCLElBQXRCLENBQTJCOUIsR0FBM0IsQ0FBTDtBQUNBLFdBQUsseUJBQXlCOEIsSUFBekIsQ0FBOEI5QixHQUE5QixDQUFMO0FBQ0EsV0FBSyx3QkFBd0I4QixJQUF4QixDQUE2QjlCLEdBQTdCLENBQUw7QUFDQSxXQUFLLHdCQUF3QjhCLElBQXhCLENBQTZCOUIsR0FBN0IsQ0FBTDtBQUNFbVosUUFBQUEsTUFBTTtBQUNOelcsUUFBQUEsUUFBQyxDQUFDLDRCQUFELENBQUQsQ0FBZ0MyTixRQUFoQyxDQUF5QyxTQUF6QztBQUNBOztBQUVGLFdBQUssaUNBQWlDdk8sSUFBakMsQ0FBc0M5QixHQUF0QyxDQUFMO0FBQ0U0SixRQUFBQSxXQUFXO0FBQ1hsSCxRQUFBQSxRQUFDLENBQUMsZ0NBQUQsQ0FBRCxDQUFvQzJOLFFBQXBDLENBQTZDLFNBQTdDO0FBQ0E7O0FBRUYsV0FBSyxrQkFBa0J2TyxJQUFsQixDQUF1QjlCLEdBQXZCLENBQUw7QUFDRStWLFFBQUFBLElBQUk7QUFDSjs7QUFFRixXQUFLLGlCQUFpQmpVLElBQWpCLENBQXNCOUIsR0FBdEIsQ0FBTDtBQUNFMEMsUUFBQUEsUUFBQyxDQUFDLHVCQUFELENBQUQsQ0FBMkIyTixRQUEzQixDQUFvQyxTQUFwQztBQUNBOztBQUVGLFdBQUsscUJBQXFCdk8sSUFBckIsQ0FBMEI5QixHQUExQixDQUFMO0FBQ0UwQyxRQUFBQSxRQUFDLENBQUMsMkJBQUQsQ0FBRCxDQUErQjJOLFFBQS9CLENBQXdDLFNBQXhDO0FBQ0E7O0FBRUYsV0FBSyxzQkFBc0J2TyxJQUF0QixDQUEyQjlCLEdBQTNCLENBQUw7QUFDRWdhLFFBQUFBLFFBQVE7QUFDUnRYLFFBQUFBLFFBQUMsQ0FBQyw0QkFBRCxDQUFELENBQWdDMk4sUUFBaEMsQ0FBeUMsU0FBekM7QUFDQTs7QUFFRixXQUFLLDRCQUE0QnZPLElBQTVCLENBQWlDOUIsR0FBakMsQ0FBTDtBQUNBLFdBQUssd0JBQXdCOEIsSUFBeEIsQ0FBNkI5QixHQUE3QixDQUFMO0FBQ0UwQyxRQUFBQSxRQUFDLENBQUMsNkJBQUQsQ0FBRCxDQUFpQzJOLFFBQWpDLENBQTBDLFNBQTFDO0FBQ0E7O0FBRUYsV0FBSyxTQUFTdk8sSUFBVCxDQUFjOUIsR0FBZCxLQUFzQixpQkFBaUI4QixJQUFqQixDQUFzQjlCLEdBQXRCLENBQTNCO0FBQ0VvVixRQUFBQSxNQUFNO0FBQ04xUyxRQUFBQSxRQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QjJOLFFBQXZCLENBQWdDLFNBQWhDO0FBQ0E7O0FBRUYsV0FBSyxxQkFBcUJ2TyxJQUFyQixDQUEwQjlCLEdBQTFCLENBQUw7QUFDRXdXLFFBQUFBLFFBQVE7QUFDUjlULFFBQUFBLFFBQUMsQ0FBQyw0QkFBRCxDQUFELENBQWdDMk4sUUFBaEMsQ0FBeUMsU0FBekM7QUFDQTs7QUFFRjtBQUNFM04sUUFBQUEsUUFBQyxDQUFDLG1CQUFELENBQUQsQ0FBdUIyTixRQUF2QixDQUFnQyxTQUFoQztBQUNBO0FBaERKO0FBa0REO0FBRUYsQ0F0RUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL2NvbW1vbi5qcz81OTIxIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvY29tcG9uZW50cy9hY2NvcmRpb24vYWNjb3JkaW9uLmpzPzI1YjUiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9jb21wb25lbnRzL2FkbWluX3NpZGViYXIuanM/ZGVmZiIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL0FkbWluL21vZGVsL2NhY2hlLmpzPzFlMTciLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L21vZGVsL190ZXN0UmVzdWx0LmpzPzE2NjgiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L3Rlc3RfcmVzdWx0cy90ZXN0X3Jlc3VsdHMuanM/NTM0YSIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL1Rlc3QvbW9kZWwvb3BlbnRlc3Qvb3BlbnF1ZXN0aW9uLmpzPzI0OTMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3NvcnRhYmxlanMvbW9kdWxhci9zb3J0YWJsZS5lc20uanM/YWE0NyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL2NvbXBvbmVudHMvc29ydGFibGUuanM/ZGNmNSIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL1Rlc3QvbW9kZWwvb3BlbnRlc3Qvb3BlbnRlc3QuanM/YjU3NyIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL1Rlc3QvbW9kZWwvb3BlbnRlc3Qvb3BlbmFuc3dlci5qcz8wNmRlIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvVGVzdC9vcGVudGVzdC1lZGl0LmpzPzYyOGYiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L21vZGVsL2Fuc3dlci5qcz85OWFkIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvVGVzdC9tb2RlbC9xdWVzdGlvbi5qcz8yM2Q5Iiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvY29tcG9uZW50cy9zZWxlY3QvV0RTU2VsZWN0LmpzP2M0MGQiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L2FjY29yZGlvbi1zaG93LmpzPzQwMWUiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L21vZGVsL3Rlc3QuanM/OWE2YSIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL1Rlc3QvdGVzdEVkaXRBY3Rpb25zLmpzPzY5ZjAiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L3Rlc3QtZWRpdC5qcz9hZDVhIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvY29tcG9uZW50cy90ZXN0LXBhZ2luYXRpb24vdGVzdC1wYWdpbmF0aW9uLmpzPzRhZTIiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9UZXN0L2RvLmpzPzRjMzUiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9BZG1pbi9TZXR0aW5ncy91c2Vycy5qcz82OWZmIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvQWRtaW4vU2V0dGluZ3Mvc2V0dGluZ3MuanM/NzllNSIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL2NvbXBvbmVudHMvbGlzdC9saXN0LmpzP2YwMjMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9BZG1pbi9SaWdodHMvcmlnaHRzLmpzPzZlZTMiLCJ3ZWJwYWNrOi8vbXktd2VicGFjay1wcm9qZWN0Ly4vcHVibGljL3NyYy9BZG1pbi9QbGFubmluZy9wbGFubmluZy5qcz9iZTZmIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvQXV0aC9nZXRTZXguanM/NTVmNCIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL0FkbWluL3VzZXIvdXNlci5qcz8wZDFhIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvVGVzdC9vcGVuX3Rlc3QuanM/MmQ3NiIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL2NvbXBvbmVudHMvcmFkaW8vcmFkaW8uanM/ZWU0YiIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL2NvbXBvbmVudHMvbXVsdGlzZWxlY3QvbXVsdGlzZWxlY3QuanM/NWE1MCIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL2NvbXBvbmVudHMvY2F0YWxvZy1pdGVtL2NhdGFsb2ctaXRlbS5qcz85NjMxIiwid2VicGFjazovL215LXdlYnBhY2stcHJvamVjdC8uL3B1YmxpYy9zcmMvY29tcG9uZW50cy90b29sdGlwL3Rvb2x0aXAuanM/YTAxOCIsIndlYnBhY2s6Ly9teS13ZWJwYWNrLXByb2plY3QvLi9wdWJsaWMvc3JjL0FkbWluL2FkbWluLmpzPzI1YzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2NvbW1vbi5zY3NzJ1xyXG5cclxuY29uc3QgZGVib3VuY2UgPSAoZm4sIHRpbWUgPSA3MDApID0+IHtcclxuICBsZXQgdGltZW91dDtcclxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgZnVuY3Rpb25DYWxsID0gKCkgPT4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uQ2FsbCwgdGltZSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBJc0pzb25TdHJpbmcoc3RyKSB7XHJcbiAgdHJ5IHtcclxuICAgIEpTT04ucGFyc2Uoc3RyKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcm9wRG93bihlbGVtZW50SWQpIHtcclxuICB2YXIgZHJvcGRvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xyXG4gIHRyeSB7XHJcbiAgICBzaG93RHJvcGRvd24oZHJvcGRvd24pO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuXHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNob3dEcm9wZG93bihlbGVtZW50KSB7XHJcbiAgdmFyIGV2ZW50O1xyXG4gIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XHJcbiAgZXZlbnQuaW5pdE1vdXNlRXZlbnQoJ21vdXNlZG93bicsIHRydWUsIHRydWUsIHdpbmRvdyk7XHJcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxufTtcclxuXHJcblxyXG5sZXQgdmFsaWRhdGUgPSB7XHJcbiAgc29ydDogKCkgPT4ge1xyXG4gICAgbGV0IGVycm9yID0gdGhpcy5uZXh0RWxlbWVudFNpYmxpbmdcclxuICAgIGxldCBhciA9IHRoaXMudmFsdWUubWF0Y2goL1xcRCsvKVxyXG4gICAgaWYgKGFyKSB7XHJcbiAgICAgIGVycm9yLmlubmVyVGV4dCA9ICfQotC+0LvRjNC60L4g0YbQuNGE0YDRiydcclxuICAgICAgZXJyb3Iuc3R5bGUub3BhY2l0eSA9ICcxJ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGVycm9yLnN0eWxlLm9wYWNpdHkgPT09IFwiMVwiKSB7XHJcbiAgICAgICAgZXJyb3Iuc3R5bGUub3BhY2l0eSA9ICcwJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBlbWFpbDogKGVtYWlsKSA9PiB7XHJcbiAgICBpZiAoIWVtYWlsKSByZXR1cm4gZmFsc2VcclxuICAgIGxldCB0ZXh0ID0gXCLQndC10L/RgNCw0LLQuNC70YzQvdGL0Lkg0YTQvtGA0LzQsNGCINC/0L7Rh9GC0YtcIlxyXG4gICAgbGV0IHJlID0gL14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xyXG4gICAgbGV0IHJlcyA9IHJlLnRlc3QoU3RyaW5nKGVtYWlsKS50b0xvd2VyQ2FzZSgpKVxyXG4gICAgaWYgKCFyZXMpIHJldHVybiB0ZXh0XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9LFxyXG4gIHBhc3N3b3JkOiAocGFzc3dvcmQpID0+IHtcclxuICAgIGlmICghcGFzc3dvcmQpIHJldHVybiBmYWxzZVxyXG4gICAgbGV0IHRleHQgPSBcItCf0LDRgNC+0LvRjCDQvNC+0LbQtdGCINGB0L7RgdGC0L7Rj9GC0Ywg0LjQtyBcXG4gXCIgK1xyXG4gICAgICBcIi0g0JHQvtC70YzRiNC40LUg0LvQsNGC0LjQvdGB0LrQuNC1INCx0LrRg9Cy0YsgXFxuXCIgK1xyXG4gICAgICBcIi0g0JzQsNC70LXQvdGM0LrQuNC1INC70LDRgtC40L3RgdC60LjQtSDQsdGD0LrQstGLIFxcblwiICtcclxuICAgICAgXCItINCm0LjRhNGA0YsgXFxuXCIgK1xyXG4gICAgICBcIi0g0JTQvtC70LbQtdC9INGB0L7QtNC10YDQttCw0YLRjCDQvdC1INC80LXQvdC10LUgNiDRgdC40LzQstC+0LvQvtCyXCJcclxuICAgIGxldCByZXMgPSAvXlthLXpBLVpcXC0wLTldezYsMjB9JC8udGVzdChwYXNzd29yZClcclxuICAgIGlmICghcmVzKSByZXR1cm4gdGV4dFxyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8gZnVuY3Rpb24gdXAoKSB7XHJcbi8vICAgIHZhciB0b3AgPSBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCk7XHJcbi8vICAgIGlmICh0b3AgPiAwKSB7XHJcbi8vICAgICAgIHdpbmRvdy5zY3JvbGxCeSgwLCAtMTAwKTtcclxuLy8gICAgICAgdmFyIHQgPSBzZXRUaW1lb3V0KCd1cCgpJywgMjApO1xyXG4vLyAgICB9XHJcbi8vICAgIGVsc2VcclxuLy8gICAgICAgY2xlYXJUaW1lb3V0KHQpO1xyXG4vLyAgICByZXR1cm4gZmFsc2U7XHJcbi8vIH1cclxuXHJcbmxldCBwb3B1cCA9IHtcclxuXHJcbiAgc2hvdzogZnVuY3Rpb24gKHR4dCwgY2FsbGJhY2spIHtcclxuICAgIGxldCBjbG9zZSA9IHRoaXMuZWwoJ2RpdicsICdwb3B1cF9fY2xvc2UnKVxyXG4gICAgY2xvc2UuaW5uZXJUZXh0ID0gJ1gnXHJcbiAgICBsZXQgcG9wdXBfX2l0ZW0gPSB0aGlzLmVsKCdkaXYnLCAncG9wdXBfX2l0ZW0nKVxyXG5cclxuICAgIHBvcHVwX19pdGVtLmlubmVyVGV4dCA9IHR4dFxyXG4gICAgcG9wdXBfX2l0ZW0uYXBwZW5kKGNsb3NlKVxyXG4gICAgbGV0IHBvcHVwID0gJCgnLnBvcHVwJylbMF1cclxuICAgIGlmICghcG9wdXApIHtcclxuICAgICAgcG9wdXAgPSB0aGlzLmVsKCdkaXYnLCAncG9wdXAnKVxyXG4gICAgfVxyXG4gICAgcG9wdXAuYXBwZW5kKHBvcHVwX19pdGVtKVxyXG4gICAgcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlLCB0cnVlKVxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQocG9wdXApXHJcbiAgICBsZXQgaGlkZURlbGF5ID0gNTAwMDtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBwb3B1cF9faXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9faXRlbScpXHJcbiAgICAgIHBvcHVwX19pdGVtLmNsYXNzTGlzdC5hZGQoJ3BvcHVwLWhpZGUnKVxyXG4gICAgfSwgaGlkZURlbGF5KVxyXG4gICAgbGV0IHJlbW92ZURlbGF5ID0gaGlkZURlbGF5ICsgOTUwO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHBvcHVwX19pdGVtLnJlbW92ZSgpXHJcbiAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgIGNhbGxiYWNrKClcclxuICAgICAgfVxyXG4gICAgfSwgcmVtb3ZlRGVsYXkpXHJcbiAgfSxcclxuXHJcbiAgY2xvc2U6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9fY2xvc2UnKSkge1xyXG4gICAgICBsZXQgcG9wdXAgPSB0aGlzLmNsb3Nlc3QoJy5wb3B1cCcpLnJlbW92ZSgpXHJcbiAgICB9XHJcbiAgfSxcclxuICBlbDogZnVuY3Rpb24gKHRhZ05hbWUsIGNsYXNzTmFtZSkge1xyXG4gICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKVxyXG4gICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXHJcbiAgICByZXR1cm4gZWxcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHVuaXEgPSAoYXJyYXkpID0+IEFycmF5LmZyb20obmV3IFNldChhcnJheSkpO1xyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldChrZXkpIHtcclxuICBsZXQgcCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XHJcbiAgcCA9IHAubWF0Y2gobmV3IFJlZ0V4cChrZXkgKyAnPShbXiY9XSspJykpO1xyXG4gIHJldHVybiBwID8gcFsxXSA6IGZhbHNlO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBwb3N0KHVybCwgZGF0YSA9IHt9KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGRhdGEudG9rZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJ0b2tlblwiXScpLmdldEF0dHJpYnV0ZSgnY29udGVudCcpXHJcbiAgICBsZXQgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICByZXEub3BlbignUE9TVCcsIHVybCwgdHJ1ZSk7XHJcbiAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIlgtUmVxdWVzdGVkLVdpdGhcIiwgXCJYTUxIdHRwUmVxdWVzdFwiKTtcclxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRm9ybURhdGEpIHtcclxuICAgICAgcmVxLnNlbmQoZGF0YSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xyXG4gICAgICByZXEuc2VuZCgncGFyYW09JyArIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICAgIH1cclxuICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgcmVqZWN0KEVycm9yKFwiTmV0d29yayBFcnJvclwiICsgZSkpO1xyXG4gICAgfTtcclxuICAgIHJlcS5vbmxvYWQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmIChJc0pzb25TdHJpbmcocmVxLnJlc3BvbnNlKSkge1xyXG4gICAgICAgIHJlc29sdmUocmVxLnJlc3BvbnNlKTtcclxuICAgICAgfWVsc2Uge1xyXG4gICAgICAgIGxldCBlID0gJCgnLmVycm9yJylbMF1cclxuICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgZS5pbm5lckhUTUwgPSByZXEucmVzcG9uc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0pO1xyXG59XHJcblxyXG5jbGFzcyBFbGVtZW50Q29sbGVjdGlvbiBleHRlbmRzIEFycmF5IHtcclxuXHJcbiAgLy8gZWwgPSB0aGlzXHJcbiAgLy8gZWxUeXBlID0gZnVuY3Rpb24oKXtyZXR1cm4ge30udG9TdHJpbmcuY2FsbCh0aGlzKX1cclxuXHJcbiAgb24oZXZlbnQsIGNiT3JTZWxlY3RvciwgY2IpIHtcclxuICAgIGlmICh0eXBlb2YgY2JPclNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRoaXMuZm9yRWFjaChlID0+IGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2JPclNlbGVjdG9yKSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZm9yRWFjaChlbGVtID0+IHtcclxuICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGUgPT4ge1xyXG4gICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBjYk9yU2VsZWN0b3IpIGNiKGUpXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXNbMF0uZ2V0QXR0cmlidXRlKCd2YWx1ZScpXHJcbiAgfVxyXG4gIGF0dHIgPSBmdW5jdGlvbiAoYXR0ck5hbWUsIGF0dHJWYWwpIHtcclxuICAgIGlmIChhdHRyVmFsKSB7XHJcbiAgICAgIHRoaXNbMF0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXNbMF0uZ2V0QXR0cmlidXRlKGF0dHJOYW1lKVxyXG4gIH1cclxuICBzZWxlY3RlZEluZGV4VmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5sZW5ndGgpXHJcbiAgICAgIHJldHVybiB0aGlzWzBdLnNlbGVjdGVkT3B0aW9uc1swXS52YWx1ZVxyXG4gIH1cclxuICBvcHRpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMubGVuZ3RoKSByZXR1cm4gdGhpc1swXS5vcHRpb25zXHJcbiAgfVxyXG4gIGNvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoXHJcbiAgfVxyXG4gIHRleHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5sZW5ndGgpIHJldHVybiB0aGlzWzBdLmlubmVyVGV4dFxyXG4gIH1cclxuICBjaGVja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMubGVuZ3RoKSByZXR1cm4gdGhpc1swXS5jaGVja2VkXHJcbiAgfVxyXG4gIGdldFdpdGhTdHlsZSA9IGZ1bmN0aW9uIChhdHRyLCB2YWwpIHtcclxuICAgIGxldCBhcnIgPSBbXVxyXG4gICAgdGhpcy5mb3JFYWNoKChzKSA9PiB7XHJcbiAgICAgIGlmIChzLnN0eWxlW2F0dHJdID09PSB2YWwpIHtcclxuICAgICAgICBhcnIucHVzaChzKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGFyclxyXG4gIH1cclxuICBhZGRDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcclxuICAgIHRoaXMuZm9yRWFjaCgocykgPT4ge1xyXG4gICAgICBzLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxyXG4gICAgfSlcclxuICB9XHJcbiAgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XHJcbiAgICB0aGlzLmZvckVhY2goKHMpID0+IHtcclxuICAgICAgcy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSlcclxuICAgIH0pXHJcbiAgfVxyXG4gIGhhc0NsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgaWYgKHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHJldHVybiB0cnVlXHJcbiAgfVxyXG4gIGFwcGVuZCA9IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgdGhpc1swXS5hcHBlbmRDaGlsZChlbClcclxuICB9XHJcbiAgZmluZCA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiB0aGlzWzBdLnF1ZXJ5U2VsZWN0b3IoaXRlbSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBmaWx0ZXJlZCA9IHRoaXNbMF0uZmlsdGVyKChlbCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBlbCA9PT0gaXRlbVxyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gZmlsdGVyZWRbMF1cclxuICAgIH1cclxuICB9XHJcbiAgZmluZEFsbCA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiB0aGlzWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoaXRlbSlcclxuICAgIH1cclxuICB9XHJcbiAgY3NzID0gZnVuY3Rpb24gKGF0dHIsIHZhbCkge1xyXG4gICAgaWYgKCF2YWwpIHtcclxuICAgICAgcmV0dXJuIHRoaXNbMF0uc3R5bGVbYXR0cl1cclxuICAgIH1cclxuICAgIHRoaXMuZm9yRWFjaCgocykgPT4ge1xyXG4gICAgICBzLnN0eWxlW2F0dHJdID0gdmFsXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmVhZHkoY2IpIHtcclxuICAgIGNvbnN0IGlzUmVhZHkgPSB0aGlzLnNvbWUoZSA9PiB7XHJcbiAgICAgIHJldHVybiBlLnJlYWR5U3RhdGUgIT0gbnVsbCAmJiBlLnJlYWR5U3RhdGUgIT0gJ2xvYWRpbmcnXHJcbiAgICB9KVxyXG4gICAgaWYgKGlzUmVhZHkpIHtcclxuICAgICAgY2IoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGNiKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiAkKHNlbGVjdG9yKSB7XHJcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuICAgIHJldHVybiBuZXcgRWxlbWVudENvbGxlY3Rpb24oLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBuZXcgRWxlbWVudENvbGxlY3Rpb24oc2VsZWN0b3IpXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gYWRkVG9vbHRpcChhcmdzKSB7XHJcblxyXG4gIFtdLmZvckVhY2guY2FsbChhcmdzLCAoZWwpID0+IHtcclxuICAgIGVsLm9ubW91c2VlbnRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHRpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKCd0aXAnKVxyXG4gICAgICB0aXAuaW5uZXJUZXh0ID0gYXJncy5tZXNzYWdlXHJcblxyXG4gICAgICBlbC5hcHBlbmQodGlwKVxyXG4gICAgICBsZXQgcmVtb3ZlID0gKCkgPT4gdGlwLnJlbW92ZSgpXHJcbiAgICAgIHRpcC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCByZW1vdmUuYmluZCh0aXApLCB0cnVlKVxyXG4gICAgfS5iaW5kKGFyZ3MpXHJcblxyXG4gICAgZWwub25tb3VzZWxlYXZlID0gKCkgPT4ge1xyXG4gICAgICBsZXQgdGlwID0gZWwucXVlcnlTZWxlY3RvcignLnRpcCcpXHJcbiAgICAgIHRpcC5yZW1vdmUoKVxyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxuXHJcblxyXG5leHBvcnQge1xyXG4gIGRyb3BEb3duLFxyXG4gIGFkZFRvb2x0aXAsXHJcbiAgcG9wdXAsXHJcbiAgZGVib3VuY2UsXHJcbiAgSXNKc29uU3RyaW5nLFxyXG5cclxuICBwb3N0LCBnZXQsIHVuaXEsXHJcbiAgdmFsaWRhdGUsICRcclxufVxyXG4iLCJpbXBvcnQgJy4vYWNjb3JkaW9uLnNjc3MnXHJcbmltcG9ydCB7JH0gZnJvbSAnLi4vLi4vY29tbW9uJ1xyXG5cclxubGV0IGFjY29yZGlvbnMgPSAkKCdbYWNjb3JkaW9uXScpXHJcbmlmIChhY2NvcmRpb25zKSB7XHJcblxyXG4gIGxldCBjaGVja2JveGVzID0gJChgW2FjY29yZGlvbl0gW3R5cGU9J2NoZWNrYm94J11gKVxyXG4gIGlmIChjaGVja2JveGVzKSB7XHJcbiAgICBbLi4uY2hlY2tib3hlc10uZmlsdGVyKGNoID0+IHtcclxuICAgICAgY2guY2hlY2tlZCA9IGZhbHNlXHJcbiAgICB9KVxyXG4gIH1cclxuICAkKCdbYWNjb3JkaW9uXScpLm9uKCdjbGljaycsIGhhbmRsZSlcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlKHt0YXJnZXR9KSB7XHJcbiAgbGV0IGxpID0gdGFyZ2V0LmNsb3Nlc3QoJ2xpJylcclxuICBpZiAoIWxpKSByZXR1cm5cclxuXHJcbiAgbGV0IGFjY29yZGlvbiA9IGxpLmNsb3Nlc3QoJ1thY2NvcmRpb25dJylcclxuICBsZXQgdWwgPSAkKGxpKS5maW5kKCd1bCcpXHJcbiAgaWYgKCF1bCkge1xyXG4gICAgcm90YXRlQXJyb3cobGkpXHJcbiAgfSBlbHNlIHtcclxuICAgIGlmICh1bC5jbGFzc0xpc3QuY29udGFpbnMoJ29wZW4nKSkge1xyXG4gICAgICBzbGlkZVVwKHVsLCBsaSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGFjY29yZGlvbi5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIlxyXG4gICAgICBpZiAoIXVsKSByZXR1cm5cclxuICAgICAgbGV0IHBhcmVudCA9IGxpLmNsb3Nlc3QoJ3VsJylcclxuICAgICAgY2xvc2VTaWJsaW5ncyhwYXJlbnQpXHJcbiAgICAgIHNsaWRlRG93bih1bCwgbGksIHBhcmVudClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb3NlU2libGluZ3MocGFyZW50KSB7XHJcbiAgaWYgKCFwYXJlbnQpIHJldHVyblxyXG4gIGxldCBvcGVuID0gJChwYXJlbnQpLmZpbmQoJ2xpPnVsLm9wZW4nKVxyXG4gIGlmIChvcGVuKSB7XHJcbiAgICBsZXQgbGkgPSBvcGVuLmNsb3Nlc3QoJ2xpJylcclxuICAgIHNsaWRlVXAob3BlbiwgbGkpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzbGlkZURvd24odWwsIGxpLCBwYXJlbnQpIHtcclxuICBpZiAocGFyZW50KSB7XHJcbiAgICBwYXJlbnQuc3R5bGUubWF4SGVpZ2h0ID0gdWwuc2Nyb2xsSGVpZ2h0ICsgcGFyZW50LnNjcm9sbEhlaWdodCArIFwicHhcIjtcclxuICB9XHJcbiAgdWwuc3R5bGUubWF4SGVpZ2h0ID0gdWwuc2Nyb2xsSGVpZ2h0ICsgXCJweFwiO1xyXG4gIHVsLmNsYXNzTGlzdC50b2dnbGUoJ29wZW4nKVxyXG4gIGxpLmNsYXNzTGlzdC50b2dnbGUoJ3JvdGF0ZScpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNsaWRlVXAodWwsIGxpKSB7XHJcbiAgdWwuc3R5bGUubWF4SGVpZ2h0ID0gMCArIFwicHhcIjtcclxuICB1bC5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJylcclxuICBsaS5jbGFzc0xpc3QudG9nZ2xlKCdyb3RhdGUnKVxyXG59XHJcblxyXG5mdW5jdGlvbiByb3RhdGVBcnJvdyhsaSkge1xyXG4gIGxpLmNsYXNzTGlzdC50b2dnbGUoJ3JvdGF0ZScpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluY3JlYXNlUGFyZW50KHBhcmVudCwgdWxIZWlnaHQpIHtcclxuICBpZiAoIXBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjY29yZGlvbicpKSB7XHJcbiAgICBsZXQgcGFyZW50SGVpZ2h0ID0gcGFyc2VJbnQocGFyZW50LnN0eWxlLm1heEhlaWdodCkgKyB1bEhlaWdodFxyXG4gICAgcGFyZW50LnN0eWxlLm1heEhlaWdodCA9IHBhcmVudEhlaWdodCArIFwicHhcIjtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyR9IGZyb20gJy4uL2NvbW1vbidcclxubGV0IHNpZGViYXIgPSAkKCcuYWRtaW5fc2lkZWJhcicpWzBdXHJcbmlmIChzaWRlYmFyKSB7XHJcbiAgJCgnc3ZnI2J1cmdlcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBhY2NvcmRpb24gPSAkKCcuYWRtaW5fc2lkZWJhciBbYWNjb3JkaW9uXScpWzBdXHJcbiAgICBhY2NvcmRpb24uY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpXHJcbiAgfSlcclxufVxyXG5cclxuIiwiaW1wb3J0IHskLCBwb3B1cCwgcG9zdH0gZnJvbSBcIi4uLy4uL2NvbW1vblwiO1xyXG5pbXBvcnQgXCIuLi8uLi9jb21wb25lbnRzL3BvcHVwLnNjc3NcIjtcclxuXHJcblxyXG5sZXQgX2NhY2hlID0ge1xyXG4gICAgY2xlYXJDYWNoZTogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KCcvYWRtaW5zYy9jbGVhckNhY2hlJywge30pXHJcbiAgICAgICAgaWYgKHJlcz09PSfQo9GB0L/QtdGI0L3QvicpIHtcclxuICAgICAgICAgICAgcG9wdXAuc2hvdyhyZXMpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWNoZSgpIHtcclxuICAgICQoJy5jbGVhckNhY2hlJykub24oJ2NsaWNrJywgX2NhY2hlLmNsZWFyQ2FjaGUpXHJcbn0iLCJpbXBvcnQgeyQsIHBvc3QsIHBvcHVwfSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgX3Rlc3RSZXN1bHQgPSB7XHJcblxyXG5cclxuICBkZWxTZXJ2ZXI6IGFzeW5jIChpZCkgPT4ge1xyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9hZG1pbnNjL3Rlc3RyZXN1bHQvZGVsZXRlJywge2lkfSlcclxuICAgIGlmIChyZXMpIHtcclxuICAgICAgcG9wdXAuc2hvdygn0KPQtNCw0LvQtdC90L4nKVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGRlbERvbTogKGlkKSA9PiB7XHJcbiAgICBbXS5tYXAuY2FsbCgkKGBbZGF0YS1yb3cgPSBcIiR7aWR9XCJdYCksIGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgaS5yZW1vdmUoKVxyXG4gICAgICB9XHJcbiAgICApXHJcbiAgfSxcclxuXHJcbiAgZGVsZXRlOiAoaWQpID0+IHtcclxuICAgIGlmIChjb25maXJtKFwi0KPQtNCw0LvQuNGC0Ywg0YDQtdC30YPQu9GM0YLQsNGCINGC0LXRgdGC0LA/XCIpKSB7XHJcbiAgICAgIF90ZXN0UmVzdWx0LmRlbERvbShpZClcclxuICAgICAgX3Rlc3RSZXN1bHQuZGVsU2VydmVyKGlkKVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG59IiwiaW1wb3J0ICcuL3Rlc3QtcmVzdWx0c19fdGFibGUuc2NzcydcclxuaW1wb3J0IHskfSBmcm9tICcuLi8uLi9jb21tb24nXHJcbmltcG9ydCB7X3Rlc3RSZXN1bHR9IGZyb20gJy4uL21vZGVsL190ZXN0UmVzdWx0J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGVzdFJlc3VsdHMoKSB7XHJcbiAgJCgnLnRlc3QtcmVzdWx0c19fdGFibGUnKS5vbignY2xpY2snLGhhbmRsZUNsaWNrKVxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVDbGljayh7dGFyZ2V0fSkge1xyXG4gICAgaWYgKCEhdGFyZ2V0LmNsb3Nlc3QoJy5kZWwtYnRuJykpe1xyXG4gICAgICBsZXQgaWQgPSB0YXJnZXQuY2xvc2VzdCgnLmRlbC1idG4nKS5kYXRhc2V0LnJvd1xyXG4gICAgICBfdGVzdFJlc3VsdC5kZWxldGUoaWQpXHJcbiAgICB9XHJcblxyXG4gIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHskLCBwb3B1cCwgcG9zdCwgYWRkVG9vbHRpcH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vblwiXHJcblxyXG5jbGFzcyBvcGVucXVlc3Rpb24ge1xyXG5cclxuICBtb2RlbCA9ICdvcGVucXVlc3Rpb24nXHJcbiAgcXVlc3Rpb25zID0gJCgnLnF1ZXN0aW9ucz4ucXVlc3Rpb24tZWRpdCcpXHJcbiAgdGVzdElkID0gKyQoJy5xdWVzdGlvbnMnKVswXT8uZGF0YXNldC50ZXN0SWQgPz8gbnVsbFxyXG4gIHF1ZXN0aW9uQ250ID0gJCgnLnF1ZXN0aW9ucz4ucXVlc3Rpb24tZWRpdCcpLmxlbmd0aCA/PyBudWxsXHJcblxyXG4gIGFzeW5jIGNyZWF0ZSh0YXJnZXQpIHtcclxuICAgIGxldCBpZCA9IDBcclxuICAgIGxldCBvcGVudGVzdF9pZCA9IHRoaXMudGVzdElkXHJcbiAgICBsZXQgc29ydCA9IHRoaXMucXVlc3Rpb25DbnQrMVxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoYC9hZG1pbnNjLyR7dGhpcy5tb2RlbH0vdXBkYXRlT3JDcmVhdGVgLFxyXG4gICAgICB7aWQsb3BlbnRlc3RfaWQsc29ydH0pXHJcbiAgICByZXMgPSBhd2FpdCBKU09OLnBhcnNlKHJlcylcclxuXHJcbiAgICBpZiAocmVzLmlkKSB7XHJcbiAgICAgIGxldCBjbG9uZSA9IHRoaXMuY2xvbmVFbXB0eU1vZGVsKClcclxuICAgICAgbGV0IGFkZEJ0biA9IHRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb25fX2NyZWF0ZS1idXR0b24nKVxyXG5cclxuICAgICAgY2xvbmUucXVlcnlTZWxlY3RvcignLnNvcnQnKS5pbm5lclRleHQgPSB0aGlzLnF1ZXN0aW9uQ250ICsgMVxyXG4gICAgICBjbG9uZS5xdWVyeVNlbGVjdG9yKCcudGV4dCcpLmlubmVyVGV4dCA9ICcnXHJcbiAgICAgIGNsb25lLmlkID0gcmVzLmlkXHJcbiAgICAgIGFkZEJ0bi5iZWZvcmUoY2xvbmUpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbG9uZUVtcHR5TW9kZWwoKSB7XHJcbiAgICBsZXQgcXVlc3Rpb24gPSAkKCcucXVlc3Rpb25zIC5xdWVzdGlvbi1lZGl0JylbMF1cclxuICAgIGlmIChxdWVzdGlvbikge1xyXG4gICAgICBsZXQgcSA9IHF1ZXN0aW9uLmNsb25lTm9kZSh0cnVlKVxyXG4gICAgICBsZXQgYW5zID0gcS5xdWVyeVNlbGVjdG9yQWxsKCcucm93IC5hbnN3ZXInKTtcclxuICAgICAgW10uZm9yRWFjaC5jYWxsKGFucywgZnVuY3Rpb24gKGFuc3dlcikge1xyXG4gICAgICAgIGFuc3dlci5yZW1vdmUoKVxyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gcVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgc29ydCh1cFRvUWVzdGlvbk51bWJlcikge1xyXG5cclxuICAgIGxldCBxdWVzdGlvbnNFbHMgPSB0aGlzLnF1ZXN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGVsLCBpKSB7XHJcbiAgICAgICAgaWYgKGkgKyAxIDwgdXBUb1Flc3Rpb25OdW1iZXIpIHJldHVybiBlbFxyXG4gICAgICB9XHJcbiAgICApXHJcbiAgICBsZXQgdG9DaGFuZ2UgPSBxdWVzdGlvbnNFbHMubWFwKChlbCkgPT4ge1xyXG4gICAgICByZXR1cm4gZWwuaWRcclxuICAgIH0pXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdChgLyR7dGhpcy5tb2RlbH0vc29ydGAsIHt0b0NoYW5nZX0pXHJcbiAgICByZXMgPSBKU09OLnBhcnNlKHJlcylcclxuICAgIGlmIChyZXMubXNnKSB7XHJcbiAgICAgIHBvcHVwLnNob3cocmVzLm1zZylcclxuICAgIH1cclxuICAgIHF1ZXN0aW9uc0Vscy5tYXAoKGVsLCBpKSA9PiB7XHJcbiAgICAgICQoZWwpLmZpbmQoJy5zb3J0JykuaW5uZXJUZXh0ID0gaSArIDFcclxuXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcblxyXG4gIGFzeW5jIGNoYW5nZVBhcmVudCh0YXJnZXQpIHtcclxuICAgIC8vIGRlYnVnZ2VyXHJcblxyXG4gICAgaWYgKHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdsaScpIHJldHVyblxyXG5cclxuICAgIGxldCBpZCA9IHRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb24tZWRpdCcpLmlkXHJcbiAgICBsZXQgdGVzdF9pZCA9IHRhcmdldC5kYXRhc2V0Wyd2YWx1ZSddXHJcbiAgICBsZXQgdGVzdF9uYW1lID0gdGFyZ2V0LmlubmVyVGV4dFxyXG4gICAgaWYgKCEraWQgfHwgISt0ZXN0X2lkIHx8ICF0ZXN0X25hbWUpIHJldHVyblxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoYC9hZG1pbnNjLyR7dGhpcy5tb2RlbH0vY2hhbmdlUGFyZW50YCwge2lkLCB0ZXN0X2lkfSlcclxuICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgaWYgKHJlcy5tc2cgIT09ICdvaycpIHRocm93IChlKTtcclxuICAgIGxldCBxdWVzdGlvbiA9IHRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb24tZWRpdCcpXHJcbiAgICBxdWVzdGlvbi5yZW1vdmUoKVxyXG4gICAgcG9wdXAuc2hvdygn0J/QtdGA0LXQvNC10YnQtdC9INCyICcgKyB0ZXN0X25hbWUpXHJcbiAgfVxyXG5cclxuICBzaG93QW5zd2Vycyh0YXJnZXQpIHtcclxuICAgIGxldCByb3cgPSB0YXJnZXQuY2xvc2VzdCgnLnF1ZXN0aW9uLWVkaXQnKVxyXG4gICAgbGV0IGFuc3dlcnMgPSAkKHJvdykuZmluZCgnLnF1ZXN0aW9uX19hbnN3ZXJzJylcclxuICAgIGFuc3dlcnMuY2xhc3NMaXN0LnRvZ2dsZSgnaGVpZ2h0JylcclxuICAgIGFuc3dlcnMuY2xhc3NMaXN0LnRvZ2dsZSgnc2NhbGUnKVxyXG4gICAgdGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ3JvdGF0ZScpXHJcbiAgfVxyXG5cclxuICBhc3luYyBkZWwodGFyZ2V0KSB7XHJcbiAgICBpZiAoY29uZmlybShcItCj0LTQsNC70LjRgtGMINCy0L7Qv9GA0L7RgSDRgdC+INCy0YHQtdC80Lgg0LXQs9C+INC+0YLQstC10YLQsNC80Lg/XCIpKSB7XHJcbiAgICAgIGxldCBxdWVzdGlvbiA9IHRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb24tZWRpdCcpXHJcbiAgICAgIGxldCBpZCA9IHF1ZXN0aW9uLmlkXHJcblxyXG4gICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdChgL2FkbWluc2MvJHt0aGlzLm1vZGVsfS9kZWxldGVgLCB7aWR9KVxyXG4gICAgICByZXMgPSBKU09OLnBhcnNlKHJlcylcclxuICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgIHF1ZXN0aW9uLnJlbW92ZSgpXHJcbiAgICAgICAgcG9wdXAuc2hvdyhyZXMubXNnKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IF9vcGVucXVlc3Rpb24gPSBuZXcgb3BlbnF1ZXN0aW9uKCkiLCIvKiohXG4gKiBTb3J0YWJsZSAxLjE0LjBcbiAqIEBhdXRob3JcdFJ1YmFYYSAgIDx0cmFzaEBydWJheGEub3JnPlxuICogQGF1dGhvclx0b3dlbm0gICAgPG93ZW4yMzM1NUBnbWFpbC5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuXG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSB7XG4gICAgICBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgdmVyc2lvbiA9IFwiMS4xNC4wXCI7XG5cbmZ1bmN0aW9uIHVzZXJBZ2VudChwYXR0ZXJuKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yKSB7XG4gICAgcmV0dXJuICEhIC8qQF9fUFVSRV9fKi9uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHBhdHRlcm4pO1xuICB9XG59XG5cbnZhciBJRTExT3JMZXNzID0gdXNlckFnZW50KC8oPzpUcmlkZW50LipydlsgOl0/MTFcXC58bXNpZXxpZW1vYmlsZXxXaW5kb3dzIFBob25lKS9pKTtcbnZhciBFZGdlID0gdXNlckFnZW50KC9FZGdlL2kpO1xudmFyIEZpcmVGb3ggPSB1c2VyQWdlbnQoL2ZpcmVmb3gvaSk7XG52YXIgU2FmYXJpID0gdXNlckFnZW50KC9zYWZhcmkvaSkgJiYgIXVzZXJBZ2VudCgvY2hyb21lL2kpICYmICF1c2VyQWdlbnQoL2FuZHJvaWQvaSk7XG52YXIgSU9TID0gdXNlckFnZW50KC9pUChhZHxvZHxob25lKS9pKTtcbnZhciBDaHJvbWVGb3JBbmRyb2lkID0gdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgdXNlckFnZW50KC9hbmRyb2lkL2kpO1xuXG52YXIgY2FwdHVyZU1vZGUgPSB7XG4gIGNhcHR1cmU6IGZhbHNlLFxuICBwYXNzaXZlOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gb24oZWwsIGV2ZW50LCBmbikge1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpO1xufVxuXG5mdW5jdGlvbiBvZmYoZWwsIGV2ZW50LCBmbikge1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVzKFxuLyoqSFRNTEVsZW1lbnQqL1xuZWwsXG4vKipTdHJpbmcqL1xuc2VsZWN0b3IpIHtcbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuO1xuICBzZWxlY3RvclswXSA9PT0gJz4nICYmIChzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cmluZygxKSk7XG5cbiAgaWYgKGVsKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChlbC5tYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudE9ySG9zdChlbCkge1xuICByZXR1cm4gZWwuaG9zdCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwuaG9zdC5ub2RlVHlwZSA/IGVsLmhvc3QgOiBlbC5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0KFxuLyoqSFRNTEVsZW1lbnQqL1xuZWwsXG4vKipTdHJpbmcqL1xuc2VsZWN0b3IsXG4vKipIVE1MRWxlbWVudCovXG5jdHgsIGluY2x1ZGVDVFgpIHtcbiAgaWYgKGVsKSB7XG4gICAgY3R4ID0gY3R4IHx8IGRvY3VtZW50O1xuXG4gICAgZG8ge1xuICAgICAgaWYgKHNlbGVjdG9yICE9IG51bGwgJiYgKHNlbGVjdG9yWzBdID09PSAnPicgPyBlbC5wYXJlbnROb2RlID09PSBjdHggJiYgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpIDogbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSB8fCBpbmNsdWRlQ1RYICYmIGVsID09PSBjdHgpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWwgPT09IGN0eCkgYnJlYWs7XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgfSB3aGlsZSAoZWwgPSBnZXRQYXJlbnRPckhvc3QoZWwpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUl9TUEFDRSA9IC9cXHMrL2c7XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsLCBuYW1lLCBzdGF0ZSkge1xuICBpZiAoZWwgJiYgbmFtZSkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzdGF0ZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykucmVwbGFjZShSX1NQQUNFLCAnICcpLnJlcGxhY2UoJyAnICsgbmFtZSArICcgJywgJyAnKTtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IChjbGFzc05hbWUgKyAoc3RhdGUgPyAnICcgKyBuYW1lIDogJycpKS5yZXBsYWNlKFJfU1BBQ0UsICcgJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNzcyhlbCwgcHJvcCwgdmFsKSB7XG4gIHZhciBzdHlsZSA9IGVsICYmIGVsLnN0eWxlO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgdmFsID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgJycpO1xuICAgICAgfSBlbHNlIGlmIChlbC5jdXJyZW50U3R5bGUpIHtcbiAgICAgICAgdmFsID0gZWwuY3VycmVudFN0eWxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcCA9PT0gdm9pZCAwID8gdmFsIDogdmFsW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShwcm9wIGluIHN0eWxlKSAmJiBwcm9wLmluZGV4T2YoJ3dlYmtpdCcpID09PSAtMSkge1xuICAgICAgICBwcm9wID0gJy13ZWJraXQtJyArIHByb3A7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlW3Byb3BdID0gdmFsICsgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gJycgOiAncHgnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0cml4KGVsLCBzZWxmT25seSkge1xuICB2YXIgYXBwbGllZFRyYW5zZm9ybXMgPSAnJztcblxuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gZWw7XG4gIH0gZWxzZSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGNzcyhlbCwgJ3RyYW5zZm9ybScpO1xuXG4gICAgICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gdHJhbnNmb3JtICsgJyAnICsgYXBwbGllZFRyYW5zZm9ybXM7XG4gICAgICB9XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgICB9IHdoaWxlICghc2VsZk9ubHkgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG5cbiAgdmFyIG1hdHJpeEZuID0gd2luZG93LkRPTU1hdHJpeCB8fCB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4IHx8IHdpbmRvdy5DU1NNYXRyaXggfHwgd2luZG93Lk1TQ1NTTWF0cml4O1xuICAvKmpzaGludCAtVzA1NiAqL1xuXG4gIHJldHVybiBtYXRyaXhGbiAmJiBuZXcgbWF0cml4Rm4oYXBwbGllZFRyYW5zZm9ybXMpO1xufVxuXG5mdW5jdGlvbiBmaW5kKGN0eCwgdGFnTmFtZSwgaXRlcmF0b3IpIHtcbiAgaWYgKGN0eCkge1xuICAgIHZhciBsaXN0ID0gY3R4LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9IGxpc3QubGVuZ3RoO1xuXG4gICAgaWYgKGl0ZXJhdG9yKSB7XG4gICAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgICBpdGVyYXRvcihsaXN0W2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpIHtcbiAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50O1xuXG4gIGlmIChzY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBcImJvdW5kaW5nIGNsaWVudCByZWN0XCIgb2YgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgICAgICAgICAgICAgICAgICBUaGUgZWxlbWVudCB3aG9zZSBib3VuZGluZ0NsaWVudFJlY3QgaXMgd2FudGVkXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgIFdoZXRoZXIgdGhlIHJlY3Qgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBjb250YWluaW5nIGJsb2NrIG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWluZXJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIHJlbGF0aXZlIHBhcmVudCBvZiAoaW5jbHVkaW5nKSB0aGUgY29udGFpZW5yXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHVuZG9TY2FsZSAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdGhlIGNvbnRhaW5lcidzIHNjYWxlKCkgc2hvdWxkIGJlIHVuZG9uZVxuICogQHBhcmFtICB7W0hUTUxFbGVtZW50XX0gY29udGFpbmVyICAgICAgICAgICAgICBUaGUgcGFyZW50IHRoZSBlbGVtZW50IHdpbGwgYmUgcGxhY2VkIGluXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBib3VuZGluZ0NsaWVudFJlY3Qgb2YgZWwsIHdpdGggc3BlY2lmaWVkIGFkanVzdG1lbnRzXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSZWN0KGVsLCByZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrLCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50LCB1bmRvU2NhbGUsIGNvbnRhaW5lcikge1xuICBpZiAoIWVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiBlbCAhPT0gd2luZG93KSByZXR1cm47XG4gIHZhciBlbFJlY3QsIHRvcCwgbGVmdCwgYm90dG9tLCByaWdodCwgaGVpZ2h0LCB3aWR0aDtcblxuICBpZiAoZWwgIT09IHdpbmRvdyAmJiBlbC5wYXJlbnROb2RlICYmIGVsICE9PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIHtcbiAgICBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0b3AgPSBlbFJlY3QudG9wO1xuICAgIGxlZnQgPSBlbFJlY3QubGVmdDtcbiAgICBib3R0b20gPSBlbFJlY3QuYm90dG9tO1xuICAgIHJpZ2h0ID0gZWxSZWN0LnJpZ2h0O1xuICAgIGhlaWdodCA9IGVsUmVjdC5oZWlnaHQ7XG4gICAgd2lkdGggPSBlbFJlY3Qud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gMDtcbiAgICBsZWZ0ID0gMDtcbiAgICBib3R0b20gPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgfVxuXG4gIGlmICgocmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50KSAmJiBlbCAhPT0gd2luZG93KSB7XG4gICAgLy8gQWRqdXN0IGZvciB0cmFuc2xhdGUoKVxuICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lciB8fCBlbC5wYXJlbnROb2RlOyAvLyBzb2x2ZXMgIzExMjMgKHNlZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM3OTUzODA2LzYwODgzMTIpXG4gICAgLy8gTm90IG5lZWRlZCBvbiA8PSBJRTExXG5cbiAgICBpZiAoIUlFMTFPckxlc3MpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIChjc3MoY29udGFpbmVyLCAndHJhbnNmb3JtJykgIT09ICdub25lJyB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICYmIGNzcyhjb250YWluZXIsICdwb3NpdGlvbicpICE9PSAnc3RhdGljJykpIHtcbiAgICAgICAgICB2YXIgY29udGFpbmVyUmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gU2V0IHJlbGF0aXZlIHRvIGVkZ2VzIG9mIHBhZGRpbmcgYm94IG9mIGNvbnRhaW5lclxuXG4gICAgICAgICAgdG9wIC09IGNvbnRhaW5lclJlY3QudG9wICsgcGFyc2VJbnQoY3NzKGNvbnRhaW5lciwgJ2JvcmRlci10b3Atd2lkdGgnKSk7XG4gICAgICAgICAgbGVmdCAtPSBjb250YWluZXJSZWN0LmxlZnQgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLWxlZnQtd2lkdGgnKSk7XG4gICAgICAgICAgYm90dG9tID0gdG9wICsgZWxSZWN0LmhlaWdodDtcbiAgICAgICAgICByaWdodCA9IGxlZnQgKyBlbFJlY3Qud2lkdGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXG4gICAgICB9IHdoaWxlIChjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHVuZG9TY2FsZSAmJiBlbCAhPT0gd2luZG93KSB7XG4gICAgLy8gQWRqdXN0IGZvciBzY2FsZSgpXG4gICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KGNvbnRhaW5lciB8fCBlbCksXG4gICAgICAgIHNjYWxlWCA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmEsXG4gICAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQ7XG5cbiAgICBpZiAoZWxNYXRyaXgpIHtcbiAgICAgIHRvcCAvPSBzY2FsZVk7XG4gICAgICBsZWZ0IC89IHNjYWxlWDtcbiAgICAgIHdpZHRoIC89IHNjYWxlWDtcbiAgICAgIGhlaWdodCAvPSBzY2FsZVk7XG4gICAgICBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgICByaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogdG9wLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgYm90dG9tOiBib3R0b20sXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufVxuLyoqXG4gKiBDaGVja3MgaWYgYSBzaWRlIG9mIGFuIGVsZW1lbnQgaXMgc2Nyb2xsZWQgcGFzdCBhIHNpZGUgb2YgaXRzIHBhcmVudHNcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWwgICAgICAgICAgIFRoZSBlbGVtZW50IHdobydzIHNpZGUgYmVpbmcgc2Nyb2xsZWQgb3V0IG9mIHZpZXcgaXMgaW4gcXVlc3Rpb25cbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgZWxTaWRlICAgICAgIFNpZGUgb2YgdGhlIGVsZW1lbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKVxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBwYXJlbnRTaWRlICAgU2lkZSBvZiB0aGUgcGFyZW50IGluIHF1ZXN0aW9uICgndG9wJywgJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJylcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICAgICAgIFRoZSBwYXJlbnQgc2Nyb2xsIGVsZW1lbnQgdGhhdCB0aGUgZWwncyBzaWRlIGlzIHNjcm9sbGVkIHBhc3QsIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gc3VjaCBlbGVtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBpc1Njcm9sbGVkUGFzdChlbCwgZWxTaWRlLCBwYXJlbnRTaWRlKSB7XG4gIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgdHJ1ZSksXG4gICAgICBlbFNpZGVWYWwgPSBnZXRSZWN0KGVsKVtlbFNpZGVdO1xuICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIHZhciBwYXJlbnRTaWRlVmFsID0gZ2V0UmVjdChwYXJlbnQpW3BhcmVudFNpZGVdLFxuICAgICAgICB2aXNpYmxlID0gdm9pZCAwO1xuXG4gICAgaWYgKHBhcmVudFNpZGUgPT09ICd0b3AnIHx8IHBhcmVudFNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgdmlzaWJsZSA9IGVsU2lkZVZhbCA+PSBwYXJlbnRTaWRlVmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsIDw9IHBhcmVudFNpZGVWYWw7XG4gICAgfVxuXG4gICAgaWYgKCF2aXNpYmxlKSByZXR1cm4gcGFyZW50O1xuICAgIGlmIChwYXJlbnQgPT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkgYnJlYWs7XG4gICAgcGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQocGFyZW50LCBmYWxzZSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEdldHMgbnRoIGNoaWxkIG9mIGVsLCBpZ25vcmluZyBoaWRkZW4gY2hpbGRyZW4sIHNvcnRhYmxlJ3MgZWxlbWVudHMgKGRvZXMgbm90IGlnbm9yZSBjbG9uZSBpZiBpdCdzIHZpc2libGUpXG4gKiBhbmQgbm9uLWRyYWdnYWJsZSBlbGVtZW50c1xuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFRoZSBwYXJlbnQgZWxlbWVudFxuICogQHBhcmFtICB7TnVtYmVyfSBjaGlsZE51bSAgICAgIFRoZSBpbmRleCBvZiB0aGUgY2hpbGRcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyAgICAgICBQYXJlbnQgU29ydGFibGUncyBvcHRpb25zXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgVGhlIGNoaWxkIGF0IGluZGV4IGNoaWxkTnVtLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICovXG5cblxuZnVuY3Rpb24gZ2V0Q2hpbGQoZWwsIGNoaWxkTnVtLCBvcHRpb25zLCBpbmNsdWRlRHJhZ0VsKSB7XG4gIHZhciBjdXJyZW50Q2hpbGQgPSAwLFxuICAgICAgaSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xuXG4gIHdoaWxlIChpIDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgaWYgKGNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJyAmJiBjaGlsZHJlbltpXSAhPT0gU29ydGFibGUuZ2hvc3QgJiYgKGluY2x1ZGVEcmFnRWwgfHwgY2hpbGRyZW5baV0gIT09IFNvcnRhYmxlLmRyYWdnZWQpICYmIGNsb3Nlc3QoY2hpbGRyZW5baV0sIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgZmFsc2UpKSB7XG4gICAgICBpZiAoY3VycmVudENoaWxkID09PSBjaGlsZE51bSkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5baV07XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRDaGlsZCsrO1xuICAgIH1cblxuICAgIGkrKztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBsYXN0IGNoaWxkIGluIHRoZSBlbCwgaWdub3JpbmcgZ2hvc3RFbCBvciBpbnZpc2libGUgZWxlbWVudHMgKGNsb25lcylcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICBQYXJlbnQgZWxlbWVudFxuICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yICAgIEFueSBvdGhlciBlbGVtZW50cyB0aGF0IHNob3VsZCBiZSBpZ25vcmVkXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgVGhlIGxhc3QgY2hpbGQsIGlnbm9yaW5nIGdob3N0RWxcbiAqL1xuXG5cbmZ1bmN0aW9uIGxhc3RDaGlsZChlbCwgc2VsZWN0b3IpIHtcbiAgdmFyIGxhc3QgPSBlbC5sYXN0RWxlbWVudENoaWxkO1xuXG4gIHdoaWxlIChsYXN0ICYmIChsYXN0ID09PSBTb3J0YWJsZS5naG9zdCB8fCBjc3MobGFzdCwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnIHx8IHNlbGVjdG9yICYmICFtYXRjaGVzKGxhc3QsIHNlbGVjdG9yKSkpIHtcbiAgICBsYXN0ID0gbGFzdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGxhc3QgfHwgbnVsbDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgYW4gZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudCBmb3IgYSBzZWxlY3RlZCBzZXQgb2ZcbiAqIGVsZW1lbnRzXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcbiAqIEBwYXJhbSAge3NlbGVjdG9yfSBzZWxlY3RvclxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cblxuZnVuY3Rpb24gaW5kZXgoZWwsIHNlbGVjdG9yKSB7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgaWYgKCFlbCB8fCAhZWwucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cblxuICB3aGlsZSAoZWwgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgaWYgKGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgIT09ICdURU1QTEFURScgJiYgZWwgIT09IFNvcnRhYmxlLmNsb25lICYmICghc2VsZWN0b3IgfHwgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSkge1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbCBvZmZzZXQgb2YgdGhlIGdpdmVuIGVsZW1lbnQsIGFkZGVkIHdpdGggYWxsIHRoZSBzY3JvbGwgb2Zmc2V0cyBvZiBwYXJlbnQgZWxlbWVudHMuXG4gKiBUaGUgdmFsdWUgaXMgcmV0dXJuZWQgaW4gcmVhbCBwaXhlbHMuXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICBPZmZzZXRzIGluIHRoZSBmb3JtYXQgb2YgW2xlZnQsIHRvcF1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGVsKSB7XG4gIHZhciBvZmZzZXRMZWZ0ID0gMCxcbiAgICAgIG9mZnNldFRvcCA9IDAsXG4gICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcblxuICBpZiAoZWwpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoZWwpLFxuICAgICAgICAgIHNjYWxlWCA9IGVsTWF0cml4LmEsXG4gICAgICAgICAgc2NhbGVZID0gZWxNYXRyaXguZDtcbiAgICAgIG9mZnNldExlZnQgKz0gZWwuc2Nyb2xsTGVmdCAqIHNjYWxlWDtcbiAgICAgIG9mZnNldFRvcCArPSBlbC5zY3JvbGxUb3AgKiBzY2FsZVk7XG4gICAgfSB3aGlsZSAoZWwgIT09IHdpblNjcm9sbGVyICYmIChlbCA9IGVsLnBhcmVudE5vZGUpKTtcbiAgfVxuXG4gIHJldHVybiBbb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG9iamVjdCB3aXRoaW4gdGhlIGdpdmVuIGFycmF5XG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyICAgQXJyYXkgdGhhdCBtYXkgb3IgbWF5IG5vdCBob2xkIHRoZSBvYmplY3RcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqICBBbiBvYmplY3QgdGhhdCBoYXMgYSBrZXktdmFsdWUgcGFpciB1bmlxdWUgdG8gYW5kIGlkZW50aWNhbCB0byBhIGtleS12YWx1ZSBwYWlyIGluIHRoZSBvYmplY3QgeW91IHdhbnQgdG8gZmluZFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIFRoZSBpbmRleCBvZiB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSwgb3IgLTFcbiAqL1xuXG5cbmZ1bmN0aW9uIGluZGV4T2ZPYmplY3QoYXJyLCBvYmopIHtcbiAgZm9yICh2YXIgaSBpbiBhcnIpIHtcbiAgICBpZiAoIWFyci5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV0gPT09IGFycltpXVtrZXldKSByZXR1cm4gTnVtYmVyKGkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWwsIGluY2x1ZGVTZWxmKSB7XG4gIC8vIHNraXAgdG8gd2luZG93XG4gIGlmICghZWwgfHwgIWVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIGVsZW0gPSBlbDtcbiAgdmFyIGdvdFNlbGYgPSBmYWxzZTtcblxuICBkbyB7XG4gICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBnZXQgZWxlbSBjc3MgaWYgaXQgaXNuJ3QgZXZlbiBvdmVyZmxvd2luZyBpbiB0aGUgZmlyc3QgcGxhY2UgKHBlcmZvcm1hbmNlKVxuICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB2YXIgZWxlbUNTUyA9IGNzcyhlbGVtKTtcblxuICAgICAgaWYgKGVsZW0uY2xpZW50V2lkdGggPCBlbGVtLnNjcm9sbFdpZHRoICYmIChlbGVtQ1NTLm92ZXJmbG93WCA9PSAnYXV0bycgfHwgZWxlbUNTUy5vdmVyZmxvd1ggPT0gJ3Njcm9sbCcpIHx8IGVsZW0uY2xpZW50SGVpZ2h0IDwgZWxlbS5zY3JvbGxIZWlnaHQgJiYgKGVsZW1DU1Mub3ZlcmZsb3dZID09ICdhdXRvJyB8fCBlbGVtQ1NTLm92ZXJmbG93WSA9PSAnc2Nyb2xsJykpIHtcbiAgICAgICAgaWYgKCFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCB8fCBlbGVtID09PSBkb2N1bWVudC5ib2R5KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICBpZiAoZ290U2VsZiB8fCBpbmNsdWRlU2VsZikgcmV0dXJuIGVsZW07XG4gICAgICAgIGdvdFNlbGYgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgfSB3aGlsZSAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSk7XG5cbiAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGRzdCwgc3JjKSB7XG4gIGlmIChkc3QgJiYgc3JjKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdDtcbn1cblxuZnVuY3Rpb24gaXNSZWN0RXF1YWwocmVjdDEsIHJlY3QyKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHJlY3QxLnRvcCkgPT09IE1hdGgucm91bmQocmVjdDIudG9wKSAmJiBNYXRoLnJvdW5kKHJlY3QxLmxlZnQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmxlZnQpICYmIE1hdGgucm91bmQocmVjdDEuaGVpZ2h0KSA9PT0gTWF0aC5yb3VuZChyZWN0Mi5oZWlnaHQpICYmIE1hdGgucm91bmQocmVjdDEud2lkdGgpID09PSBNYXRoLnJvdW5kKHJlY3QyLndpZHRoKTtcbn1cblxudmFyIF90aHJvdHRsZVRpbWVvdXQ7XG5cbmZ1bmN0aW9uIHRocm90dGxlKGNhbGxiYWNrLCBtcykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3Rocm90dGxlVGltZW91dCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChfdGhpcywgYXJnc1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIF90aHJvdHRsZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3Rocm90dGxlVGltZW91dCA9IHZvaWQgMDtcbiAgICAgIH0sIG1zKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFRocm90dGxlKCkge1xuICBjbGVhclRpbWVvdXQoX3Rocm90dGxlVGltZW91dCk7XG4gIF90aHJvdHRsZVRpbWVvdXQgPSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbEJ5KGVsLCB4LCB5KSB7XG4gIGVsLnNjcm9sbExlZnQgKz0geDtcbiAgZWwuc2Nyb2xsVG9wICs9IHk7XG59XG5cbmZ1bmN0aW9uIGNsb25lKGVsKSB7XG4gIHZhciBQb2x5bWVyID0gd2luZG93LlBvbHltZXI7XG4gIHZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XG5cbiAgaWYgKFBvbHltZXIgJiYgUG9seW1lci5kb20pIHtcbiAgICByZXR1cm4gUG9seW1lci5kb20oZWwpLmNsb25lTm9kZSh0cnVlKTtcbiAgfSBlbHNlIGlmICgkKSB7XG4gICAgcmV0dXJuICQoZWwpLmNsb25lKHRydWUpWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0UmVjdChlbCwgcmVjdCkge1xuICBjc3MoZWwsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICBjc3MoZWwsICd0b3AnLCByZWN0LnRvcCk7XG4gIGNzcyhlbCwgJ2xlZnQnLCByZWN0LmxlZnQpO1xuICBjc3MoZWwsICd3aWR0aCcsIHJlY3Qud2lkdGgpO1xuICBjc3MoZWwsICdoZWlnaHQnLCByZWN0LmhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIHVuc2V0UmVjdChlbCkge1xuICBjc3MoZWwsICdwb3NpdGlvbicsICcnKTtcbiAgY3NzKGVsLCAndG9wJywgJycpO1xuICBjc3MoZWwsICdsZWZ0JywgJycpO1xuICBjc3MoZWwsICd3aWR0aCcsICcnKTtcbiAgY3NzKGVsLCAnaGVpZ2h0JywgJycpO1xufVxuXG52YXIgZXhwYW5kbyA9ICdTb3J0YWJsZScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuZnVuY3Rpb24gQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkge1xuICB2YXIgYW5pbWF0aW9uU3RhdGVzID0gW10sXG4gICAgICBhbmltYXRpb25DYWxsYmFja0lkO1xuICByZXR1cm4ge1xuICAgIGNhcHR1cmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gY2FwdHVyZUFuaW1hdGlvblN0YXRlKCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHJldHVybjtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZHJlbik7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY3NzKGNoaWxkLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgY2hpbGQgPT09IFNvcnRhYmxlLmdob3N0KSByZXR1cm47XG4gICAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHtcbiAgICAgICAgICB0YXJnZXQ6IGNoaWxkLFxuICAgICAgICAgIHJlY3Q6IGdldFJlY3QoY2hpbGQpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBmcm9tUmVjdCA9IF9vYmplY3RTcHJlYWQyKHt9LCBhbmltYXRpb25TdGF0ZXNbYW5pbWF0aW9uU3RhdGVzLmxlbmd0aCAtIDFdLnJlY3QpOyAvLyBJZiBhbmltYXRpbmc6IGNvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG5cblxuICAgICAgICBpZiAoY2hpbGQudGhpc0FuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgdmFyIGNoaWxkTWF0cml4ID0gbWF0cml4KGNoaWxkLCB0cnVlKTtcblxuICAgICAgICAgIGlmIChjaGlsZE1hdHJpeCkge1xuICAgICAgICAgICAgZnJvbVJlY3QudG9wIC09IGNoaWxkTWF0cml4LmY7XG4gICAgICAgICAgICBmcm9tUmVjdC5sZWZ0IC09IGNoaWxkTWF0cml4LmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuZnJvbVJlY3QgPSBmcm9tUmVjdDtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYWRkQW5pbWF0aW9uU3RhdGU6IGZ1bmN0aW9uIGFkZEFuaW1hdGlvblN0YXRlKHN0YXRlKSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMucHVzaChzdGF0ZSk7XG4gICAgfSxcbiAgICByZW1vdmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gcmVtb3ZlQW5pbWF0aW9uU3RhdGUodGFyZ2V0KSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMuc3BsaWNlKGluZGV4T2ZPYmplY3QoYW5pbWF0aW9uU3RhdGVzLCB7XG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9KSwgMSk7XG4gICAgfSxcbiAgICBhbmltYXRlQWxsOiBmdW5jdGlvbiBhbmltYXRlQWxsKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1hdGlvbkNhbGxiYWNrSWQpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhbmltYXRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBhbmltYXRpb25UaW1lID0gMDtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICB0YXJnZXQgPSBzdGF0ZS50YXJnZXQsXG4gICAgICAgICAgICBmcm9tUmVjdCA9IHRhcmdldC5mcm9tUmVjdCxcbiAgICAgICAgICAgIHRvUmVjdCA9IGdldFJlY3QodGFyZ2V0KSxcbiAgICAgICAgICAgIHByZXZGcm9tUmVjdCA9IHRhcmdldC5wcmV2RnJvbVJlY3QsXG4gICAgICAgICAgICBwcmV2VG9SZWN0ID0gdGFyZ2V0LnByZXZUb1JlY3QsXG4gICAgICAgICAgICBhbmltYXRpbmdSZWN0ID0gc3RhdGUucmVjdCxcbiAgICAgICAgICAgIHRhcmdldE1hdHJpeCA9IG1hdHJpeCh0YXJnZXQsIHRydWUpO1xuXG4gICAgICAgIGlmICh0YXJnZXRNYXRyaXgpIHtcbiAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciBjdXJyZW50IGFuaW1hdGlvblxuICAgICAgICAgIHRvUmVjdC50b3AgLT0gdGFyZ2V0TWF0cml4LmY7XG4gICAgICAgICAgdG9SZWN0LmxlZnQgLT0gdGFyZ2V0TWF0cml4LmU7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQudG9SZWN0ID0gdG9SZWN0O1xuXG4gICAgICAgIGlmICh0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgLy8gQ291bGQgYWxzbyBjaGVjayBpZiBhbmltYXRpbmdSZWN0IGlzIGJldHdlZW4gZnJvbVJlY3QgYW5kIHRvUmVjdFxuICAgICAgICAgIGlmIChpc1JlY3RFcXVhbChwcmV2RnJvbVJlY3QsIHRvUmVjdCkgJiYgIWlzUmVjdEVxdWFsKGZyb21SZWN0LCB0b1JlY3QpICYmIC8vIE1ha2Ugc3VyZSBhbmltYXRpbmdSZWN0IGlzIG9uIGxpbmUgYmV0d2VlbiB0b1JlY3QgJiBmcm9tUmVjdFxuICAgICAgICAgIChhbmltYXRpbmdSZWN0LnRvcCAtIHRvUmVjdC50b3ApIC8gKGFuaW1hdGluZ1JlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSA9PT0gKGZyb21SZWN0LnRvcCAtIHRvUmVjdC50b3ApIC8gKGZyb21SZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkpIHtcbiAgICAgICAgICAgIC8vIElmIHJldHVybmluZyB0byBzYW1lIHBsYWNlIGFzIHN0YXJ0ZWQgZnJvbSBhbmltYXRpb24gYW5kIG9uIHNhbWUgYXhpc1xuICAgICAgICAgICAgdGltZSA9IGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIHByZXZGcm9tUmVjdCwgcHJldlRvUmVjdCwgX3RoaXMub3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGlmIGZyb21SZWN0ICE9IHRvUmVjdDogYW5pbWF0ZVxuXG5cbiAgICAgICAgaWYgKCFpc1JlY3RFcXVhbCh0b1JlY3QsIGZyb21SZWN0KSkge1xuICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBmcm9tUmVjdDtcbiAgICAgICAgICB0YXJnZXQucHJldlRvUmVjdCA9IHRvUmVjdDtcblxuICAgICAgICAgIGlmICghdGltZSkge1xuICAgICAgICAgICAgdGltZSA9IF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLmFuaW1hdGUodGFyZ2V0LCBhbmltYXRpbmdSZWN0LCB0b1JlY3QsIHRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpbWUpIHtcbiAgICAgICAgICBhbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGFuaW1hdGlvblRpbWUgPSBNYXRoLm1heChhbmltYXRpb25UaW1lLCB0aW1lKTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIpO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpb25SZXNldFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0YXJnZXQuYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICAgICAgICB0YXJnZXQucHJldkZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5mcm9tUmVjdCA9IG51bGw7XG4gICAgICAgICAgICB0YXJnZXQucHJldlRvUmVjdCA9IG51bGw7XG4gICAgICAgICAgICB0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICB9LCB0aW1lKTtcbiAgICAgICAgICB0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gdGltZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG5cbiAgICAgIGlmICghYW5pbWF0aW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRpb25DYWxsYmFja0lkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgICAgfSwgYW5pbWF0aW9uVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvblN0YXRlcyA9IFtdO1xuICAgIH0sXG4gICAgYW5pbWF0ZTogZnVuY3Rpb24gYW5pbWF0ZSh0YXJnZXQsIGN1cnJlbnRSZWN0LCB0b1JlY3QsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnJyk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeCh0aGlzLmVsKSxcbiAgICAgICAgICAgIHNjYWxlWCA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmEsXG4gICAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5kLFxuICAgICAgICAgICAgdHJhbnNsYXRlWCA9IChjdXJyZW50UmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpIC8gKHNjYWxlWCB8fCAxKSxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVkgPSAoY3VycmVudFJlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoc2NhbGVZIHx8IDEpO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWCA9ICEhdHJhbnNsYXRlWDtcbiAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSAhIXRyYW5zbGF0ZVk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJyArIHRyYW5zbGF0ZVggKyAncHgsJyArIHRyYW5zbGF0ZVkgKyAncHgsMCknKTtcbiAgICAgICAgdGhpcy5mb3JSZXBhaW50RHVtbXkgPSByZXBhaW50KHRhcmdldCk7IC8vIHJlcGFpbnRcblxuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICd0cmFuc2Zvcm0gJyArIGR1cmF0aW9uICsgJ21zJyArICh0aGlzLm9wdGlvbnMuZWFzaW5nID8gJyAnICsgdGhpcy5vcHRpb25zLmVhc2luZyA6ICcnKSk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICAgIHR5cGVvZiB0YXJnZXQuYW5pbWF0ZWQgPT09ICdudW1iZXInICYmIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0ZWQpO1xuICAgICAgICB0YXJnZXQuYW5pbWF0ZWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSBmYWxzZTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVwYWludCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5vZmZzZXRXaWR0aDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUmVhbFRpbWUoYW5pbWF0aW5nUmVjdCwgZnJvbVJlY3QsIHRvUmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGZyb21SZWN0LnRvcCAtIGFuaW1hdGluZ1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSBhbmltYXRpbmdSZWN0LmxlZnQsIDIpKSAvIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSB0b1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSB0b1JlY3QubGVmdCwgMikpICogb3B0aW9ucy5hbmltYXRpb247XG59XG5cbnZhciBwbHVnaW5zID0gW107XG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWVcbn07XG52YXIgUGx1Z2luTWFuYWdlciA9IHtcbiAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KHBsdWdpbikge1xuICAgIC8vIFNldCBkZWZhdWx0IHN0YXRpYyBwcm9wZXJ0aWVzXG4gICAgZm9yICh2YXIgb3B0aW9uIGluIGRlZmF1bHRzKSB7XG4gICAgICBpZiAoZGVmYXVsdHMuaGFzT3duUHJvcGVydHkob3B0aW9uKSAmJiAhKG9wdGlvbiBpbiBwbHVnaW4pKSB7XG4gICAgICAgIHBsdWdpbltvcHRpb25dID0gZGVmYXVsdHNbb3B0aW9uXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgIGlmIChwLnBsdWdpbk5hbWUgPT09IHBsdWdpbi5wbHVnaW5OYW1lKSB7XG4gICAgICAgIHRocm93IFwiU29ydGFibGU6IENhbm5vdCBtb3VudCBwbHVnaW4gXCIuY29uY2F0KHBsdWdpbi5wbHVnaW5OYW1lLCBcIiBtb3JlIHRoYW4gb25jZVwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgfSxcbiAgcGx1Z2luRXZlbnQ6IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUsIGV2dCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmV2ZW50Q2FuY2VsZWQgPSBmYWxzZTtcblxuICAgIGV2dC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5ldmVudENhbmNlbGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50TmFtZUdsb2JhbCA9IGV2ZW50TmFtZSArICdHbG9iYWwnO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBGaXJlIGdsb2JhbCBldmVudHMgaWYgaXQgZXhpc3RzIGluIHRoaXMgc29ydGFibGVcblxuICAgICAgaWYgKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKSB7XG4gICAgICAgIHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGVcbiAgICAgICAgfSwgZXZ0KSk7XG4gICAgICB9IC8vIE9ubHkgZmlyZSBwbHVnaW4gZXZlbnQgaWYgcGx1Z2luIGlzIGVuYWJsZWQgaW4gdGhpcyBzb3J0YWJsZSxcbiAgICAgIC8vIGFuZCBwbHVnaW4gaGFzIGV2ZW50IGRlZmluZWRcblxuXG4gICAgICBpZiAoc29ydGFibGUub3B0aW9uc1twbHVnaW4ucGx1Z2luTmFtZV0gJiYgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0oX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgaW5pdGlhbGl6ZVBsdWdpbnM6IGZ1bmN0aW9uIGluaXRpYWxpemVQbHVnaW5zKHNvcnRhYmxlLCBlbCwgZGVmYXVsdHMsIG9wdGlvbnMpIHtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgdmFyIHBsdWdpbk5hbWUgPSBwbHVnaW4ucGx1Z2luTmFtZTtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9uc1twbHVnaW5OYW1lXSAmJiAhcGx1Z2luLmluaXRpYWxpemVCeURlZmF1bHQpIHJldHVybjtcbiAgICAgIHZhciBpbml0aWFsaXplZCA9IG5ldyBwbHVnaW4oc29ydGFibGUsIGVsLCBzb3J0YWJsZS5vcHRpb25zKTtcbiAgICAgIGluaXRpYWxpemVkLnNvcnRhYmxlID0gc29ydGFibGU7XG4gICAgICBpbml0aWFsaXplZC5vcHRpb25zID0gc29ydGFibGUub3B0aW9ucztcbiAgICAgIHNvcnRhYmxlW3BsdWdpbk5hbWVdID0gaW5pdGlhbGl6ZWQ7IC8vIEFkZCBkZWZhdWx0IG9wdGlvbnMgZnJvbSBwbHVnaW5cblxuICAgICAgX2V4dGVuZHMoZGVmYXVsdHMsIGluaXRpYWxpemVkLmRlZmF1bHRzKTtcbiAgICB9KTtcblxuICAgIGZvciAodmFyIG9wdGlvbiBpbiBzb3J0YWJsZS5vcHRpb25zKSB7XG4gICAgICBpZiAoIXNvcnRhYmxlLm9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uKSkgY29udGludWU7XG4gICAgICB2YXIgbW9kaWZpZWQgPSB0aGlzLm1vZGlmeU9wdGlvbihzb3J0YWJsZSwgb3B0aW9uLCBzb3J0YWJsZS5vcHRpb25zW29wdGlvbl0pO1xuXG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzb3J0YWJsZS5vcHRpb25zW29wdGlvbl0gPSBtb2RpZmllZDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGdldEV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZ2V0RXZlbnRQcm9wZXJ0aWVzKG5hbWUsIHNvcnRhYmxlKSB7XG4gICAgdmFyIGV2ZW50UHJvcGVydGllcyA9IHt9O1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbi5ldmVudFByb3BlcnRpZXMgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgICAgX2V4dGVuZHMoZXZlbnRQcm9wZXJ0aWVzLCBwbHVnaW4uZXZlbnRQcm9wZXJ0aWVzLmNhbGwoc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdLCBuYW1lKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV2ZW50UHJvcGVydGllcztcbiAgfSxcbiAgbW9kaWZ5T3B0aW9uOiBmdW5jdGlvbiBtb2RpZnlPcHRpb24oc29ydGFibGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG1vZGlmaWVkVmFsdWU7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIC8vIFBsdWdpbiBtdXN0IGV4aXN0IG9uIHRoZSBTb3J0YWJsZVxuICAgICAgaWYgKCFzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0pIHJldHVybjsgLy8gSWYgc3RhdGljIG9wdGlvbiBsaXN0ZW5lciBleGlzdHMgZm9yIHRoaXMgb3B0aW9uLCBjYWxsIGluIHRoZSBjb250ZXh0IG9mIHRoZSBTb3J0YWJsZSdzIGluc3RhbmNlIG9mIHRoaXMgcGx1Z2luXG5cbiAgICAgIGlmIChwbHVnaW4ub3B0aW9uTGlzdGVuZXJzICYmIHR5cGVvZiBwbHVnaW4ub3B0aW9uTGlzdGVuZXJzW25hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG1vZGlmaWVkVmFsdWUgPSBwbHVnaW4ub3B0aW9uTGlzdGVuZXJzW25hbWVdLmNhbGwoc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vZGlmaWVkVmFsdWU7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoX3JlZikge1xuICB2YXIgc29ydGFibGUgPSBfcmVmLnNvcnRhYmxlLFxuICAgICAgcm9vdEVsID0gX3JlZi5yb290RWwsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgdGFyZ2V0RWwgPSBfcmVmLnRhcmdldEVsLFxuICAgICAgY2xvbmVFbCA9IF9yZWYuY2xvbmVFbCxcbiAgICAgIHRvRWwgPSBfcmVmLnRvRWwsXG4gICAgICBmcm9tRWwgPSBfcmVmLmZyb21FbCxcbiAgICAgIG9sZEluZGV4ID0gX3JlZi5vbGRJbmRleCxcbiAgICAgIG5ld0luZGV4ID0gX3JlZi5uZXdJbmRleCxcbiAgICAgIG9sZERyYWdnYWJsZUluZGV4ID0gX3JlZi5vbGREcmFnZ2FibGVJbmRleCxcbiAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gX3JlZi5uZXdEcmFnZ2FibGVJbmRleCxcbiAgICAgIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsXG4gICAgICBwdXRTb3J0YWJsZSA9IF9yZWYucHV0U29ydGFibGUsXG4gICAgICBleHRyYUV2ZW50UHJvcGVydGllcyA9IF9yZWYuZXh0cmFFdmVudFByb3BlcnRpZXM7XG4gIHNvcnRhYmxlID0gc29ydGFibGUgfHwgcm9vdEVsICYmIHJvb3RFbFtleHBhbmRvXTtcbiAgaWYgKCFzb3J0YWJsZSkgcmV0dXJuO1xuICB2YXIgZXZ0LFxuICAgICAgb3B0aW9ucyA9IHNvcnRhYmxlLm9wdGlvbnMsXG4gICAgICBvbk5hbWUgPSAnb24nICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpOyAvLyBTdXBwb3J0IGZvciBuZXcgQ3VzdG9tRXZlbnQgZmVhdHVyZVxuXG4gIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQgJiYgIUlFMTFPckxlc3MgJiYgIUVkZ2UpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZSwge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KG5hbWUsIHRydWUsIHRydWUpO1xuICB9XG5cbiAgZXZ0LnRvID0gdG9FbCB8fCByb290RWw7XG4gIGV2dC5mcm9tID0gZnJvbUVsIHx8IHJvb3RFbDtcbiAgZXZ0Lml0ZW0gPSB0YXJnZXRFbCB8fCByb290RWw7XG4gIGV2dC5jbG9uZSA9IGNsb25lRWw7XG4gIGV2dC5vbGRJbmRleCA9IG9sZEluZGV4O1xuICBldnQubmV3SW5kZXggPSBuZXdJbmRleDtcbiAgZXZ0Lm9sZERyYWdnYWJsZUluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7XG4gIGV2dC5uZXdEcmFnZ2FibGVJbmRleCA9IG5ld0RyYWdnYWJsZUluZGV4O1xuICBldnQub3JpZ2luYWxFdmVudCA9IG9yaWdpbmFsRXZlbnQ7XG4gIGV2dC5wdWxsTW9kZSA9IHB1dFNvcnRhYmxlID8gcHV0U29ydGFibGUubGFzdFB1dE1vZGUgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIGFsbEV2ZW50UHJvcGVydGllcyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBleHRyYUV2ZW50UHJvcGVydGllcyksIFBsdWdpbk1hbmFnZXIuZ2V0RXZlbnRQcm9wZXJ0aWVzKG5hbWUsIHNvcnRhYmxlKSk7XG5cbiAgZm9yICh2YXIgb3B0aW9uIGluIGFsbEV2ZW50UHJvcGVydGllcykge1xuICAgIGV2dFtvcHRpb25dID0gYWxsRXZlbnRQcm9wZXJ0aWVzW29wdGlvbl07XG4gIH1cblxuICBpZiAocm9vdEVsKSB7XG4gICAgcm9vdEVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zW29uTmFtZV0pIHtcbiAgICBvcHRpb25zW29uTmFtZV0uY2FsbChzb3J0YWJsZSwgZXZ0KTtcbiAgfVxufVxuXG52YXIgX2V4Y2x1ZGVkID0gW1wiZXZ0XCJdO1xuXG52YXIgcGx1Z2luRXZlbnQgPSBmdW5jdGlvbiBwbHVnaW5FdmVudChldmVudE5hbWUsIHNvcnRhYmxlKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICAgIG9yaWdpbmFsRXZlbnQgPSBfcmVmLmV2dCxcbiAgICAgIGRhdGEgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICBQbHVnaW5NYW5hZ2VyLnBsdWdpbkV2ZW50LmJpbmQoU29ydGFibGUpKGV2ZW50TmFtZSwgc29ydGFibGUsIF9vYmplY3RTcHJlYWQyKHtcbiAgICBkcmFnRWw6IGRyYWdFbCxcbiAgICBwYXJlbnRFbDogcGFyZW50RWwsXG4gICAgZ2hvc3RFbDogZ2hvc3RFbCxcbiAgICByb290RWw6IHJvb3RFbCxcbiAgICBuZXh0RWw6IG5leHRFbCxcbiAgICBsYXN0RG93bkVsOiBsYXN0RG93bkVsLFxuICAgIGNsb25lRWw6IGNsb25lRWwsXG4gICAgY2xvbmVIaWRkZW46IGNsb25lSGlkZGVuLFxuICAgIGRyYWdTdGFydGVkOiBtb3ZlZCxcbiAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGUsXG4gICAgYWN0aXZlU29ydGFibGU6IFNvcnRhYmxlLmFjdGl2ZSxcbiAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50LFxuICAgIG9sZEluZGV4OiBvbGRJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleDogb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3SW5kZXg6IG5ld0luZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICBoaWRlR2hvc3RGb3JUYXJnZXQ6IF9oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgdW5oaWRlR2hvc3RGb3JUYXJnZXQ6IF91bmhpZGVHaG9zdEZvclRhcmdldCxcbiAgICBjbG9uZU5vd0hpZGRlbjogZnVuY3Rpb24gY2xvbmVOb3dIaWRkZW4oKSB7XG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfSxcbiAgICBjbG9uZU5vd1Nob3duOiBmdW5jdGlvbiBjbG9uZU5vd1Nob3duKCkge1xuICAgICAgY2xvbmVIaWRkZW4gPSBmYWxzZTtcbiAgICB9LFxuICAgIGRpc3BhdGNoU29ydGFibGVFdmVudDogZnVuY3Rpb24gZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KG5hbWUpIHtcbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIGRhdGEpKTtcbn07XG5cbmZ1bmN0aW9uIF9kaXNwYXRjaEV2ZW50KGluZm8pIHtcbiAgZGlzcGF0Y2hFdmVudChfb2JqZWN0U3ByZWFkMih7XG4gICAgcHV0U29ydGFibGU6IHB1dFNvcnRhYmxlLFxuICAgIGNsb25lRWw6IGNsb25lRWwsXG4gICAgdGFyZ2V0RWw6IGRyYWdFbCxcbiAgICByb290RWw6IHJvb3RFbCxcbiAgICBvbGRJbmRleDogb2xkSW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXg6IG9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0luZGV4OiBuZXdJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXhcbiAgfSwgaW5mbykpO1xufVxuXG52YXIgZHJhZ0VsLFxuICAgIHBhcmVudEVsLFxuICAgIGdob3N0RWwsXG4gICAgcm9vdEVsLFxuICAgIG5leHRFbCxcbiAgICBsYXN0RG93bkVsLFxuICAgIGNsb25lRWwsXG4gICAgY2xvbmVIaWRkZW4sXG4gICAgb2xkSW5kZXgsXG4gICAgbmV3SW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgYWN0aXZlR3JvdXAsXG4gICAgcHV0U29ydGFibGUsXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlLFxuICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlLFxuICAgIHNvcnRhYmxlcyA9IFtdLFxuICAgIHRhcEV2dCxcbiAgICB0b3VjaEV2dCxcbiAgICBsYXN0RHgsXG4gICAgbGFzdER5LFxuICAgIHRhcERpc3RhbmNlTGVmdCxcbiAgICB0YXBEaXN0YW5jZVRvcCxcbiAgICBtb3ZlZCxcbiAgICBsYXN0VGFyZ2V0LFxuICAgIGxhc3REaXJlY3Rpb24sXG4gICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2UsXG4gICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9IGZhbHNlLFxuICAgIHRhcmdldE1vdmVEaXN0YW5jZSxcbiAgICAvLyBGb3IgcG9zaXRpb25pbmcgZ2hvc3QgYWJzb2x1dGVseVxuZ2hvc3RSZWxhdGl2ZVBhcmVudCxcbiAgICBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCA9IFtdLFxuICAgIC8vIChsZWZ0LCB0b3ApXG5fc2lsZW50ID0gZmFsc2UsXG4gICAgc2F2ZWRJbnB1dENoZWNrZWQgPSBbXTtcbi8qKiBAY29uc3QgKi9cblxudmFyIGRvY3VtZW50RXhpc3RzID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyxcbiAgICBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA9IElPUyxcbiAgICBDU1NGbG9hdFByb3BlcnR5ID0gRWRnZSB8fCBJRTExT3JMZXNzID8gJ2Nzc0Zsb2F0JyA6ICdmbG9hdCcsXG4gICAgLy8gVGhpcyB3aWxsIG5vdCBwYXNzIGZvciBJRTksIGJlY2F1c2UgSUU5IERuRCBvbmx5IHdvcmtzIG9uIGFuY2hvcnNcbnN1cHBvcnREcmFnZ2FibGUgPSBkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCAmJiAhSU9TICYmICdkcmFnZ2FibGUnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgIHN1cHBvcnRDc3NQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWRvY3VtZW50RXhpc3RzKSByZXR1cm47IC8vIGZhbHNlIHdoZW4gPD0gSUUxMVxuXG4gIGlmIChJRTExT3JMZXNzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgneCcpO1xuICBlbC5zdHlsZS5jc3NUZXh0ID0gJ3BvaW50ZXItZXZlbnRzOmF1dG8nO1xuICByZXR1cm4gZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9PT0gJ2F1dG8nO1xufSgpLFxuICAgIF9kZXRlY3REaXJlY3Rpb24gPSBmdW5jdGlvbiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCBvcHRpb25zKSB7XG4gIHZhciBlbENTUyA9IGNzcyhlbCksXG4gICAgICBlbFdpZHRoID0gcGFyc2VJbnQoZWxDU1Mud2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ0xlZnQpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ1JpZ2h0KSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlckxlZnRXaWR0aCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICAgIGNoaWxkMSA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zKSxcbiAgICAgIGNoaWxkMiA9IGdldENoaWxkKGVsLCAxLCBvcHRpb25zKSxcbiAgICAgIGZpcnN0Q2hpbGRDU1MgPSBjaGlsZDEgJiYgY3NzKGNoaWxkMSksXG4gICAgICBzZWNvbmRDaGlsZENTUyA9IGNoaWxkMiAmJiBjc3MoY2hpbGQyKSxcbiAgICAgIGZpcnN0Q2hpbGRXaWR0aCA9IGZpcnN0Q2hpbGRDU1MgJiYgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KGZpcnN0Q2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDEpLndpZHRoLFxuICAgICAgc2Vjb25kQ2hpbGRXaWR0aCA9IHNlY29uZENoaWxkQ1NTICYmIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDIpLndpZHRoO1xuXG4gIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZmxleCcpIHtcbiAgICByZXR1cm4gZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbicgfHwgZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbi1yZXZlcnNlJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoZWxDU1MuZGlzcGxheSA9PT0gJ2dyaWQnKSB7XG4gICAgcmV0dXJuIGVsQ1NTLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoJyAnKS5sZW5ndGggPD0gMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoY2hpbGQxICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAmJiBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gIT09ICdub25lJykge1xuICAgIHZhciB0b3VjaGluZ1NpZGVDaGlsZDIgPSBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gPT09ICdsZWZ0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgcmV0dXJuIGNoaWxkMiAmJiAoc2Vjb25kQ2hpbGRDU1MuY2xlYXIgPT09ICdib3RoJyB8fCBzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gdG91Y2hpbmdTaWRlQ2hpbGQyKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICByZXR1cm4gY2hpbGQxICYmIChmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdibG9jaycgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZmxleCcgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAndGFibGUnIHx8IGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2dyaWQnIHx8IGZpcnN0Q2hpbGRXaWR0aCA+PSBlbFdpZHRoICYmIGVsQ1NTW0NTU0Zsb2F0UHJvcGVydHldID09PSAnbm9uZScgfHwgY2hpbGQyICYmIGVsQ1NTW0NTU0Zsb2F0UHJvcGVydHldID09PSAnbm9uZScgJiYgZmlyc3RDaGlsZFdpZHRoICsgc2Vjb25kQ2hpbGRXaWR0aCA+IGVsV2lkdGgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbn0sXG4gICAgX2RyYWdFbEluUm93Q29sdW1uID0gZnVuY3Rpb24gX2RyYWdFbEluUm93Q29sdW1uKGRyYWdSZWN0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCkge1xuICB2YXIgZHJhZ0VsUzFPcHAgPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LmxlZnQgOiBkcmFnUmVjdC50b3AsXG4gICAgICBkcmFnRWxTMk9wcCA9IHZlcnRpY2FsID8gZHJhZ1JlY3QucmlnaHQgOiBkcmFnUmVjdC5ib3R0b20sXG4gICAgICBkcmFnRWxPcHBMZW5ndGggPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LndpZHRoIDogZHJhZ1JlY3QuaGVpZ2h0LFxuICAgICAgdGFyZ2V0UzFPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QubGVmdCA6IHRhcmdldFJlY3QudG9wLFxuICAgICAgdGFyZ2V0UzJPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QucmlnaHQgOiB0YXJnZXRSZWN0LmJvdHRvbSxcbiAgICAgIHRhcmdldE9wcExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC53aWR0aCA6IHRhcmdldFJlY3QuaGVpZ2h0O1xuICByZXR1cm4gZHJhZ0VsUzFPcHAgPT09IHRhcmdldFMxT3BwIHx8IGRyYWdFbFMyT3BwID09PSB0YXJnZXRTMk9wcCB8fCBkcmFnRWxTMU9wcCArIGRyYWdFbE9wcExlbmd0aCAvIDIgPT09IHRhcmdldFMxT3BwICsgdGFyZ2V0T3BwTGVuZ3RoIC8gMjtcbn0sXG5cbi8qKlxuICogRGV0ZWN0cyBmaXJzdCBuZWFyZXN0IGVtcHR5IHNvcnRhYmxlIHRvIFggYW5kIFkgcG9zaXRpb24gdXNpbmcgZW1wdHlJbnNlcnRUaHJlc2hvbGQuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggICAgICBYIHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkgICAgICBZIHBvc2l0aW9uXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICBFbGVtZW50IG9mIHRoZSBmaXJzdCBmb3VuZCBuZWFyZXN0IFNvcnRhYmxlXG4gKi9cbl9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSA9IGZ1bmN0aW9uIF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSh4LCB5KSB7XG4gIHZhciByZXQ7XG4gIHNvcnRhYmxlcy5zb21lKGZ1bmN0aW9uIChzb3J0YWJsZSkge1xuICAgIHZhciB0aHJlc2hvbGQgPSBzb3J0YWJsZVtleHBhbmRvXS5vcHRpb25zLmVtcHR5SW5zZXJ0VGhyZXNob2xkO1xuICAgIGlmICghdGhyZXNob2xkIHx8IGxhc3RDaGlsZChzb3J0YWJsZSkpIHJldHVybjtcbiAgICB2YXIgcmVjdCA9IGdldFJlY3Qoc29ydGFibGUpLFxuICAgICAgICBpbnNpZGVIb3Jpem9udGFsbHkgPSB4ID49IHJlY3QubGVmdCAtIHRocmVzaG9sZCAmJiB4IDw9IHJlY3QucmlnaHQgKyB0aHJlc2hvbGQsXG4gICAgICAgIGluc2lkZVZlcnRpY2FsbHkgPSB5ID49IHJlY3QudG9wIC0gdGhyZXNob2xkICYmIHkgPD0gcmVjdC5ib3R0b20gKyB0aHJlc2hvbGQ7XG5cbiAgICBpZiAoaW5zaWRlSG9yaXpvbnRhbGx5ICYmIGluc2lkZVZlcnRpY2FsbHkpIHtcbiAgICAgIHJldHVybiByZXQgPSBzb3J0YWJsZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufSxcbiAgICBfcHJlcGFyZUdyb3VwID0gZnVuY3Rpb24gX3ByZXBhcmVHcm91cChvcHRpb25zKSB7XG4gIGZ1bmN0aW9uIHRvRm4odmFsdWUsIHB1bGwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCkge1xuICAgICAgdmFyIHNhbWVHcm91cCA9IHRvLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiB0by5vcHRpb25zLmdyb3VwLm5hbWUgPT09IGZyb20ub3B0aW9ucy5ncm91cC5uYW1lO1xuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAocHVsbCB8fCBzYW1lR3JvdXApKSB7XG4gICAgICAgIC8vIERlZmF1bHQgcHVsbCB2YWx1ZVxuICAgICAgICAvLyBEZWZhdWx0IHB1bGwgYW5kIHB1dCB2YWx1ZSBpZiBzYW1lIGdyb3VwXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHB1bGwgJiYgdmFsdWUgPT09ICdjbG9uZScpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRvRm4odmFsdWUodG8sIGZyb20sIGRyYWdFbCwgZXZ0KSwgcHVsbCkodG8sIGZyb20sIGRyYWdFbCwgZXZ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvdGhlckdyb3VwID0gKHB1bGwgPyB0byA6IGZyb20pLm9wdGlvbnMuZ3JvdXAubmFtZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09IG90aGVyR3JvdXAgfHwgdmFsdWUuam9pbiAmJiB2YWx1ZS5pbmRleE9mKG90aGVyR3JvdXApID4gLTE7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBncm91cCA9IHt9O1xuICB2YXIgb3JpZ2luYWxHcm91cCA9IG9wdGlvbnMuZ3JvdXA7XG5cbiAgaWYgKCFvcmlnaW5hbEdyb3VwIHx8IF90eXBlb2Yob3JpZ2luYWxHcm91cCkgIT0gJ29iamVjdCcpIHtcbiAgICBvcmlnaW5hbEdyb3VwID0ge1xuICAgICAgbmFtZTogb3JpZ2luYWxHcm91cFxuICAgIH07XG4gIH1cblxuICBncm91cC5uYW1lID0gb3JpZ2luYWxHcm91cC5uYW1lO1xuICBncm91cC5jaGVja1B1bGwgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHVsbCwgdHJ1ZSk7XG4gIGdyb3VwLmNoZWNrUHV0ID0gdG9GbihvcmlnaW5hbEdyb3VwLnB1dCk7XG4gIGdyb3VwLnJldmVydENsb25lID0gb3JpZ2luYWxHcm91cC5yZXZlcnRDbG9uZTtcbiAgb3B0aW9ucy5ncm91cCA9IGdyb3VwO1xufSxcbiAgICBfaGlkZUdob3N0Rm9yVGFyZ2V0ID0gZnVuY3Rpb24gX2hpZGVHaG9zdEZvclRhcmdldCgpIHtcbiAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7XG4gICAgY3NzKGdob3N0RWwsICdkaXNwbGF5JywgJ25vbmUnKTtcbiAgfVxufSxcbiAgICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKSB7XG4gIGlmICghc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgJiYgZ2hvc3RFbCkge1xuICAgIGNzcyhnaG9zdEVsLCAnZGlzcGxheScsICcnKTtcbiAgfVxufTsgLy8gIzExODQgZml4IC0gUHJldmVudCBjbGljayBldmVudCBvbiBmYWxsYmFjayBpZiBkcmFnZ2VkIGJ1dCBpdGVtIG5vdCBjaGFuZ2VkIHBvc2l0aW9uXG5cblxuaWYgKGRvY3VtZW50RXhpc3RzKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGlmIChpZ25vcmVOZXh0Q2xpY2spIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbiAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICYmIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5cbnZhciBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCA9IGZ1bmN0aW9uIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZXZ0ID0gZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dDtcblxuICAgIHZhciBuZWFyZXN0ID0gX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG5cbiAgICBpZiAobmVhcmVzdCkge1xuICAgICAgLy8gQ3JlYXRlIGltaXRhdGlvbiBldmVudFxuICAgICAgdmFyIGV2ZW50ID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgaW4gZXZ0KSB7XG4gICAgICAgIGlmIChldnQuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBldmVudFtpXSA9IGV2dFtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBldmVudC50YXJnZXQgPSBldmVudC5yb290RWwgPSBuZWFyZXN0O1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB2b2lkIDA7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSB2b2lkIDA7XG5cbiAgICAgIG5lYXJlc3RbZXhwYW5kb10uX29uRHJhZ092ZXIoZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIF9jaGVja091dHNpZGVUYXJnZXRFbCA9IGZ1bmN0aW9uIF9jaGVja091dHNpZGVUYXJnZXRFbChldnQpIHtcbiAgaWYgKGRyYWdFbCkge1xuICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwoZXZ0LnRhcmdldCk7XG4gIH1cbn07XG4vKipcbiAqIEBjbGFzcyAgU29ydGFibGVcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWxcbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgW29wdGlvbnNdXG4gKi9cblxuXG5mdW5jdGlvbiBTb3J0YWJsZShlbCwgb3B0aW9ucykge1xuICBpZiAoIShlbCAmJiBlbC5ub2RlVHlwZSAmJiBlbC5ub2RlVHlwZSA9PT0gMSkpIHtcbiAgICB0aHJvdyBcIlNvcnRhYmxlOiBgZWxgIG11c3QgYmUgYW4gSFRNTEVsZW1lbnQsIG5vdCBcIi5jb25jYXQoe30udG9TdHJpbmcuY2FsbChlbCkpO1xuICB9XG5cbiAgdGhpcy5lbCA9IGVsOyAvLyByb290IGVsZW1lbnRcblxuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMpOyAvLyBFeHBvcnQgaW5zdGFuY2VcblxuICBlbFtleHBhbmRvXSA9IHRoaXM7XG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBncm91cDogbnVsbCxcbiAgICBzb3J0OiB0cnVlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzdG9yZTogbnVsbCxcbiAgICBoYW5kbGU6IG51bGwsXG4gICAgZHJhZ2dhYmxlOiAvXlt1b11sJC9pLnRlc3QoZWwubm9kZU5hbWUpID8gJz5saScgOiAnPionLFxuICAgIHN3YXBUaHJlc2hvbGQ6IDEsXG4gICAgLy8gcGVyY2VudGFnZTsgMCA8PSB4IDw9IDFcbiAgICBpbnZlcnRTd2FwOiBmYWxzZSxcbiAgICAvLyBpbnZlcnQgYWx3YXlzXG4gICAgaW52ZXJ0ZWRTd2FwVGhyZXNob2xkOiBudWxsLFxuICAgIC8vIHdpbGwgYmUgc2V0IHRvIHNhbWUgYXMgc3dhcFRocmVzaG9sZCBpZiBkZWZhdWx0XG4gICAgcmVtb3ZlQ2xvbmVPbkhpZGU6IHRydWUsXG4gICAgZGlyZWN0aW9uOiBmdW5jdGlvbiBkaXJlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gX2RldGVjdERpcmVjdGlvbihlbCwgdGhpcy5vcHRpb25zKTtcbiAgICB9LFxuICAgIGdob3N0Q2xhc3M6ICdzb3J0YWJsZS1naG9zdCcsXG4gICAgY2hvc2VuQ2xhc3M6ICdzb3J0YWJsZS1jaG9zZW4nLFxuICAgIGRyYWdDbGFzczogJ3NvcnRhYmxlLWRyYWcnLFxuICAgIGlnbm9yZTogJ2EsIGltZycsXG4gICAgZmlsdGVyOiBudWxsLFxuICAgIHByZXZlbnRPbkZpbHRlcjogdHJ1ZSxcbiAgICBhbmltYXRpb246IDAsXG4gICAgZWFzaW5nOiBudWxsLFxuICAgIHNldERhdGE6IGZ1bmN0aW9uIHNldERhdGEoZGF0YVRyYW5zZmVyLCBkcmFnRWwpIHtcbiAgICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKCdUZXh0JywgZHJhZ0VsLnRleHRDb250ZW50KTtcbiAgICB9LFxuICAgIGRyb3BCdWJibGU6IGZhbHNlLFxuICAgIGRyYWdvdmVyQnViYmxlOiBmYWxzZSxcbiAgICBkYXRhSWRBdHRyOiAnZGF0YS1pZCcsXG4gICAgZGVsYXk6IDAsXG4gICAgZGVsYXlPblRvdWNoT25seTogZmFsc2UsXG4gICAgdG91Y2hTdGFydFRocmVzaG9sZDogKE51bWJlci5wYXJzZUludCA/IE51bWJlciA6IHdpbmRvdykucGFyc2VJbnQod2luZG93LmRldmljZVBpeGVsUmF0aW8sIDEwKSB8fCAxLFxuICAgIGZvcmNlRmFsbGJhY2s6IGZhbHNlLFxuICAgIGZhbGxiYWNrQ2xhc3M6ICdzb3J0YWJsZS1mYWxsYmFjaycsXG4gICAgZmFsbGJhY2tPbkJvZHk6IGZhbHNlLFxuICAgIGZhbGxiYWNrVG9sZXJhbmNlOiAwLFxuICAgIGZhbGxiYWNrT2Zmc2V0OiB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH0sXG4gICAgc3VwcG9ydFBvaW50ZXI6IFNvcnRhYmxlLnN1cHBvcnRQb2ludGVyICE9PSBmYWxzZSAmJiAnUG9pbnRlckV2ZW50JyBpbiB3aW5kb3cgJiYgIVNhZmFyaSxcbiAgICBlbXB0eUluc2VydFRocmVzaG9sZDogNVxuICB9O1xuICBQbHVnaW5NYW5hZ2VyLmluaXRpYWxpemVQbHVnaW5zKHRoaXMsIGVsLCBkZWZhdWx0cyk7IC8vIFNldCBkZWZhdWx0IG9wdGlvbnNcblxuICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7XG4gICAgIShuYW1lIGluIG9wdGlvbnMpICYmIChvcHRpb25zW25hbWVdID0gZGVmYXVsdHNbbmFtZV0pO1xuICB9XG5cbiAgX3ByZXBhcmVHcm91cChvcHRpb25zKTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cblxuICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgfSAvLyBTZXR1cCBkcmFnIG1vZGVcblxuXG4gIHRoaXMubmF0aXZlRHJhZ2dhYmxlID0gb3B0aW9ucy5mb3JjZUZhbGxiYWNrID8gZmFsc2UgOiBzdXBwb3J0RHJhZ2dhYmxlO1xuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIC8vIFRvdWNoIHN0YXJ0IHRocmVzaG9sZCBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBuYXRpdmUgZHJhZ3N0YXJ0IHRocmVzaG9sZFxuICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gMTtcbiAgfSAvLyBCaW5kIGV2ZW50c1xuXG5cbiAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICBvbihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgb24oZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvbihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfVxuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIG9uKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcbiAgICBvbihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuICB9XG5cbiAgc29ydGFibGVzLnB1c2godGhpcy5lbCk7IC8vIFJlc3RvcmUgc29ydGluZ1xuXG4gIG9wdGlvbnMuc3RvcmUgJiYgb3B0aW9ucy5zdG9yZS5nZXQgJiYgdGhpcy5zb3J0KG9wdGlvbnMuc3RvcmUuZ2V0KHRoaXMpIHx8IFtdKTsgLy8gQWRkIGFuaW1hdGlvbiBzdGF0ZSBtYW5hZ2VyXG5cbiAgX2V4dGVuZHModGhpcywgQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkpO1xufVxuXG5Tb3J0YWJsZS5wcm90b3R5cGUgPVxuLyoqIEBsZW5kcyBTb3J0YWJsZS5wcm90b3R5cGUgKi9cbntcbiAgY29uc3RydWN0b3I6IFNvcnRhYmxlLFxuICBfaXNPdXRzaWRlVGhpc0VsOiBmdW5jdGlvbiBfaXNPdXRzaWRlVGhpc0VsKHRhcmdldCkge1xuICAgIGlmICghdGhpcy5lbC5jb250YWlucyh0YXJnZXQpICYmIHRhcmdldCAhPT0gdGhpcy5lbCkge1xuICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgfVxuICB9LFxuICBfZ2V0RGlyZWN0aW9uOiBmdW5jdGlvbiBfZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCBkcmFnRWwpIDogdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgfSxcbiAgX29uVGFwU3RhcnQ6IGZ1bmN0aW9uIF9vblRhcFN0YXJ0KFxuICAvKiogRXZlbnR8VG91Y2hFdmVudCAqL1xuICBldnQpIHtcbiAgICBpZiAoIWV2dC5jYW5jZWxhYmxlKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBlbCA9IHRoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHByZXZlbnRPbkZpbHRlciA9IG9wdGlvbnMucHJldmVudE9uRmlsdGVyLFxuICAgICAgICB0eXBlID0gZXZ0LnR5cGUsXG4gICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXMgJiYgZXZ0LnRvdWNoZXNbMF0gfHwgZXZ0LnBvaW50ZXJUeXBlICYmIGV2dC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyAmJiBldnQsXG4gICAgICAgIHRhcmdldCA9ICh0b3VjaCB8fCBldnQpLnRhcmdldCxcbiAgICAgICAgb3JpZ2luYWxUYXJnZXQgPSBldnQudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgKGV2dC5wYXRoICYmIGV2dC5wYXRoWzBdIHx8IGV2dC5jb21wb3NlZFBhdGggJiYgZXZ0LmNvbXBvc2VkUGF0aCgpWzBdKSB8fCB0YXJnZXQsXG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuXG4gICAgX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShlbCk7IC8vIERvbid0IHRyaWdnZXIgc3RhcnQgZXZlbnQgd2hlbiBhbiBlbGVtZW50IGlzIGJlZW4gZHJhZ2dlZCwgb3RoZXJ3aXNlIHRoZSBldnQub2xkaW5kZXggYWx3YXlzIHdyb25nIHdoZW4gc2V0IG9wdGlvbi5ncm91cC5cblxuXG4gICAgaWYgKGRyYWdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICgvbW91c2Vkb3dufHBvaW50ZXJkb3duLy50ZXN0KHR5cGUpICYmIGV2dC5idXR0b24gIT09IDAgfHwgb3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuOyAvLyBvbmx5IGxlZnQgYnV0dG9uIGFuZCBlbmFibGVkXG4gICAgfSAvLyBjYW5jZWwgZG5kIGlmIG9yaWdpbmFsIHRhcmdldCBpcyBjb250ZW50IGVkaXRhYmxlXG5cblxuICAgIGlmIChvcmlnaW5hbFRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU2FmYXJpIGlnbm9yZXMgZnVydGhlciBldmVudCBoYW5kbGluZyBhZnRlciBtb3VzZWRvd25cblxuXG4gICAgaWYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSAmJiBTYWZhcmkgJiYgdGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdTRUxFQ1QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gY2xvc2VzdCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgZmFsc2UpO1xuXG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuYW5pbWF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobGFzdERvd25FbCA9PT0gdGFyZ2V0KSB7XG4gICAgICAvLyBJZ25vcmluZyBkdXBsaWNhdGUgYGRvd25gXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcblxuXG4gICAgb2xkSW5kZXggPSBpbmRleCh0YXJnZXQpO1xuICAgIG9sZERyYWdnYWJsZUluZGV4ID0gaW5kZXgodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSk7IC8vIENoZWNrIGZpbHRlclxuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChmaWx0ZXIuY2FsbCh0aGlzLCBldnQsIHRhcmdldCwgdGhpcykpIHtcbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICByb290RWw6IG9yaWdpbmFsVGFyZ2V0LFxuICAgICAgICAgIG5hbWU6ICdmaWx0ZXInLFxuICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXQsXG4gICAgICAgICAgdG9FbDogZWwsXG4gICAgICAgICAgZnJvbUVsOiBlbFxuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW5FdmVudCgnZmlsdGVyJywgX3RoaXMsIHtcbiAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICB9KTtcbiAgICAgICAgcHJldmVudE9uRmlsdGVyICYmIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47IC8vIGNhbmNlbCBkbmRcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZpbHRlcikge1xuICAgICAgZmlsdGVyID0gZmlsdGVyLnNwbGl0KCcsJykuc29tZShmdW5jdGlvbiAoY3JpdGVyaWEpIHtcbiAgICAgICAgY3JpdGVyaWEgPSBjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBjcml0ZXJpYS50cmltKCksIGVsLCBmYWxzZSk7XG5cbiAgICAgICAgaWYgKGNyaXRlcmlhKSB7XG4gICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICAgICAgcm9vdEVsOiBjcml0ZXJpYSxcbiAgICAgICAgICAgIG5hbWU6ICdmaWx0ZXInLFxuICAgICAgICAgICAgdGFyZ2V0RWw6IHRhcmdldCxcbiAgICAgICAgICAgIGZyb21FbDogZWwsXG4gICAgICAgICAgICB0b0VsOiBlbFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICBwcmV2ZW50T25GaWx0ZXIgJiYgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjsgLy8gY2FuY2VsIGRuZFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmhhbmRsZSAmJiAhY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgb3B0aW9ucy5oYW5kbGUsIGVsLCBmYWxzZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFByZXBhcmUgYGRyYWdzdGFydGBcblxuXG4gICAgdGhpcy5fcHJlcGFyZURyYWdTdGFydChldnQsIHRvdWNoLCB0YXJnZXQpO1xuICB9LFxuICBfcHJlcGFyZURyYWdTdGFydDogZnVuY3Rpb24gX3ByZXBhcmVEcmFnU3RhcnQoXG4gIC8qKiBFdmVudCAqL1xuICBldnQsXG4gIC8qKiBUb3VjaCAqL1xuICB0b3VjaCxcbiAgLyoqIEhUTUxFbGVtZW50ICovXG4gIHRhcmdldCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGVsID0gX3RoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSBfdGhpcy5vcHRpb25zLFxuICAgICAgICBvd25lckRvY3VtZW50ID0gZWwub3duZXJEb2N1bWVudCxcbiAgICAgICAgZHJhZ1N0YXJ0Rm47XG5cbiAgICBpZiAodGFyZ2V0ICYmICFkcmFnRWwgJiYgdGFyZ2V0LnBhcmVudE5vZGUgPT09IGVsKSB7XG4gICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICByb290RWwgPSBlbDtcbiAgICAgIGRyYWdFbCA9IHRhcmdldDtcbiAgICAgIHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7XG4gICAgICBuZXh0RWwgPSBkcmFnRWwubmV4dFNpYmxpbmc7XG4gICAgICBsYXN0RG93bkVsID0gdGFyZ2V0O1xuICAgICAgYWN0aXZlR3JvdXAgPSBvcHRpb25zLmdyb3VwO1xuICAgICAgU29ydGFibGUuZHJhZ2dlZCA9IGRyYWdFbDtcbiAgICAgIHRhcEV2dCA9IHtcbiAgICAgICAgdGFyZ2V0OiBkcmFnRWwsXG4gICAgICAgIGNsaWVudFg6ICh0b3VjaCB8fCBldnQpLmNsaWVudFgsXG4gICAgICAgIGNsaWVudFk6ICh0b3VjaCB8fCBldnQpLmNsaWVudFlcbiAgICAgIH07XG4gICAgICB0YXBEaXN0YW5jZUxlZnQgPSB0YXBFdnQuY2xpZW50WCAtIGRyYWdSZWN0LmxlZnQ7XG4gICAgICB0YXBEaXN0YW5jZVRvcCA9IHRhcEV2dC5jbGllbnRZIC0gZHJhZ1JlY3QudG9wO1xuICAgICAgdGhpcy5fbGFzdFggPSAodG91Y2ggfHwgZXZ0KS5jbGllbnRYO1xuICAgICAgdGhpcy5fbGFzdFkgPSAodG91Y2ggfHwgZXZ0KS5jbGllbnRZO1xuICAgICAgZHJhZ0VsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJ2FsbCc7XG5cbiAgICAgIGRyYWdTdGFydEZuID0gZnVuY3Rpb24gZHJhZ1N0YXJ0Rm4oKSB7XG4gICAgICAgIHBsdWdpbkV2ZW50KCdkZWxheUVuZGVkJywgX3RoaXMsIHtcbiAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIF90aGlzLl9vbkRyb3AoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBEZWxheWVkIGRyYWcgaGFzIGJlZW4gdHJpZ2dlcmVkXG4gICAgICAgIC8vIHdlIGNhbiByZS1lbmFibGUgdGhlIGV2ZW50czogdG91Y2htb3ZlL21vdXNlbW92ZVxuXG5cbiAgICAgICAgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuXG4gICAgICAgIGlmICghRmlyZUZveCAmJiBfdGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBkcmFnRWwuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgfSAvLyBCaW5kIHRoZSBldmVudHM6IGRyYWdzdGFydC9kcmFnZW5kXG5cblxuICAgICAgICBfdGhpcy5fdHJpZ2dlckRyYWdTdGFydChldnQsIHRvdWNoKTsgLy8gRHJhZyBzdGFydCBldmVudFxuXG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICBuYW1lOiAnY2hvb3NlJyxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7IC8vIENob3NlbiBpdGVtXG5cblxuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuY2hvc2VuQ2xhc3MsIHRydWUpO1xuICAgICAgfTsgLy8gRGlzYWJsZSBcImRyYWdnYWJsZVwiXG5cblxuICAgICAgb3B0aW9ucy5pZ25vcmUuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uIChjcml0ZXJpYSkge1xuICAgICAgICBmaW5kKGRyYWdFbCwgY3JpdGVyaWEudHJpbSgpLCBfZGlzYWJsZURyYWdnYWJsZSk7XG4gICAgICB9KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdkcmFnb3ZlcicsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7IC8vIE1ha2UgZHJhZ0VsIGRyYWdnYWJsZSAobXVzdCBiZSBiZWZvcmUgZGVsYXkgZm9yIEZpcmVGb3gpXG5cbiAgICAgIGlmIChGaXJlRm94ICYmIHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gNDtcbiAgICAgICAgZHJhZ0VsLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHBsdWdpbkV2ZW50KCdkZWxheVN0YXJ0JywgdGhpcywge1xuICAgICAgICBldnQ6IGV2dFxuICAgICAgfSk7IC8vIERlbGF5IGlzIGltcG9zc2libGUgZm9yIG5hdGl2ZSBEbkQgaW4gRWRnZSBvciBJRVxuXG4gICAgICBpZiAob3B0aW9ucy5kZWxheSAmJiAoIW9wdGlvbnMuZGVsYXlPblRvdWNoT25seSB8fCB0b3VjaCkgJiYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCAhKEVkZ2UgfHwgSUUxMU9yTGVzcykpKSB7XG4gICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgdGhpcy5fb25Ecm9wKCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gSWYgdGhlIHVzZXIgbW92ZXMgdGhlIHBvaW50ZXIgb3IgbGV0IGdvIHRoZSBjbGljayBvciB0b3VjaFxuICAgICAgICAvLyBiZWZvcmUgdGhlIGRlbGF5IGhhcyBiZWVuIHJlYWNoZWQ6XG4gICAgICAgIC8vIGRpc2FibGUgdGhlIGRlbGF5ZWQgZHJhZ1xuXG5cbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX3RoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgb3B0aW9ucy5zdXBwb3J0UG9pbnRlciAmJiBvbihvd25lckRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgX3RoaXMuX2RyYWdTdGFydFRpbWVyID0gc2V0VGltZW91dChkcmFnU3RhcnRGbiwgb3B0aW9ucy5kZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnU3RhcnRGbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcjogZnVuY3Rpb24gX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcihcbiAgLyoqIFRvdWNoRXZlbnR8UG9pbnRlckV2ZW50ICoqL1xuICBlKSB7XG4gICAgdmFyIHRvdWNoID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcblxuICAgIGlmIChNYXRoLm1heChNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gdGhpcy5fbGFzdFgpLCBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5fbGFzdFkpKSA+PSBNYXRoLmZsb29yKHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkIC8gKHRoaXMubmF0aXZlRHJhZ2dhYmxlICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpKSkge1xuICAgICAgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKCk7XG4gICAgfVxuICB9LFxuICBfZGlzYWJsZURlbGF5ZWREcmFnOiBmdW5jdGlvbiBfZGlzYWJsZURlbGF5ZWREcmFnKCkge1xuICAgIGRyYWdFbCAmJiBfZGlzYWJsZURyYWdnYWJsZShkcmFnRWwpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cbiAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcbiAgfSxcbiAgX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50czogZnVuY3Rpb24gX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gIH0sXG4gIF90cmlnZ2VyRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfdHJpZ2dlckRyYWdTdGFydChcbiAgLyoqIEV2ZW50ICovXG4gIGV2dCxcbiAgLyoqIFRvdWNoICovXG4gIHRvdWNoKSB7XG4gICAgdG91Y2ggPSB0b3VjaCB8fCBldnQucG9pbnRlclR5cGUgPT0gJ3RvdWNoJyAmJiBldnQ7XG5cbiAgICBpZiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlIHx8IHRvdWNoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9IGVsc2UgaWYgKHRvdWNoKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uKGRyYWdFbCwgJ2RyYWdlbmQnLCB0aGlzKTtcbiAgICAgIG9uKHJvb3RFbCwgJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgICAgICAvLyBUaW1lb3V0IG5lY2Nlc3NhcnkgZm9yIElFOVxuICAgICAgICBfbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIH0sXG4gIF9kcmFnU3RhcnRlZDogZnVuY3Rpb24gX2RyYWdTdGFydGVkKGZhbGxiYWNrLCBldnQpIHtcblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcblxuICAgIGlmIChyb290RWwgJiYgZHJhZ0VsKSB7XG4gICAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0ZWQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnZHJhZ292ZXInLCBfY2hlY2tPdXRzaWRlVGFyZ2V0RWwpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gQXBwbHkgZWZmZWN0XG5cbiAgICAgICFmYWxsYmFjayAmJiB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCBmYWxzZSk7XG4gICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgdHJ1ZSk7XG4gICAgICBTb3J0YWJsZS5hY3RpdmUgPSB0aGlzO1xuICAgICAgZmFsbGJhY2sgJiYgdGhpcy5fYXBwZW5kR2hvc3QoKTsgLy8gRHJhZyBzdGFydCBldmVudFxuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICBuYW1lOiAnc3RhcnQnLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9udWxsaW5nKCk7XG4gICAgfVxuICB9LFxuICBfZW11bGF0ZURyYWdPdmVyOiBmdW5jdGlvbiBfZW11bGF0ZURyYWdPdmVyKCkge1xuICAgIGlmICh0b3VjaEV2dCkge1xuICAgICAgdGhpcy5fbGFzdFggPSB0b3VjaEV2dC5jbGllbnRYO1xuICAgICAgdGhpcy5fbGFzdFkgPSB0b3VjaEV2dC5jbGllbnRZO1xuXG4gICAgICBfaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG5cbiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpO1xuICAgICAgdmFyIHBhcmVudCA9IHRhcmdldDtcblxuICAgICAgd2hpbGUgKHRhcmdldCAmJiB0YXJnZXQuc2hhZG93Um9vdCkge1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXQuc2hhZG93Um9vdC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpO1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBwYXJlbnQpIGJyZWFrO1xuICAgICAgICBwYXJlbnQgPSB0YXJnZXQ7XG4gICAgICB9XG5cbiAgICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwodGFyZ2V0KTtcblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHBhcmVudFtleHBhbmRvXSkge1xuICAgICAgICAgICAgdmFyIGluc2VydGVkID0gdm9pZCAwO1xuICAgICAgICAgICAgaW5zZXJ0ZWQgPSBwYXJlbnRbZXhwYW5kb10uX29uRHJhZ092ZXIoe1xuICAgICAgICAgICAgICBjbGllbnRYOiB0b3VjaEV2dC5jbGllbnRYLFxuICAgICAgICAgICAgICBjbGllbnRZOiB0b3VjaEV2dC5jbGllbnRZLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoaW5zZXJ0ZWQgJiYgIXRoaXMub3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0YXJnZXQgPSBwYXJlbnQ7IC8vIHN0b3JlIGxhc3QgZWxlbWVudFxuICAgICAgICB9XG4gICAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cbiAgICAgICAgd2hpbGUgKHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlKTtcbiAgICAgIH1cblxuICAgICAgX3VuaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG4gICAgfVxuICB9LFxuICBfb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIF9vblRvdWNoTW92ZShcbiAgLyoqVG91Y2hFdmVudCovXG4gIGV2dCkge1xuICAgIGlmICh0YXBFdnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGZhbGxiYWNrVG9sZXJhbmNlID0gb3B0aW9ucy5mYWxsYmFja1RvbGVyYW5jZSxcbiAgICAgICAgICBmYWxsYmFja09mZnNldCA9IG9wdGlvbnMuZmFsbGJhY2tPZmZzZXQsXG4gICAgICAgICAgdG91Y2ggPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0LFxuICAgICAgICAgIGdob3N0TWF0cml4ID0gZ2hvc3RFbCAmJiBtYXRyaXgoZ2hvc3RFbCwgdHJ1ZSksXG4gICAgICAgICAgc2NhbGVYID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5hLFxuICAgICAgICAgIHNjYWxlWSA9IGdob3N0RWwgJiYgZ2hvc3RNYXRyaXggJiYgZ2hvc3RNYXRyaXguZCxcbiAgICAgICAgICByZWxhdGl2ZVNjcm9sbE9mZnNldCA9IFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgJiYgZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCksXG4gICAgICAgICAgZHggPSAodG91Y2guY2xpZW50WCAtIHRhcEV2dC5jbGllbnRYICsgZmFsbGJhY2tPZmZzZXQueCkgLyAoc2NhbGVYIHx8IDEpICsgKHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID8gcmVsYXRpdmVTY3JvbGxPZmZzZXRbMF0gLSBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbFswXSA6IDApIC8gKHNjYWxlWCB8fCAxKSxcbiAgICAgICAgICBkeSA9ICh0b3VjaC5jbGllbnRZIC0gdGFwRXZ0LmNsaWVudFkgKyBmYWxsYmFja09mZnNldC55KSAvIChzY2FsZVkgfHwgMSkgKyAocmVsYXRpdmVTY3JvbGxPZmZzZXQgPyByZWxhdGl2ZVNjcm9sbE9mZnNldFsxXSAtIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsWzFdIDogMCkgLyAoc2NhbGVZIHx8IDEpOyAvLyBvbmx5IHNldCB0aGUgc3RhdHVzIHRvIGRyYWdnaW5nLCB3aGVuIHdlIGFyZSBhY3R1YWxseSBkcmFnZ2luZ1xuXG4gICAgICBpZiAoIVNvcnRhYmxlLmFjdGl2ZSAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkge1xuICAgICAgICBpZiAoZmFsbGJhY2tUb2xlcmFuY2UgJiYgTWF0aC5tYXgoTWF0aC5hYnModG91Y2guY2xpZW50WCAtIHRoaXMuX2xhc3RYKSwgTWF0aC5hYnModG91Y2guY2xpZW50WSAtIHRoaXMuX2xhc3RZKSkgPCBmYWxsYmFja1RvbGVyYW5jZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29uRHJhZ1N0YXJ0KGV2dCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnaG9zdEVsKSB7XG4gICAgICAgIGlmIChnaG9zdE1hdHJpeCkge1xuICAgICAgICAgIGdob3N0TWF0cml4LmUgKz0gZHggLSAobGFzdER4IHx8IDApO1xuICAgICAgICAgIGdob3N0TWF0cml4LmYgKz0gZHkgLSAobGFzdER5IHx8IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdob3N0TWF0cml4ID0ge1xuICAgICAgICAgICAgYTogMSxcbiAgICAgICAgICAgIGI6IDAsXG4gICAgICAgICAgICBjOiAwLFxuICAgICAgICAgICAgZDogMSxcbiAgICAgICAgICAgIGU6IGR4LFxuICAgICAgICAgICAgZjogZHlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNzc01hdHJpeCA9IFwibWF0cml4KFwiLmNvbmNhdChnaG9zdE1hdHJpeC5hLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmIsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguYywgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5kLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmUsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZiwgXCIpXCIpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ3dlYmtpdFRyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnbW96VHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICdtc1RyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgbGFzdER4ID0gZHg7XG4gICAgICAgIGxhc3REeSA9IGR5O1xuICAgICAgICB0b3VjaEV2dCA9IHRvdWNoO1xuICAgICAgfVxuXG4gICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sXG4gIF9hcHBlbmRHaG9zdDogZnVuY3Rpb24gX2FwcGVuZEdob3N0KCkge1xuICAgIC8vIEJ1ZyBpZiB1c2luZyBzY2FsZSgpOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNjM3MDU4XG4gICAgLy8gTm90IGJlaW5nIGFkanVzdGVkIGZvclxuICAgIGlmICghZ2hvc3RFbCkge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5mYWxsYmFja09uQm9keSA/IGRvY3VtZW50LmJvZHkgOiByb290RWwsXG4gICAgICAgICAgcmVjdCA9IGdldFJlY3QoZHJhZ0VsLCB0cnVlLCBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSwgdHJ1ZSwgY29udGFpbmVyKSxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBQb3NpdGlvbiBhYnNvbHV0ZWx5XG5cbiAgICAgIGlmIChQb3NpdGlvbkdob3N0QWJzb2x1dGVseSkge1xuICAgICAgICAvLyBHZXQgcmVsYXRpdmVseSBwb3NpdGlvbmVkIHBhcmVudFxuICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gY29udGFpbmVyO1xuXG4gICAgICAgIHdoaWxlIChjc3MoZ2hvc3RSZWxhdGl2ZVBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnICYmIGNzcyhnaG9zdFJlbGF0aXZlUGFyZW50LCAndHJhbnNmb3JtJykgPT09ICdub25lJyAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudCkge1xuICAgICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnaG9zdFJlbGF0aXZlUGFyZW50LnBhcmVudE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCA9PT0gZG9jdW1lbnQpIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgICAgcmVjdC50b3AgKz0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgcmVjdC5sZWZ0ICs9IGdob3N0UmVsYXRpdmVQYXJlbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwgPSBnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldChnaG9zdFJlbGF0aXZlUGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgZ2hvc3RFbCA9IGRyYWdFbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICB0b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmdob3N0Q2xhc3MsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZmFsbGJhY2tDbGFzcywgdHJ1ZSk7XG4gICAgICB0b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zaXRpb24nLCAnJyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnYm94LXNpemluZycsICdib3JkZXItYm94Jyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ21hcmdpbicsIDApO1xuICAgICAgY3NzKGdob3N0RWwsICd0b3AnLCByZWN0LnRvcCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2xlZnQnLCByZWN0LmxlZnQpO1xuICAgICAgY3NzKGdob3N0RWwsICd3aWR0aCcsIHJlY3Qud2lkdGgpO1xuICAgICAgY3NzKGdob3N0RWwsICdoZWlnaHQnLCByZWN0LmhlaWdodCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ29wYWNpdHknLCAnMC44Jyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3Bvc2l0aW9uJywgUG9zaXRpb25HaG9zdEFic29sdXRlbHkgPyAnYWJzb2x1dGUnIDogJ2ZpeGVkJyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3pJbmRleCcsICcxMDAwMDAnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAncG9pbnRlckV2ZW50cycsICdub25lJyk7XG4gICAgICBTb3J0YWJsZS5naG9zdCA9IGdob3N0RWw7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ2hvc3RFbCk7IC8vIFNldCB0cmFuc2Zvcm0tb3JpZ2luXG5cbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtLW9yaWdpbicsIHRhcERpc3RhbmNlTGVmdCAvIHBhcnNlSW50KGdob3N0RWwuc3R5bGUud2lkdGgpICogMTAwICsgJyUgJyArIHRhcERpc3RhbmNlVG9wIC8gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS5oZWlnaHQpICogMTAwICsgJyUnKTtcbiAgICB9XG4gIH0sXG4gIF9vbkRyYWdTdGFydDogZnVuY3Rpb24gX29uRHJhZ1N0YXJ0KFxuICAvKipFdmVudCovXG4gIGV2dCxcbiAgLyoqYm9vbGVhbiovXG4gIGZhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBkYXRhVHJhbnNmZXIgPSBldnQuZGF0YVRyYW5zZmVyO1xuICAgIHZhciBvcHRpb25zID0gX3RoaXMub3B0aW9ucztcbiAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0JywgdGhpcywge1xuICAgICAgZXZ0OiBldnRcbiAgICB9KTtcblxuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbkV2ZW50KCdzZXR1cENsb25lJywgdGhpcyk7XG5cbiAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIGNsb25lRWwgPSBjbG9uZShkcmFnRWwpO1xuICAgICAgY2xvbmVFbC5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgIGNsb25lRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJztcblxuICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIHRvZ2dsZUNsYXNzKGNsb25lRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuICAgICAgU29ydGFibGUuY2xvbmUgPSBjbG9uZUVsO1xuICAgIH0gLy8gIzExNDM6IElGcmFtZSBzdXBwb3J0IHdvcmthcm91bmRcblxuXG4gICAgX3RoaXMuY2xvbmVJZCA9IF9uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBwbHVnaW5FdmVudCgnY2xvbmUnLCBfdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUpIHtcbiAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShjbG9uZUVsLCBkcmFnRWwpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICBuYW1lOiAnY2xvbmUnXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAhZmFsbGJhY2sgJiYgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7IC8vIFNldCBwcm9wZXIgZHJvcCBldmVudHNcblxuICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgaWdub3JlTmV4dENsaWNrID0gdHJ1ZTtcbiAgICAgIF90aGlzLl9sb29wSWQgPSBzZXRJbnRlcnZhbChfdGhpcy5fZW11bGF0ZURyYWdPdmVyLCA1MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVuZG8gd2hhdCB3YXMgc2V0IGluIF9wcmVwYXJlRHJhZ1N0YXJ0IGJlZm9yZSBkcmFnIHN0YXJ0ZWRcbiAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9vbkRyb3ApO1xuXG4gICAgICBpZiAoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIGRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnO1xuICAgICAgICBvcHRpb25zLnNldERhdGEgJiYgb3B0aW9ucy5zZXREYXRhLmNhbGwoX3RoaXMsIGRhdGFUcmFuc2ZlciwgZHJhZ0VsKTtcbiAgICAgIH1cblxuICAgICAgb24oZG9jdW1lbnQsICdkcm9wJywgX3RoaXMpOyAvLyAjMTI3NiBmaXg6XG5cbiAgICAgIGNzcyhkcmFnRWwsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWigwKScpO1xuICAgIH1cblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIF90aGlzLl9kcmFnU3RhcnRJZCA9IF9uZXh0VGljayhfdGhpcy5fZHJhZ1N0YXJ0ZWQuYmluZChfdGhpcywgZmFsbGJhY2ssIGV2dCkpO1xuICAgIG9uKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCBfdGhpcyk7XG4gICAgbW92ZWQgPSB0cnVlO1xuXG4gICAgaWYgKFNhZmFyaSkge1xuICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd1c2VyLXNlbGVjdCcsICdub25lJyk7XG4gICAgfVxuICB9LFxuICAvLyBSZXR1cm5zIHRydWUgLSBpZiBubyBmdXJ0aGVyIGFjdGlvbiBpcyBuZWVkZWQgKGVpdGhlciBpbnNlcnRlZCBvciBhbm90aGVyIGNvbmRpdGlvbilcbiAgX29uRHJhZ092ZXI6IGZ1bmN0aW9uIF9vbkRyYWdPdmVyKFxuICAvKipFdmVudCovXG4gIGV2dCkge1xuICAgIHZhciBlbCA9IHRoaXMuZWwsXG4gICAgICAgIHRhcmdldCA9IGV2dC50YXJnZXQsXG4gICAgICAgIGRyYWdSZWN0LFxuICAgICAgICB0YXJnZXRSZWN0LFxuICAgICAgICByZXZlcnQsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIGdyb3VwID0gb3B0aW9ucy5ncm91cCxcbiAgICAgICAgYWN0aXZlU29ydGFibGUgPSBTb3J0YWJsZS5hY3RpdmUsXG4gICAgICAgIGlzT3duZXIgPSBhY3RpdmVHcm91cCA9PT0gZ3JvdXAsXG4gICAgICAgIGNhblNvcnQgPSBvcHRpb25zLnNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICB2ZXJ0aWNhbCxcbiAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICBjb21wbGV0ZWRGaXJlZCA9IGZhbHNlO1xuXG4gICAgaWYgKF9zaWxlbnQpIHJldHVybjtcblxuICAgIGZ1bmN0aW9uIGRyYWdPdmVyRXZlbnQobmFtZSwgZXh0cmEpIHtcbiAgICAgIHBsdWdpbkV2ZW50KG5hbWUsIF90aGlzLCBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgIGV2dDogZXZ0LFxuICAgICAgICBpc093bmVyOiBpc093bmVyLFxuICAgICAgICBheGlzOiB2ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIHJldmVydDogcmV2ZXJ0LFxuICAgICAgICBkcmFnUmVjdDogZHJhZ1JlY3QsXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QsXG4gICAgICAgIGNhblNvcnQ6IGNhblNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZTogZnJvbVNvcnRhYmxlLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICAgIG9uTW92ZTogZnVuY3Rpb24gb25Nb3ZlKHRhcmdldCwgYWZ0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIGdldFJlY3QodGFyZ2V0KSwgZXZ0LCBhZnRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZWQ6IGNoYW5nZWRcbiAgICAgIH0sIGV4dHJhKSk7XG4gICAgfSAvLyBDYXB0dXJlIGFuaW1hdGlvbiBzdGF0ZVxuXG5cbiAgICBmdW5jdGlvbiBjYXB0dXJlKCkge1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlJyk7XG5cbiAgICAgIF90aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICBmcm9tU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICB9XG4gICAgfSAvLyBSZXR1cm4gaW52b2NhdGlvbiB3aGVuIGRyYWdFbCBpcyBpbnNlcnRlZCAob3IgY29tcGxldGVkKVxuXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZWQoaW5zZXJ0aW9uKSB7XG4gICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckNvbXBsZXRlZCcsIHtcbiAgICAgICAgaW5zZXJ0aW9uOiBpbnNlcnRpb25cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoX3RoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgICAvLyBTZXQgZ2hvc3QgY2xhc3MgdG8gbmV3IHNvcnRhYmxlJ3MgZ2hvc3QgY2xhc3NcbiAgICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIHB1dFNvcnRhYmxlID8gcHV0U29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzIDogYWN0aXZlU29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmdob3N0Q2xhc3MsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHB1dFNvcnRhYmxlICE9PSBfdGhpcyAmJiBfdGhpcyAhPT0gU29ydGFibGUuYWN0aXZlKSB7XG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfdGhpcztcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcyA9PT0gU29ydGFibGUuYWN0aXZlICYmIHB1dFNvcnRhYmxlKSB7XG4gICAgICAgICAgcHV0U29ydGFibGUgPSBudWxsO1xuICAgICAgICB9IC8vIEFuaW1hdGlvblxuXG5cbiAgICAgICAgaWYgKGZyb21Tb3J0YWJsZSA9PT0gX3RoaXMpIHtcbiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSB0YXJnZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5hbmltYXRlQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlJyk7XG4gICAgICAgICAgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gbnVsbDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgICBmcm9tU29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5faWdub3JlV2hpbGVBbmltYXRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IC8vIE51bGwgbGFzdFRhcmdldCBpZiBpdCBpcyBub3QgaW5zaWRlIGEgcHJldmlvdXNseSBzd2FwcGVkIGVsZW1lbnRcblxuXG4gICAgICBpZiAodGFyZ2V0ID09PSBkcmFnRWwgJiYgIWRyYWdFbC5hbmltYXRlZCB8fCB0YXJnZXQgPT09IGVsICYmICF0YXJnZXQuYW5pbWF0ZWQpIHtcbiAgICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgICB9IC8vIG5vIGJ1YmJsaW5nIGFuZCBub3QgZmFsbGJhY2tcblxuXG4gICAgICBpZiAoIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgIWV2dC5yb290RWwgJiYgdGFyZ2V0ICE9PSBkb2N1bWVudCkge1xuICAgICAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKGV2dC50YXJnZXQpOyAvLyBEbyBub3QgZGV0ZWN0IGZvciBlbXB0eSBpbnNlcnQgaWYgYWxyZWFkeSBpbnNlcnRlZFxuXG5cbiAgICAgICAgIWluc2VydGlvbiAmJiBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudChldnQpO1xuICAgICAgfVxuXG4gICAgICAhb3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybiBjb21wbGV0ZWRGaXJlZCA9IHRydWU7XG4gICAgfSAvLyBDYWxsIHdoZW4gZHJhZ0VsIGhhcyBiZWVuIGluc2VydGVkXG5cblxuICAgIGZ1bmN0aW9uIGNoYW5nZWQoKSB7XG4gICAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2NoYW5nZScsXG4gICAgICAgIHRvRWw6IGVsLFxuICAgICAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZ0LnByZXZlbnREZWZhdWx0ICE9PSB2b2lkIDApIHtcbiAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHRhcmdldCA9IGNsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIHRydWUpO1xuICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyJyk7XG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcblxuICAgIGlmIChkcmFnRWwuY29udGFpbnMoZXZ0LnRhcmdldCkgfHwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC5hbmltYXRpbmdYICYmIHRhcmdldC5hbmltYXRpbmdZIHx8IF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTtcblxuICAgIGlmIChhY3RpdmVTb3J0YWJsZSAmJiAhb3B0aW9ucy5kaXNhYmxlZCAmJiAoaXNPd25lciA/IGNhblNvcnQgfHwgKHJldmVydCA9IHBhcmVudEVsICE9PSByb290RWwpIC8vIFJldmVydGluZyBpdGVtIGludG8gdGhlIG9yaWdpbmFsIGxpc3RcbiAgICA6IHB1dFNvcnRhYmxlID09PSB0aGlzIHx8ICh0aGlzLmxhc3RQdXRNb2RlID0gYWN0aXZlR3JvdXAuY2hlY2tQdWxsKHRoaXMsIGFjdGl2ZVNvcnRhYmxlLCBkcmFnRWwsIGV2dCkpICYmIGdyb3VwLmNoZWNrUHV0KHRoaXMsIGFjdGl2ZVNvcnRhYmxlLCBkcmFnRWwsIGV2dCkpKSB7XG4gICAgICB2ZXJ0aWNhbCA9IHRoaXMuX2dldERpcmVjdGlvbihldnQsIHRhcmdldCkgPT09ICd2ZXJ0aWNhbCc7XG4gICAgICBkcmFnUmVjdCA9IGdldFJlY3QoZHJhZ0VsKTtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyVmFsaWQnKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm4gY29tcGxldGVkRmlyZWQ7XG5cbiAgICAgIGlmIChyZXZlcnQpIHtcbiAgICAgICAgcGFyZW50RWwgPSByb290RWw7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICBjYXB0dXJlKCk7XG5cbiAgICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgICAgZHJhZ092ZXJFdmVudCgncmV2ZXJ0Jyk7XG5cbiAgICAgICAgaWYgKCFTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgaWYgKG5leHRFbCkge1xuICAgICAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShkcmFnRWwsIG5leHRFbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbExhc3RDaGlsZCA9IGxhc3RDaGlsZChlbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgICBpZiAoIWVsTGFzdENoaWxkIHx8IF9naG9zdElzTGFzdChldnQsIHZlcnRpY2FsLCB0aGlzKSAmJiAhZWxMYXN0Q2hpbGQuYW5pbWF0ZWQpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHRvIGVuZCBvZiBsaXN0XG4gICAgICAgIC8vIElmIGFscmVhZHkgYXQgZW5kIG9mIGxpc3Q6IERvIG5vdCBpbnNlcnRcbiAgICAgICAgaWYgKGVsTGFzdENoaWxkID09PSBkcmFnRWwpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfSAvLyBpZiB0aGVyZSBpcyBhIGxhc3QgZWxlbWVudCwgaXQgaXMgdGhlIHRhcmdldFxuXG5cbiAgICAgICAgaWYgKGVsTGFzdENoaWxkICYmIGVsID09PSBldnQudGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZWxMYXN0Q2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0UmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCAhIXRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgICAgICAgcGFyZW50RWwgPSBlbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWxMYXN0Q2hpbGQgJiYgX2dob3N0SXNGaXJzdChldnQsIHZlcnRpY2FsLCB0aGlzKSkge1xuICAgICAgICAvLyBJbnNlcnQgdG8gc3RhcnQgb2YgbGlzdFxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zLCB0cnVlKTtcblxuICAgICAgICBpZiAoZmlyc3RDaGlsZCA9PT0gZHJhZ0VsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQgPSBmaXJzdENoaWxkO1xuICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuXG4gICAgICAgIGlmIChfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCBmYWxzZSkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuICAgICAgICAgIGVsLmluc2VydEJlZm9yZShkcmFnRWwsIGZpcnN0Q2hpbGQpO1xuICAgICAgICAgIHBhcmVudEVsID0gZWw7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICAgIGNoYW5nZWQoKTtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gMCxcbiAgICAgICAgICAgIHRhcmdldEJlZm9yZUZpcnN0U3dhcCxcbiAgICAgICAgICAgIGRpZmZlcmVudExldmVsID0gZHJhZ0VsLnBhcmVudE5vZGUgIT09IGVsLFxuICAgICAgICAgICAgZGlmZmVyZW50Um93Q29sID0gIV9kcmFnRWxJblJvd0NvbHVtbihkcmFnRWwuYW5pbWF0ZWQgJiYgZHJhZ0VsLnRvUmVjdCB8fCBkcmFnUmVjdCwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC50b1JlY3QgfHwgdGFyZ2V0UmVjdCwgdmVydGljYWwpLFxuICAgICAgICAgICAgc2lkZTEgPSB2ZXJ0aWNhbCA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICAgICAgc2Nyb2xsZWRQYXN0VG9wID0gaXNTY3JvbGxlZFBhc3QodGFyZ2V0LCAndG9wJywgJ3RvcCcpIHx8IGlzU2Nyb2xsZWRQYXN0KGRyYWdFbCwgJ3RvcCcsICd0b3AnKSxcbiAgICAgICAgICAgIHNjcm9sbEJlZm9yZSA9IHNjcm9sbGVkUGFzdFRvcCA/IHNjcm9sbGVkUGFzdFRvcC5zY3JvbGxUb3AgOiB2b2lkIDA7XG5cbiAgICAgICAgaWYgKGxhc3RUYXJnZXQgIT09IHRhcmdldCkge1xuICAgICAgICAgIHRhcmdldEJlZm9yZUZpcnN0U3dhcCA9IHRhcmdldFJlY3Rbc2lkZTFdO1xuICAgICAgICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IGZhbHNlO1xuICAgICAgICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSAhZGlmZmVyZW50Um93Q29sICYmIG9wdGlvbnMuaW52ZXJ0U3dhcCB8fCBkaWZmZXJlbnRMZXZlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpcmVjdGlvbiA9IF9nZXRTd2FwRGlyZWN0aW9uKGV2dCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCwgZGlmZmVyZW50Um93Q29sID8gMSA6IG9wdGlvbnMuc3dhcFRocmVzaG9sZCwgb3B0aW9ucy5pbnZlcnRlZFN3YXBUaHJlc2hvbGQgPT0gbnVsbCA/IG9wdGlvbnMuc3dhcFRocmVzaG9sZCA6IG9wdGlvbnMuaW52ZXJ0ZWRTd2FwVGhyZXNob2xkLCBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0LCBsYXN0VGFyZ2V0ID09PSB0YXJnZXQpO1xuICAgICAgICB2YXIgc2libGluZztcblxuICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSAwKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGFyZ2V0IGlzIGJlc2lkZSBkcmFnRWwgaW4gcmVzcGVjdGl2ZSBkaXJlY3Rpb24gKGlnbm9yaW5nIGhpZGRlbiBlbGVtZW50cylcbiAgICAgICAgICB2YXIgZHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcblxuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGRyYWdJbmRleCAtPSBkaXJlY3Rpb247XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50RWwuY2hpbGRyZW5bZHJhZ0luZGV4XTtcbiAgICAgICAgICB9IHdoaWxlIChzaWJsaW5nICYmIChjc3Moc2libGluZywgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnIHx8IHNpYmxpbmcgPT09IGdob3N0RWwpKTtcbiAgICAgICAgfSAvLyBJZiBkcmFnRWwgaXMgYWxyZWFkeSBiZXNpZGUgdGFyZ2V0OiBEbyBub3QgaW5zZXJ0XG5cblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAwIHx8IHNpYmxpbmcgPT09IHRhcmdldCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgbGFzdERpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZyxcbiAgICAgICAgICAgIGFmdGVyID0gZmFsc2U7XG4gICAgICAgIGFmdGVyID0gZGlyZWN0aW9uID09PSAxO1xuXG4gICAgICAgIHZhciBtb3ZlVmVjdG9yID0gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgYWZ0ZXIpO1xuXG4gICAgICAgIGlmIChtb3ZlVmVjdG9yICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChtb3ZlVmVjdG9yID09PSAxIHx8IG1vdmVWZWN0b3IgPT09IC0xKSB7XG4gICAgICAgICAgICBhZnRlciA9IG1vdmVWZWN0b3IgPT09IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3NpbGVudCA9IHRydWU7XG4gICAgICAgICAgc2V0VGltZW91dChfdW5zaWxlbnQsIDMwKTtcbiAgICAgICAgICBjYXB0dXJlKCk7XG5cbiAgICAgICAgICBpZiAoYWZ0ZXIgJiYgIW5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBhZnRlciA/IG5leHRTaWJsaW5nIDogdGFyZ2V0KTtcbiAgICAgICAgICB9IC8vIFVuZG8gY2hyb21lJ3Mgc2Nyb2xsIGFkanVzdG1lbnQgKGhhcyBubyBlZmZlY3Qgb24gb3RoZXIgYnJvd3NlcnMpXG5cblxuICAgICAgICAgIGlmIChzY3JvbGxlZFBhc3RUb3ApIHtcbiAgICAgICAgICAgIHNjcm9sbEJ5KHNjcm9sbGVkUGFzdFRvcCwgMCwgc2Nyb2xsQmVmb3JlIC0gc2Nyb2xsZWRQYXN0VG9wLnNjcm9sbFRvcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyZW50RWwgPSBkcmFnRWwucGFyZW50Tm9kZTsgLy8gYWN0dWFsaXphdGlvblxuICAgICAgICAgIC8vIG11c3QgYmUgZG9uZSBiZWZvcmUgYW5pbWF0aW9uXG5cbiAgICAgICAgICBpZiAodGFyZ2V0QmVmb3JlRmlyc3RTd2FwICE9PSB1bmRlZmluZWQgJiYgIWlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQpIHtcbiAgICAgICAgICAgIHRhcmdldE1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKHRhcmdldEJlZm9yZUZpcnN0U3dhcCAtIGdldFJlY3QodGFyZ2V0KVtzaWRlMV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWQoKTtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5jb250YWlucyhkcmFnRWwpKSB7XG4gICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgX2lnbm9yZVdoaWxlQW5pbWF0aW5nOiBudWxsLFxuICBfb2ZmTW92ZUV2ZW50czogZnVuY3Rpb24gX29mZk1vdmVFdmVudHMoKSB7XG4gICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICdkcmFnb3ZlcicsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICB9LFxuICBfb2ZmVXBFdmVudHM6IGZ1bmN0aW9uIF9vZmZVcEV2ZW50cygpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYoZG9jdW1lbnQsICdzZWxlY3RzdGFydCcsIHRoaXMpO1xuICB9LFxuICBfb25Ecm9wOiBmdW5jdGlvbiBfb25Ecm9wKFxuICAvKipFdmVudCovXG4gIGV2dCkge1xuICAgIHZhciBlbCA9IHRoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRyYWdnZWQgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxuXG4gICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG4gICAgcGx1Z2luRXZlbnQoJ2Ryb3AnLCB0aGlzLCB7XG4gICAgICBldnQ6IGV2dFxuICAgIH0pO1xuICAgIHBhcmVudEVsID0gZHJhZ0VsICYmIGRyYWdFbC5wYXJlbnROb2RlOyAvLyBHZXQgYWdhaW4gYWZ0ZXIgcGx1Z2luIGV2ZW50XG5cbiAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcblxuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICB0aGlzLl9udWxsaW5nKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gZmFsc2U7XG4gICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9IGZhbHNlO1xuICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IGZhbHNlO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fbG9vcElkKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fZHJhZ1N0YXJ0VGltZXIpO1xuXG4gICAgX2NhbmNlbE5leHRUaWNrKHRoaXMuY2xvbmVJZCk7XG5cbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5fZHJhZ1N0YXJ0SWQpOyAvLyBVbmJpbmQgZXZlbnRzXG5cblxuICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgb2ZmKGRvY3VtZW50LCAnZHJvcCcsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cblxuICAgIHRoaXMuX29mZk1vdmVFdmVudHMoKTtcblxuICAgIHRoaXMuX29mZlVwRXZlbnRzKCk7XG5cbiAgICBpZiAoU2FmYXJpKSB7XG4gICAgICBjc3MoZG9jdW1lbnQuYm9keSwgJ3VzZXItc2VsZWN0JywgJycpO1xuICAgIH1cblxuICAgIGNzcyhkcmFnRWwsICd0cmFuc2Zvcm0nLCAnJyk7XG5cbiAgICBpZiAoZXZ0KSB7XG4gICAgICBpZiAobW92ZWQpIHtcbiAgICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICFvcHRpb25zLmRyb3BCdWJibGUgJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBnaG9zdEVsICYmIGdob3N0RWwucGFyZW50Tm9kZSAmJiBnaG9zdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZ2hvc3RFbCk7XG5cbiAgICAgIGlmIChyb290RWwgPT09IHBhcmVudEVsIHx8IHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlICE9PSAnY2xvbmUnKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjbG9uZShzKVxuICAgICAgICBjbG9uZUVsICYmIGNsb25lRWwucGFyZW50Tm9kZSAmJiBjbG9uZUVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkcmFnRWwpIHtcbiAgICAgICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgb2ZmKGRyYWdFbCwgJ2RyYWdlbmQnLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9kaXNhYmxlRHJhZ2dhYmxlKGRyYWdFbCk7XG5cbiAgICAgICAgZHJhZ0VsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7IC8vIFJlbW92ZSBjbGFzc2VzXG4gICAgICAgIC8vIGdob3N0Q2xhc3MgaXMgYWRkZWQgaW4gZHJhZ1N0YXJ0ZWRcblxuICAgICAgICBpZiAobW92ZWQgJiYgIWF3YWl0aW5nRHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIHB1dFNvcnRhYmxlID8gcHV0U29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzIDogdGhpcy5vcHRpb25zLmdob3N0Q2xhc3MsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgdGhpcy5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7IC8vIERyYWcgc3RvcCBldmVudFxuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICBuYW1lOiAndW5jaG9vc2UnLFxuICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgIG5ld0luZGV4OiBudWxsLFxuICAgICAgICAgIG5ld0RyYWdnYWJsZUluZGV4OiBudWxsLFxuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocm9vdEVsICE9PSBwYXJlbnRFbCkge1xuICAgICAgICAgIGlmIChuZXdJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAvLyBBZGQgZXZlbnRcbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgbmFtZTogJ2FkZCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBmcm9tRWw6IHJvb3RFbCxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICB9KTsgLy8gUmVtb3ZlIGV2ZW50XG5cblxuICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgbmFtZTogJ3JlbW92ZScsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pOyAvLyBkcmFnIGZyb20gb25lIGxpc3QgYW5kIGRyb3AgaW50byBhbm90aGVyXG5cblxuICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICByb290RWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBmcm9tRWw6IHJvb3RFbCxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgbmFtZTogJ3NvcnQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5zYXZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ICE9PSBvbGRJbmRleCkge1xuICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgLy8gZHJhZyAmIGRyb3Agd2l0aGluIHRoZSBzYW1lIGxpc3RcbiAgICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICd1cGRhdGUnLFxuICAgICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3NvcnQnLFxuICAgICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoU29ydGFibGUuYWN0aXZlKSB7XG4gICAgICAgICAgLyoganNoaW50IGVxbnVsbDp0cnVlICovXG4gICAgICAgICAgaWYgKG5ld0luZGV4ID09IG51bGwgfHwgbmV3SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBuZXdJbmRleCA9IG9sZEluZGV4O1xuICAgICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgIG5hbWU6ICdlbmQnLFxuICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICB9KTsgLy8gU2F2ZSBzb3J0aW5nXG5cblxuICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fbnVsbGluZygpO1xuICB9LFxuICBfbnVsbGluZzogZnVuY3Rpb24gX251bGxpbmcoKSB7XG4gICAgcGx1Z2luRXZlbnQoJ251bGxpbmcnLCB0aGlzKTtcbiAgICByb290RWwgPSBkcmFnRWwgPSBwYXJlbnRFbCA9IGdob3N0RWwgPSBuZXh0RWwgPSBjbG9uZUVsID0gbGFzdERvd25FbCA9IGNsb25lSGlkZGVuID0gdGFwRXZ0ID0gdG91Y2hFdnQgPSBtb3ZlZCA9IG5ld0luZGV4ID0gbmV3RHJhZ2dhYmxlSW5kZXggPSBvbGRJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4ID0gbGFzdFRhcmdldCA9IGxhc3REaXJlY3Rpb24gPSBwdXRTb3J0YWJsZSA9IGFjdGl2ZUdyb3VwID0gU29ydGFibGUuZHJhZ2dlZCA9IFNvcnRhYmxlLmdob3N0ID0gU29ydGFibGUuY2xvbmUgPSBTb3J0YWJsZS5hY3RpdmUgPSBudWxsO1xuICAgIHNhdmVkSW5wdXRDaGVja2VkLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5jaGVja2VkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzYXZlZElucHV0Q2hlY2tlZC5sZW5ndGggPSBsYXN0RHggPSBsYXN0RHkgPSAwO1xuICB9LFxuICBoYW5kbGVFdmVudDogZnVuY3Rpb24gaGFuZGxlRXZlbnQoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgc3dpdGNoIChldnQudHlwZSkge1xuICAgICAgY2FzZSAnZHJvcCc6XG4gICAgICBjYXNlICdkcmFnZW5kJzpcbiAgICAgICAgdGhpcy5fb25Ecm9wKGV2dCk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2RyYWdlbnRlcic6XG4gICAgICBjYXNlICdkcmFnb3Zlcic6XG4gICAgICAgIGlmIChkcmFnRWwpIHtcbiAgICAgICAgICB0aGlzLl9vbkRyYWdPdmVyKGV2dCk7XG5cbiAgICAgICAgICBfZ2xvYmFsRHJhZ092ZXIoZXZ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3RzdGFydCc6XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGl0ZW0gaW50byBhbiBhcnJheSBvZiBzdHJpbmcuXG4gICAqIEByZXR1cm5zIHtTdHJpbmdbXX1cbiAgICovXG4gIHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgdmFyIG9yZGVyID0gW10sXG4gICAgICAgIGVsLFxuICAgICAgICBjaGlsZHJlbiA9IHRoaXMuZWwuY2hpbGRyZW4sXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBuID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgIGVsID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjbG9zZXN0KGVsLCBvcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5lbCwgZmFsc2UpKSB7XG4gICAgICAgIG9yZGVyLnB1c2goZWwuZ2V0QXR0cmlidXRlKG9wdGlvbnMuZGF0YUlkQXR0cikgfHwgX2dlbmVyYXRlSWQoZWwpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3JkZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNvcnRzIHRoZSBlbGVtZW50cyBhY2NvcmRpbmcgdG8gdGhlIGFycmF5LlxuICAgKiBAcGFyYW0gIHtTdHJpbmdbXX0gIG9yZGVyICBvcmRlciBvZiB0aGUgaXRlbXNcbiAgICovXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQob3JkZXIsIHVzZUFuaW1hdGlvbikge1xuICAgIHZhciBpdGVtcyA9IHt9LFxuICAgICAgICByb290RWwgPSB0aGlzLmVsO1xuICAgIHRoaXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKGlkLCBpKSB7XG4gICAgICB2YXIgZWwgPSByb290RWwuY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjbG9zZXN0KGVsLCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCByb290RWwsIGZhbHNlKSkge1xuICAgICAgICBpdGVtc1tpZF0gPSBlbDtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgICB1c2VBbmltYXRpb24gJiYgdGhpcy5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgaWYgKGl0ZW1zW2lkXSkge1xuICAgICAgICByb290RWwucmVtb3ZlQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGl0ZW1zW2lkXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlQW5pbWF0aW9uICYmIHRoaXMuYW5pbWF0ZUFsbCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTYXZlIHRoZSBjdXJyZW50IHNvcnRpbmdcbiAgICovXG4gIHNhdmU6IGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgdmFyIHN0b3JlID0gdGhpcy5vcHRpb25zLnN0b3JlO1xuICAgIHN0b3JlICYmIHN0b3JlLnNldCAmJiBzdG9yZS5zZXQodGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCwgZ2V0IHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgc2VsZWN0b3IgYnkgdGVzdGluZyB0aGUgZWxlbWVudCBpdHNlbGYgYW5kIHRyYXZlcnNpbmcgdXAgdGhyb3VnaCBpdHMgYW5jZXN0b3JzIGluIHRoZSBET00gdHJlZS5cbiAgICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgZWxcbiAgICogQHBhcmFtICAge1N0cmluZ30gICAgICAgW3NlbGVjdG9yXSAgZGVmYXVsdDogYG9wdGlvbnMuZHJhZ2dhYmxlYFxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8bnVsbH1cbiAgICovXG4gIGNsb3Nlc3Q6IGZ1bmN0aW9uIGNsb3Nlc3QkMShlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gY2xvc2VzdChlbCwgc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5lbCwgZmFsc2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQvZ2V0IG9wdGlvblxuICAgKiBAcGFyYW0gICB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSAgIHsqfSAgICAgIFt2YWx1ZV1cbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBvcHRpb246IGZ1bmN0aW9uIG9wdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBvcHRpb25zW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbW9kaWZpZWRWYWx1ZSA9IFBsdWdpbk1hbmFnZXIubW9kaWZ5T3B0aW9uKHRoaXMsIG5hbWUsIHZhbHVlKTtcblxuICAgICAgaWYgKHR5cGVvZiBtb2RpZmllZFZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvcHRpb25zW25hbWVdID0gbW9kaWZpZWRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09ICdncm91cCcpIHtcbiAgICAgICAgX3ByZXBhcmVHcm91cChvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lcbiAgICovXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgcGx1Z2luRXZlbnQoJ2Rlc3Ryb3knLCB0aGlzKTtcbiAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgIGVsW2V4cGFuZG9dID0gbnVsbDtcbiAgICBvZmYoZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvZmYoZWwsICd0b3VjaHN0YXJ0JywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgb2ZmKGVsLCAncG9pbnRlcmRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcblxuICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgb2ZmKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcbiAgICAgIG9mZihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuICAgIH0gLy8gUmVtb3ZlIGRyYWdnYWJsZSBhdHRyaWJ1dGVzXG5cblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnW2RyYWdnYWJsZV0nKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RyYWdnYWJsZScpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fb25Ecm9wKCk7XG5cbiAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcblxuICAgIHNvcnRhYmxlcy5zcGxpY2Uoc29ydGFibGVzLmluZGV4T2YodGhpcy5lbCksIDEpO1xuICAgIHRoaXMuZWwgPSBlbCA9IG51bGw7XG4gIH0sXG4gIF9oaWRlQ2xvbmU6IGZ1bmN0aW9uIF9oaWRlQ2xvbmUoKSB7XG4gICAgaWYgKCFjbG9uZUhpZGRlbikge1xuICAgICAgcGx1Z2luRXZlbnQoJ2hpZGVDbG9uZScsIHRoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjtcbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGNsb25lRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgY2xvbmVIaWRkZW4gPSB0cnVlO1xuICAgIH1cbiAgfSxcbiAgX3Nob3dDbG9uZTogZnVuY3Rpb24gX3Nob3dDbG9uZShwdXRTb3J0YWJsZSkge1xuICAgIGlmIChwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2xvbmVIaWRkZW4pIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdzaG93Q2xvbmUnLCB0aGlzKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm47IC8vIHNob3cgY2xvbmUgYXQgZHJhZ0VsIG9yIG9yaWdpbmFsIHBvc2l0aW9uXG5cbiAgICAgIGlmIChkcmFnRWwucGFyZW50Tm9kZSA9PSByb290RWwgJiYgIXRoaXMub3B0aW9ucy5ncm91cC5yZXZlcnRDbG9uZSkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIGRyYWdFbCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHRFbCkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIG5leHRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlKGRyYWdFbCwgY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICcnKTtcbiAgICAgIGNsb25lSGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfZ2xvYmFsRHJhZ092ZXIoXG4vKipFdmVudCovXG5ldnQpIHtcbiAgaWYgKGV2dC5kYXRhVHJhbnNmZXIpIHtcbiAgICBldnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gIH1cblxuICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbn1cblxuZnVuY3Rpb24gX29uTW92ZShmcm9tRWwsIHRvRWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldEVsLCB0YXJnZXRSZWN0LCBvcmlnaW5hbEV2ZW50LCB3aWxsSW5zZXJ0QWZ0ZXIpIHtcbiAgdmFyIGV2dCxcbiAgICAgIHNvcnRhYmxlID0gZnJvbUVsW2V4cGFuZG9dLFxuICAgICAgb25Nb3ZlRm4gPSBzb3J0YWJsZS5vcHRpb25zLm9uTW92ZSxcbiAgICAgIHJldFZhbDsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmVcblxuICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7XG4gICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KCdtb3ZlJywge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KCdtb3ZlJywgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBldnQudG8gPSB0b0VsO1xuICBldnQuZnJvbSA9IGZyb21FbDtcbiAgZXZ0LmRyYWdnZWQgPSBkcmFnRWw7XG4gIGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0O1xuICBldnQucmVsYXRlZCA9IHRhcmdldEVsIHx8IHRvRWw7XG4gIGV2dC5yZWxhdGVkUmVjdCA9IHRhcmdldFJlY3QgfHwgZ2V0UmVjdCh0b0VsKTtcbiAgZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBmcm9tRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuXG4gIGlmIChvbk1vdmVGbikge1xuICAgIHJldFZhbCA9IG9uTW92ZUZuLmNhbGwoc29ydGFibGUsIGV2dCwgb3JpZ2luYWxFdmVudCk7XG4gIH1cblxuICByZXR1cm4gcmV0VmFsO1xufVxuXG5mdW5jdGlvbiBfZGlzYWJsZURyYWdnYWJsZShlbCkge1xuICBlbC5kcmFnZ2FibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX3Vuc2lsZW50KCkge1xuICBfc2lsZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9naG9zdElzRmlyc3QoZXZ0LCB2ZXJ0aWNhbCwgc29ydGFibGUpIHtcbiAgdmFyIHJlY3QgPSBnZXRSZWN0KGdldENoaWxkKHNvcnRhYmxlLmVsLCAwLCBzb3J0YWJsZS5vcHRpb25zLCB0cnVlKSk7XG4gIHZhciBzcGFjZXIgPSAxMDtcbiAgcmV0dXJuIHZlcnRpY2FsID8gZXZ0LmNsaWVudFggPCByZWN0LmxlZnQgLSBzcGFjZXIgfHwgZXZ0LmNsaWVudFkgPCByZWN0LnRvcCAmJiBldnQuY2xpZW50WCA8IHJlY3QucmlnaHQgOiBldnQuY2xpZW50WSA8IHJlY3QudG9wIC0gc3BhY2VyIHx8IGV2dC5jbGllbnRZIDwgcmVjdC5ib3R0b20gJiYgZXZ0LmNsaWVudFggPCByZWN0LmxlZnQ7XG59XG5cbmZ1bmN0aW9uIF9naG9zdElzTGFzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgcmVjdCA9IGdldFJlY3QobGFzdENoaWxkKHNvcnRhYmxlLmVsLCBzb3J0YWJsZS5vcHRpb25zLmRyYWdnYWJsZSkpO1xuICB2YXIgc3BhY2VyID0gMTA7XG4gIHJldHVybiB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRYID4gcmVjdC5yaWdodCArIHNwYWNlciB8fCBldnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC5ib3R0b20gJiYgZXZ0LmNsaWVudFggPj0gcmVjdC5sZWZ0IDogZXZ0LmNsaWVudFggPiByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC50b3AgfHwgZXZ0LmNsaWVudFggPD0gcmVjdC5yaWdodCAmJiBldnQuY2xpZW50WSA+IHJlY3QuYm90dG9tICsgc3BhY2VyO1xufVxuXG5mdW5jdGlvbiBfZ2V0U3dhcERpcmVjdGlvbihldnQsIHRhcmdldCwgdGFyZ2V0UmVjdCwgdmVydGljYWwsIHN3YXBUaHJlc2hvbGQsIGludmVydGVkU3dhcFRocmVzaG9sZCwgaW52ZXJ0U3dhcCwgaXNMYXN0VGFyZ2V0KSB7XG4gIHZhciBtb3VzZU9uQXhpcyA9IHZlcnRpY2FsID8gZXZ0LmNsaWVudFkgOiBldnQuY2xpZW50WCxcbiAgICAgIHRhcmdldExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5oZWlnaHQgOiB0YXJnZXRSZWN0LndpZHRoLFxuICAgICAgdGFyZ2V0UzEgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QudG9wIDogdGFyZ2V0UmVjdC5sZWZ0LFxuICAgICAgdGFyZ2V0UzIgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QuYm90dG9tIDogdGFyZ2V0UmVjdC5yaWdodCxcbiAgICAgIGludmVydCA9IGZhbHNlO1xuXG4gIGlmICghaW52ZXJ0U3dhcCkge1xuICAgIC8vIE5ldmVyIGludmVydCBvciBjcmVhdGUgZHJhZ0VsIHNoYWRvdyB3aGVuIHRhcmdldCBtb3ZlbWVuZXQgY2F1c2VzIG1vdXNlIHRvIG1vdmUgcGFzdCB0aGUgZW5kIG9mIHJlZ3VsYXIgc3dhcFRocmVzaG9sZFxuICAgIGlmIChpc0xhc3RUYXJnZXQgJiYgdGFyZ2V0TW92ZURpc3RhbmNlIDwgdGFyZ2V0TGVuZ3RoICogc3dhcFRocmVzaG9sZCkge1xuICAgICAgLy8gbXVsdGlwbGllZCBvbmx5IGJ5IHN3YXBUaHJlc2hvbGQgYmVjYXVzZSBtb3VzZSB3aWxsIGFscmVhZHkgYmUgaW5zaWRlIHRhcmdldCBieSAoMSAtIHRocmVzaG9sZCkgKiB0YXJnZXRMZW5ndGggLyAyXG4gICAgICAvLyBjaGVjayBpZiBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQgb24gc2lkZSBvcHBvc2l0ZSBvZiBsYXN0RGlyZWN0aW9uXG4gICAgICBpZiAoIXBhc3RGaXJzdEludmVydFRocmVzaCAmJiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIDogbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIpKSB7XG4gICAgICAgIC8vIHBhc3QgZmlyc3QgaW52ZXJ0IHRocmVzaG9sZCwgZG8gbm90IHJlc3RyaWN0IGludmVydGVkIHRocmVzaG9sZCB0byBkcmFnRWwgc2hhZG93XG4gICAgICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoKSB7XG4gICAgICAgIC8vIGRyYWdFbCBzaGFkb3cgKHRhcmdldCBtb3ZlIGRpc3RhbmNlIHNoYWRvdylcbiAgICAgICAgaWYgKGxhc3REaXJlY3Rpb24gPT09IDEgPyBtb3VzZU9uQXhpcyA8IHRhcmdldFMxICsgdGFyZ2V0TW92ZURpc3RhbmNlIC8vIG92ZXIgZHJhZ0VsIHNoYWRvd1xuICAgICAgICA6IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRNb3ZlRGlzdGFuY2UpIHtcbiAgICAgICAgICByZXR1cm4gLWxhc3REaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmVydCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlZ3VsYXJcbiAgICAgIGlmIChtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIgJiYgbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqICgxIC0gc3dhcFRocmVzaG9sZCkgLyAyKSB7XG4gICAgICAgIHJldHVybiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW52ZXJ0ID0gaW52ZXJ0IHx8IGludmVydFN3YXA7XG5cbiAgaWYgKGludmVydCkge1xuICAgIC8vIEludmVydCBvZiByZWd1bGFyXG4gICAgaWYgKG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIHx8IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSB7XG4gICAgICByZXR1cm4gbW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAvIDIgPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG4vKipcbiAqIEdldHMgdGhlIGRpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkIHJlbGF0aXZlIHRvIHRhcmdldCBpbiBvcmRlciB0byBtYWtlIGl0XG4gKiBzZWVtIHRoYXQgZHJhZ0VsIGhhcyBiZWVuIFwiaW5zZXJ0ZWRcIiBpbnRvIHRoYXQgZWxlbWVudCdzIHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gdGFyZ2V0ICAgICAgIFRoZSB0YXJnZXQgd2hvc2UgcG9zaXRpb24gZHJhZ0VsIGlzIGJlaW5nIGluc2VydGVkIGF0XG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgIERpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkXG4gKi9cblxuXG5mdW5jdGlvbiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCkge1xuICBpZiAoaW5kZXgoZHJhZ0VsKSA8IGluZGV4KHRhcmdldCkpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn1cbi8qKlxuICogR2VuZXJhdGUgaWRcbiAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gX2dlbmVyYXRlSWQoZWwpIHtcbiAgdmFyIHN0ciA9IGVsLnRhZ05hbWUgKyBlbC5jbGFzc05hbWUgKyBlbC5zcmMgKyBlbC5ocmVmICsgZWwudGV4dENvbnRlbnQsXG4gICAgICBpID0gc3RyLmxlbmd0aCxcbiAgICAgIHN1bSA9IDA7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHN1bSArPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuXG4gIHJldHVybiBzdW0udG9TdHJpbmcoMzYpO1xufVxuXG5mdW5jdGlvbiBfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKHJvb3QpIHtcbiAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gMDtcbiAgdmFyIGlucHV0cyA9IHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0Jyk7XG4gIHZhciBpZHggPSBpbnB1dHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpZHgtLSkge1xuICAgIHZhciBlbCA9IGlucHV0c1tpZHhdO1xuICAgIGVsLmNoZWNrZWQgJiYgc2F2ZWRJbnB1dENoZWNrZWQucHVzaChlbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX25leHRUaWNrKGZuKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZuLCAwKTtcbn1cblxuZnVuY3Rpb24gX2NhbmNlbE5leHRUaWNrKGlkKSB7XG4gIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufSAvLyBGaXhlZCAjOTczOlxuXG5cbmlmIChkb2N1bWVudEV4aXN0cykge1xuICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoKFNvcnRhYmxlLmFjdGl2ZSB8fCBhd2FpdGluZ0RyYWdTdGFydGVkKSAmJiBldnQuY2FuY2VsYWJsZSkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9KTtcbn0gLy8gRXhwb3J0IHV0aWxzXG5cblxuU29ydGFibGUudXRpbHMgPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGNzczogY3NzLFxuICBmaW5kOiBmaW5kLFxuICBpczogZnVuY3Rpb24gaXMoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuICEhY2xvc2VzdChlbCwgc2VsZWN0b3IsIGVsLCBmYWxzZSk7XG4gIH0sXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0aHJvdHRsZTogdGhyb3R0bGUsXG4gIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcbiAgY2xvbmU6IGNsb25lLFxuICBpbmRleDogaW5kZXgsXG4gIG5leHRUaWNrOiBfbmV4dFRpY2ssXG4gIGNhbmNlbE5leHRUaWNrOiBfY2FuY2VsTmV4dFRpY2ssXG4gIGRldGVjdERpcmVjdGlvbjogX2RldGVjdERpcmVjdGlvbixcbiAgZ2V0Q2hpbGQ6IGdldENoaWxkXG59O1xuLyoqXG4gKiBHZXQgdGhlIFNvcnRhYmxlIGluc3RhbmNlIG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50XG4gKiBAcmV0dXJuIHtTb3J0YWJsZXx1bmRlZmluZWR9ICAgICAgICAgVGhlIGluc3RhbmNlIG9mIFNvcnRhYmxlXG4gKi9cblxuU29ydGFibGUuZ2V0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnRbZXhwYW5kb107XG59O1xuLyoqXG4gKiBNb3VudCBhIHBsdWdpbiB0byBTb3J0YWJsZVxuICogQHBhcmFtICB7Li4uU29ydGFibGVQbHVnaW58U29ydGFibGVQbHVnaW5bXX0gcGx1Z2lucyAgICAgICBQbHVnaW5zIGJlaW5nIG1vdW50ZWRcbiAqL1xuXG5cblNvcnRhYmxlLm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKHBsdWdpbnNbMF0uY29uc3RydWN0b3IgPT09IEFycmF5KSBwbHVnaW5zID0gcGx1Z2luc1swXTtcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICBpZiAoIXBsdWdpbi5wcm90b3R5cGUgfHwgIXBsdWdpbi5wcm90b3R5cGUuY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IFwiU29ydGFibGU6IE1vdW50ZWQgcGx1Z2luIG11c3QgYmUgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKHBsdWdpbikpO1xuICAgIH1cblxuICAgIGlmIChwbHVnaW4udXRpbHMpIFNvcnRhYmxlLnV0aWxzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIFNvcnRhYmxlLnV0aWxzKSwgcGx1Z2luLnV0aWxzKTtcbiAgICBQbHVnaW5NYW5hZ2VyLm1vdW50KHBsdWdpbik7XG4gIH0pO1xufTtcbi8qKlxuICogQ3JlYXRlIHNvcnRhYmxlIGluc3RhbmNlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSAgZWxcbiAqIEBwYXJhbSB7T2JqZWN0fSAgICAgIFtvcHRpb25zXVxuICovXG5cblxuU29ydGFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgU29ydGFibGUoZWwsIG9wdGlvbnMpO1xufTsgLy8gRXhwb3J0XG5cblxuU29ydGFibGUudmVyc2lvbiA9IHZlcnNpb247XG5cbnZhciBhdXRvU2Nyb2xscyA9IFtdLFxuICAgIHNjcm9sbEVsLFxuICAgIHNjcm9sbFJvb3RFbCxcbiAgICBzY3JvbGxpbmcgPSBmYWxzZSxcbiAgICBsYXN0QXV0b1Njcm9sbFgsXG4gICAgbGFzdEF1dG9TY3JvbGxZLFxuICAgIHRvdWNoRXZ0JDEsXG4gICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWw7XG5cbmZ1bmN0aW9uIEF1dG9TY3JvbGxQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIEF1dG9TY3JvbGwoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHNjcm9sbDogdHJ1ZSxcbiAgICAgIGZvcmNlQXV0b1Njcm9sbEZhbGxiYWNrOiBmYWxzZSxcbiAgICAgIHNjcm9sbFNlbnNpdGl2aXR5OiAzMCxcbiAgICAgIHNjcm9sbFNwZWVkOiAxMCxcbiAgICAgIGJ1YmJsZVNjcm9sbDogdHJ1ZVxuICAgIH07IC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kc1xuXG4gICAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQXV0b1Njcm9sbC5wcm90b3R5cGUgPSB7XG4gICAgZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIGRyYWdTdGFydGVkKF9yZWYpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50O1xuXG4gICAgICBpZiAodGhpcy5zb3J0YWJsZS5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdkcmFnb3ZlcicsIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdXBwb3J0UG9pbnRlcikge1xuICAgICAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbmFsRXZlbnQudG91Y2hlcykge1xuICAgICAgICAgIG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQ29tcGxldGVkOiBmdW5jdGlvbiBkcmFnT3ZlckNvbXBsZXRlZChfcmVmMikge1xuICAgICAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmMi5vcmlnaW5hbEV2ZW50O1xuXG4gICAgICAvLyBGb3Igd2hlbiBidWJibGluZyBpcyBjYW5jZWxlZCBhbmQgdXNpbmcgZmFsbGJhY2sgKGZhbGxiYWNrICd0b3VjaG1vdmUnIGFsd2F5cyByZWFjaGVkKVxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZHJhZ092ZXJCdWJibGUgJiYgIW9yaWdpbmFsRXZlbnQucm9vdEVsKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwob3JpZ2luYWxFdmVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKCkge1xuICAgICAgaWYgKHRoaXMuc29ydGFibGUubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ2RyYWdvdmVyJywgdGhpcy5faGFuZGxlQXV0b1Njcm9sbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICB9XG5cbiAgICAgIGNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwoKTtcbiAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgIGNhbmNlbFRocm90dGxlKCk7XG4gICAgfSxcbiAgICBudWxsaW5nOiBmdW5jdGlvbiBudWxsaW5nKCkge1xuICAgICAgdG91Y2hFdnQkMSA9IHNjcm9sbFJvb3RFbCA9IHNjcm9sbEVsID0gc2Nyb2xsaW5nID0gcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBsYXN0QXV0b1Njcm9sbFggPSBsYXN0QXV0b1Njcm9sbFkgPSBudWxsO1xuICAgICAgYXV0b1Njcm9sbHMubGVuZ3RoID0gMDtcbiAgICB9LFxuICAgIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGw6IGZ1bmN0aW9uIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwoZXZ0KSB7XG4gICAgICB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKGV2dCwgdHJ1ZSk7XG4gICAgfSxcbiAgICBfaGFuZGxlQXV0b1Njcm9sbDogZnVuY3Rpb24gX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCBmYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIHggPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WCxcbiAgICAgICAgICB5ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFksXG4gICAgICAgICAgZWxlbSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG4gICAgICB0b3VjaEV2dCQxID0gZXZ0OyAvLyBJRSBkb2VzIG5vdCBzZWVtIHRvIGhhdmUgbmF0aXZlIGF1dG9zY3JvbGwsXG4gICAgICAvLyBFZGdlJ3MgYXV0b3Njcm9sbCBzZWVtcyB0b28gY29uZGl0aW9uYWwsXG4gICAgICAvLyBNQUNPUyBTYWZhcmkgZG9lcyBub3QgaGF2ZSBhdXRvc2Nyb2xsLFxuICAgICAgLy8gRmlyZWZveCBhbmQgQ2hyb21lIGFyZSBnb29kXG5cbiAgICAgIGlmIChmYWxsYmFjayB8fCB0aGlzLm9wdGlvbnMuZm9yY2VBdXRvU2Nyb2xsRmFsbGJhY2sgfHwgRWRnZSB8fCBJRTExT3JMZXNzIHx8IFNhZmFyaSkge1xuICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgdGhpcy5vcHRpb25zLCBlbGVtLCBmYWxsYmFjayk7IC8vIExpc3RlbmVyIGZvciBwb2ludGVyIGVsZW1lbnQgY2hhbmdlXG5cbiAgICAgICAgdmFyIG9nRWxlbVNjcm9sbGVyID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHNjcm9sbGluZyAmJiAoIXBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIHx8IHggIT09IGxhc3RBdXRvU2Nyb2xsWCB8fCB5ICE9PSBsYXN0QXV0b1Njcm9sbFkpKSB7XG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgJiYgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpOyAvLyBEZXRlY3QgZm9yIHBvaW50ZXIgZWxlbSBjaGFuZ2UsIGVtdWxhdGluZyBuYXRpdmUgRG5EIGJlaGF2aW91clxuXG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV3RWxlbSA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSksIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAobmV3RWxlbSAhPT0gb2dFbGVtU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgb2dFbGVtU2Nyb2xsZXIgPSBuZXdFbGVtO1xuICAgICAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF1dG9TY3JvbGwoZXZ0LCBfdGhpcy5vcHRpb25zLCBuZXdFbGVtLCBmYWxsYmFjayk7XG4gICAgICAgICAgfSwgMTApO1xuICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWCA9IHg7XG4gICAgICAgICAgbGFzdEF1dG9TY3JvbGxZID0geTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgRG5EIGlzIGVuYWJsZWQgKGFuZCBicm93c2VyIGhhcyBnb29kIGF1dG9zY3JvbGxpbmcpLCBmaXJzdCBhdXRvc2Nyb2xsIHdpbGwgYWxyZWFkeSBzY3JvbGwsIHNvIGdldCBwYXJlbnQgYXV0b3Njcm9sbCBvZiBmaXJzdCBhdXRvc2Nyb2xsXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmJ1YmJsZVNjcm9sbCB8fCBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbGVtLCB0cnVlKSA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSB7XG4gICAgICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF1dG9TY3JvbGwoZXZ0LCB0aGlzLm9wdGlvbnMsIGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIGZhbHNlKSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKEF1dG9TY3JvbGwsIHtcbiAgICBwbHVnaW5OYW1lOiAnc2Nyb2xsJyxcbiAgICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhckF1dG9TY3JvbGxzKCkge1xuICBhdXRvU2Nyb2xscy5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvU2Nyb2xsKSB7XG4gICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsLnBpZCk7XG4gIH0pO1xuICBhdXRvU2Nyb2xscyA9IFtdO1xufVxuXG5mdW5jdGlvbiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCkge1xuICBjbGVhckludGVydmFsKHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKTtcbn1cblxudmFyIGF1dG9TY3JvbGwgPSB0aHJvdHRsZShmdW5jdGlvbiAoZXZ0LCBvcHRpb25zLCByb290RWwsIGlzRmFsbGJhY2spIHtcbiAgLy8gQnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01MDU1MjFcbiAgaWYgKCFvcHRpb25zLnNjcm9sbCkgcmV0dXJuO1xuICB2YXIgeCA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRYLFxuICAgICAgeSA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRZLFxuICAgICAgc2VucyA9IG9wdGlvbnMuc2Nyb2xsU2Vuc2l0aXZpdHksXG4gICAgICBzcGVlZCA9IG9wdGlvbnMuc2Nyb2xsU3BlZWQsXG4gICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIHNjcm9sbFRoaXNJbnN0YW5jZSA9IGZhbHNlLFxuICAgICAgc2Nyb2xsQ3VzdG9tRm47IC8vIE5ldyBzY3JvbGwgcm9vdCwgc2V0IHNjcm9sbEVsXG5cbiAgaWYgKHNjcm9sbFJvb3RFbCAhPT0gcm9vdEVsKSB7XG4gICAgc2Nyb2xsUm9vdEVsID0gcm9vdEVsO1xuICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICBzY3JvbGxFbCA9IG9wdGlvbnMuc2Nyb2xsO1xuICAgIHNjcm9sbEN1c3RvbUZuID0gb3B0aW9ucy5zY3JvbGxGbjtcblxuICAgIGlmIChzY3JvbGxFbCA9PT0gdHJ1ZSkge1xuICAgICAgc2Nyb2xsRWwgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChyb290RWwsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsYXllcnNPdXQgPSAwO1xuICB2YXIgY3VycmVudFBhcmVudCA9IHNjcm9sbEVsO1xuXG4gIGRvIHtcbiAgICB2YXIgZWwgPSBjdXJyZW50UGFyZW50LFxuICAgICAgICByZWN0ID0gZ2V0UmVjdChlbCksXG4gICAgICAgIHRvcCA9IHJlY3QudG9wLFxuICAgICAgICBib3R0b20gPSByZWN0LmJvdHRvbSxcbiAgICAgICAgbGVmdCA9IHJlY3QubGVmdCxcbiAgICAgICAgcmlnaHQgPSByZWN0LnJpZ2h0LFxuICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0LFxuICAgICAgICBjYW5TY3JvbGxYID0gdm9pZCAwLFxuICAgICAgICBjYW5TY3JvbGxZID0gdm9pZCAwLFxuICAgICAgICBzY3JvbGxXaWR0aCA9IGVsLnNjcm9sbFdpZHRoLFxuICAgICAgICBzY3JvbGxIZWlnaHQgPSBlbC5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGVsQ1NTID0gY3NzKGVsKSxcbiAgICAgICAgc2Nyb2xsUG9zWCA9IGVsLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFBvc1kgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICBpZiAoZWwgPT09IHdpblNjcm9sbGVyKSB7XG4gICAgICBjYW5TY3JvbGxYID0gd2lkdGggPCBzY3JvbGxXaWR0aCAmJiAoZWxDU1Mub3ZlcmZsb3dYID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAnc2Nyb2xsJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICd2aXNpYmxlJyk7XG4gICAgICBjYW5TY3JvbGxZID0gaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICYmIChlbENTUy5vdmVyZmxvd1kgPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Zpc2libGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcpO1xuICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyk7XG4gICAgfVxuXG4gICAgdmFyIHZ4ID0gY2FuU2Nyb2xsWCAmJiAoTWF0aC5hYnMocmlnaHQgLSB4KSA8PSBzZW5zICYmIHNjcm9sbFBvc1ggKyB3aWR0aCA8IHNjcm9sbFdpZHRoKSAtIChNYXRoLmFicyhsZWZ0IC0geCkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1gpO1xuICAgIHZhciB2eSA9IGNhblNjcm9sbFkgJiYgKE1hdGguYWJzKGJvdHRvbSAtIHkpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWSArIGhlaWdodCA8IHNjcm9sbEhlaWdodCkgLSAoTWF0aC5hYnModG9wIC0geSkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1kpO1xuXG4gICAgaWYgKCFhdXRvU2Nyb2xsc1tsYXllcnNPdXRdKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXllcnNPdXQ7IGkrKykge1xuICAgICAgICBpZiAoIWF1dG9TY3JvbGxzW2ldKSB7XG4gICAgICAgICAgYXV0b1Njcm9sbHNbaV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ4ICE9IHZ4IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0udnkgIT0gdnkgfHwgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5lbCAhPT0gZWwpIHtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgPSBlbDtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0udnggPSB2eDtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0udnkgPSB2eTtcbiAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQpO1xuXG4gICAgICBpZiAodnggIT0gMCB8fCB2eSAhPSAwKSB7XG4gICAgICAgIHNjcm9sbFRoaXNJbnN0YW5jZSA9IHRydWU7XG4gICAgICAgIC8qIGpzaGludCBsb29wZnVuYzp0cnVlICovXG5cbiAgICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gZW11bGF0ZSBkcmFnIG92ZXIgZHVyaW5nIGF1dG9zY3JvbGwgKGZhbGxiYWNrKSwgZW11bGF0aW5nIG5hdGl2ZSBEbkQgYmVoYXZpb3VyXG4gICAgICAgICAgaWYgKGlzRmFsbGJhY2sgJiYgdGhpcy5sYXllciA9PT0gMCkge1xuICAgICAgICAgICAgU29ydGFibGUuYWN0aXZlLl9vblRvdWNoTW92ZSh0b3VjaEV2dCQxKTsgLy8gVG8gbW92ZSBnaG9zdCBpZiBpdCBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHlcblxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXRZID0gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnkgPyBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSAqIHNwZWVkIDogMDtcbiAgICAgICAgICB2YXIgc2Nyb2xsT2Zmc2V0WCA9IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ4ID8gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnggKiBzcGVlZCA6IDA7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHNjcm9sbEN1c3RvbUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsQ3VzdG9tRm4uY2FsbChTb3J0YWJsZS5kcmFnZ2VkLnBhcmVudE5vZGVbZXhwYW5kb10sIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFksIGV2dCwgdG91Y2hFdnQkMSwgYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwpICE9PSAnY29udGludWUnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY3JvbGxCeShhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS5lbCwgc2Nyb2xsT2Zmc2V0WCwgc2Nyb2xsT2Zmc2V0WSk7XG4gICAgICAgIH0uYmluZCh7XG4gICAgICAgICAgbGF5ZXI6IGxheWVyc091dFxuICAgICAgICB9KSwgMjQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxheWVyc091dCsrO1xuICB9IHdoaWxlIChvcHRpb25zLmJ1YmJsZVNjcm9sbCAmJiBjdXJyZW50UGFyZW50ICE9PSB3aW5TY3JvbGxlciAmJiAoY3VycmVudFBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGN1cnJlbnRQYXJlbnQsIGZhbHNlKSkpO1xuXG4gIHNjcm9sbGluZyA9IHNjcm9sbFRoaXNJbnN0YW5jZTsgLy8gaW4gY2FzZSBhbm90aGVyIGZ1bmN0aW9uIGNhdGNoZXMgc2Nyb2xsaW5nIGFzIGZhbHNlIGluIGJldHdlZW4gd2hlbiBpdCBpcyBub3Rcbn0sIDMwKTtcblxudmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKF9yZWYpIHtcbiAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsXG4gICAgICBwdXRTb3J0YWJsZSA9IF9yZWYucHV0U29ydGFibGUsXG4gICAgICBkcmFnRWwgPSBfcmVmLmRyYWdFbCxcbiAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZi5hY3RpdmVTb3J0YWJsZSxcbiAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LFxuICAgICAgaGlkZUdob3N0Rm9yVGFyZ2V0ID0gX3JlZi5oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgICB1bmhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYudW5oaWRlR2hvc3RGb3JUYXJnZXQ7XG4gIGlmICghb3JpZ2luYWxFdmVudCkgcmV0dXJuO1xuICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlO1xuICBoaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgdmFyIHRvdWNoID0gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/IG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBvcmlnaW5hbEV2ZW50O1xuICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcbiAgdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcblxuICBpZiAodG9Tb3J0YWJsZSAmJiAhdG9Tb3J0YWJsZS5lbC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdzcGlsbCcpO1xuICAgIHRoaXMub25TcGlsbCh7XG4gICAgICBkcmFnRWw6IGRyYWdFbCxcbiAgICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZVxuICAgIH0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZXZlcnQoKSB7fVxuXG5SZXZlcnQucHJvdG90eXBlID0ge1xuICBzdGFydEluZGV4OiBudWxsLFxuICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmMikge1xuICAgIHZhciBvbGREcmFnZ2FibGVJbmRleCA9IF9yZWYyLm9sZERyYWdnYWJsZUluZGV4O1xuICAgIHRoaXMuc3RhcnRJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICB9LFxuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWYzKSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWYzLmRyYWdFbCxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZTtcbiAgICB0aGlzLnNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgaWYgKHB1dFNvcnRhYmxlKSB7XG4gICAgICBwdXRTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFNpYmxpbmcgPSBnZXRDaGlsZCh0aGlzLnNvcnRhYmxlLmVsLCB0aGlzLnN0YXJ0SW5kZXgsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAobmV4dFNpYmxpbmcpIHtcbiAgICAgIHRoaXMuc29ydGFibGUuZWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgbmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNvcnRhYmxlLmVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgfVxuXG4gICAgdGhpcy5zb3J0YWJsZS5hbmltYXRlQWxsKCk7XG5cbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICB9XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5cbl9leHRlbmRzKFJldmVydCwge1xuICBwbHVnaW5OYW1lOiAncmV2ZXJ0T25TcGlsbCdcbn0pO1xuXG5mdW5jdGlvbiBSZW1vdmUoKSB7fVxuXG5SZW1vdmUucHJvdG90eXBlID0ge1xuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWY0KSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWY0LmRyYWdFbCxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmNC5wdXRTb3J0YWJsZTtcbiAgICB2YXIgcGFyZW50U29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgIHBhcmVudFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIGRyYWdFbC5wYXJlbnROb2RlICYmIGRyYWdFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRyYWdFbCk7XG4gICAgcGFyZW50U29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICB9LFxuICBkcm9wOiBkcm9wXG59O1xuXG5fZXh0ZW5kcyhSZW1vdmUsIHtcbiAgcGx1Z2luTmFtZTogJ3JlbW92ZU9uU3BpbGwnXG59KTtcblxudmFyIGxhc3RTd2FwRWw7XG5cbmZ1bmN0aW9uIFN3YXBQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIFN3YXAoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHN3YXBDbGFzczogJ3NvcnRhYmxlLXN3YXAtaGlnaGxpZ2h0J1xuICAgIH07XG4gIH1cblxuICBTd2FwLnByb3RvdHlwZSA9IHtcbiAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ0VsID0gX3JlZi5kcmFnRWw7XG4gICAgICBsYXN0U3dhcEVsID0gZHJhZ0VsO1xuICAgIH0sXG4gICAgZHJhZ092ZXJWYWxpZDogZnVuY3Rpb24gZHJhZ092ZXJWYWxpZChfcmVmMikge1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IF9yZWYyLmNvbXBsZXRlZCxcbiAgICAgICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICAgICAgb25Nb3ZlID0gX3JlZjIub25Nb3ZlLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjIuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgY2hhbmdlZCA9IF9yZWYyLmNoYW5nZWQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjIuY2FuY2VsO1xuICAgICAgaWYgKCFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnN3YXApIHJldHVybjtcbiAgICAgIHZhciBlbCA9IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IGVsKSB7XG4gICAgICAgIHZhciBwcmV2U3dhcEVsID0gbGFzdFN3YXBFbDtcblxuICAgICAgICBpZiAob25Nb3ZlKHRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3ModGFyZ2V0LCBvcHRpb25zLnN3YXBDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgbGFzdFN3YXBFbCA9IHRhcmdldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2U3dhcEVsICYmIHByZXZTd2FwRWwgIT09IGxhc3RTd2FwRWwpIHtcbiAgICAgICAgICB0b2dnbGVDbGFzcyhwcmV2U3dhcEVsLCBvcHRpb25zLnN3YXBDbGFzcywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoYW5nZWQoKTtcbiAgICAgIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcChfcmVmMykge1xuICAgICAgdmFyIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjMuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZSxcbiAgICAgICAgICBkcmFnRWwgPSBfcmVmMy5kcmFnRWw7XG4gICAgICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIGxhc3RTd2FwRWwgJiYgdG9nZ2xlQ2xhc3MobGFzdFN3YXBFbCwgb3B0aW9ucy5zd2FwQ2xhc3MsIGZhbHNlKTtcblxuICAgICAgaWYgKGxhc3RTd2FwRWwgJiYgKG9wdGlvbnMuc3dhcCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5vcHRpb25zLnN3YXApKSB7XG4gICAgICAgIGlmIChkcmFnRWwgIT09IGxhc3RTd2FwRWwpIHtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgICAgICAgIGlmICh0b1NvcnRhYmxlICE9PSBhY3RpdmVTb3J0YWJsZSkgYWN0aXZlU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICAgICAgc3dhcE5vZGVzKGRyYWdFbCwgbGFzdFN3YXBFbCk7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgICAgaWYgKHRvU29ydGFibGUgIT09IGFjdGl2ZVNvcnRhYmxlKSBhY3RpdmVTb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmc6IGZ1bmN0aW9uIG51bGxpbmcoKSB7XG4gICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhTd2FwLCB7XG4gICAgcGx1Z2luTmFtZTogJ3N3YXAnLFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3dhcEl0ZW06IGxhc3RTd2FwRWxcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICB2YXIgcDEgPSBuMS5wYXJlbnROb2RlLFxuICAgICAgcDIgPSBuMi5wYXJlbnROb2RlLFxuICAgICAgaTEsXG4gICAgICBpMjtcbiAgaWYgKCFwMSB8fCAhcDIgfHwgcDEuaXNFcXVhbE5vZGUobjIpIHx8IHAyLmlzRXF1YWxOb2RlKG4xKSkgcmV0dXJuO1xuICBpMSA9IGluZGV4KG4xKTtcbiAgaTIgPSBpbmRleChuMik7XG5cbiAgaWYgKHAxLmlzRXF1YWxOb2RlKHAyKSAmJiBpMSA8IGkyKSB7XG4gICAgaTIrKztcbiAgfVxuXG4gIHAxLmluc2VydEJlZm9yZShuMiwgcDEuY2hpbGRyZW5baTFdKTtcbiAgcDIuaW5zZXJ0QmVmb3JlKG4xLCBwMi5jaGlsZHJlbltpMl0pO1xufVxuXG52YXIgbXVsdGlEcmFnRWxlbWVudHMgPSBbXSxcbiAgICBtdWx0aURyYWdDbG9uZXMgPSBbXSxcbiAgICBsYXN0TXVsdGlEcmFnU2VsZWN0LFxuICAgIC8vIGZvciBzZWxlY3Rpb24gd2l0aCBtb2RpZmllciBrZXkgZG93biAoU0hJRlQpXG5tdWx0aURyYWdTb3J0YWJsZSxcbiAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlLFxuICAgIC8vIEluaXRpYWwgbXVsdGktZHJhZyBmb2xkIHdoZW4gZHJhZyBzdGFydGVkXG5mb2xkaW5nID0gZmFsc2UsXG4gICAgLy8gRm9sZGluZyBhbnkgb3RoZXIgdGltZVxuZHJhZ1N0YXJ0ZWQgPSBmYWxzZSxcbiAgICBkcmFnRWwkMSxcbiAgICBjbG9uZXNGcm9tUmVjdCxcbiAgICBjbG9uZXNIaWRkZW47XG5cbmZ1bmN0aW9uIE11bHRpRHJhZ1BsdWdpbigpIHtcbiAgZnVuY3Rpb24gTXVsdGlEcmFnKHNvcnRhYmxlKSB7XG4gICAgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG4gICAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNvcnRhYmxlLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvbihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgIH1cblxuICAgIG9uKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuX2NoZWNrS2V5RG93bik7XG4gICAgb24oZG9jdW1lbnQsICdrZXl1cCcsIHRoaXMuX2NoZWNrS2V5VXApO1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICBzZWxlY3RlZENsYXNzOiAnc29ydGFibGUtc2VsZWN0ZWQnLFxuICAgICAgbXVsdGlEcmFnS2V5OiBudWxsLFxuICAgICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgICB2YXIgZGF0YSA9ICcnO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgZGF0YSArPSAoIWkgPyAnJyA6ICcsICcpICsgbXVsdGlEcmFnRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gZHJhZ0VsLnRleHRDb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgTXVsdGlEcmFnLnByb3RvdHlwZSA9IHtcbiAgICBtdWx0aURyYWdLZXlEb3duOiBmYWxzZSxcbiAgICBpc011bHRpRHJhZzogZmFsc2UsXG4gICAgZGVsYXlTdGFydEdsb2JhbDogZnVuY3Rpb24gZGVsYXlTdGFydEdsb2JhbChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ2dlZCA9IF9yZWYuZHJhZ0VsO1xuICAgICAgZHJhZ0VsJDEgPSBkcmFnZ2VkO1xuICAgIH0sXG4gICAgZGVsYXlFbmRlZDogZnVuY3Rpb24gZGVsYXlFbmRlZCgpIHtcbiAgICAgIHRoaXMuaXNNdWx0aURyYWcgPSB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSk7XG4gICAgfSxcbiAgICBzZXR1cENsb25lOiBmdW5jdGlvbiBzZXR1cENsb25lKF9yZWYyKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMi5zb3J0YWJsZSxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmMi5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMucHVzaChjbG9uZShtdWx0aURyYWdFbGVtZW50c1tpXSkpO1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uc29ydGFibGVJbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzW2ldLnNvcnRhYmxlSW5kZXg7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG4gICAgICAgIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHNbaV0gPT09IGRyYWdFbCQxICYmIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoX3JlZjMpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYzLnNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYzLnJvb3RFbCxcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmMy5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjMuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKHRydWUsIHJvb3RFbCk7XG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdjbG9uZScpO1xuICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93Q2xvbmU6IGZ1bmN0aW9uIHNob3dDbG9uZShfcmVmNCkge1xuICAgICAgdmFyIGNsb25lTm93U2hvd24gPSBfcmVmNC5jbG9uZU5vd1Nob3duLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY0LnJvb3RFbCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmNC5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyhmYWxzZSwgcm9vdEVsKTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJycpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd1Nob3duKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSBmYWxzZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgaGlkZUNsb25lOiBmdW5jdGlvbiBoaWRlQ2xvbmUoX3JlZjUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY1LnNvcnRhYmxlLFxuICAgICAgICAgIGNsb25lTm93SGlkZGVuID0gX3JlZjUuY2xvbmVOb3dIaWRkZW4sXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjUuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgY3NzKGNsb25lLCAnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUgJiYgY2xvbmUucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsb25lTm93SGlkZGVuKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSB0cnVlO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBkcmFnU3RhcnRHbG9iYWw6IGZ1bmN0aW9uIGRyYWdTdGFydEdsb2JhbChfcmVmNikge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjYuc29ydGFibGU7XG5cbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZyAmJiBtdWx0aURyYWdTb3J0YWJsZSkge1xuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZS5tdWx0aURyYWcuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG4gICAgICB9XG5cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICB9KTsgLy8gU29ydCBtdWx0aS1kcmFnIGVsZW1lbnRzXG5cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzID0gbXVsdGlEcmFnRWxlbWVudHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5zb3J0YWJsZUluZGV4IC0gYi5zb3J0YWJsZUluZGV4O1xuICAgICAgfSk7XG4gICAgICBkcmFnU3RhcnRlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkcmFnU3RhcnRlZDogZnVuY3Rpb24gZHJhZ1N0YXJ0ZWQoX3JlZjcpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNy5zb3J0YWJsZTtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNvcnQpIHtcbiAgICAgICAgLy8gQ2FwdHVyZSByZWN0cyxcbiAgICAgICAgLy8gaGlkZSBtdWx0aSBkcmFnIGVsZW1lbnRzIChieSBwb3NpdGlvbmluZyB0aGVtIGFic29sdXRlKSxcbiAgICAgICAgLy8gc2V0IG11bHRpIGRyYWcgZWxlbWVudHMgcmVjdHMgdG8gZHJhZ1JlY3QsXG4gICAgICAgIC8vIHNob3cgbXVsdGkgZHJhZyBlbGVtZW50cyxcbiAgICAgICAgLy8gYW5pbWF0ZSB0byByZWN0cyxcbiAgICAgICAgLy8gdW5zZXQgcmVjdHMgJiByZW1vdmUgZnJvbSBET01cbiAgICAgICAgc29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIGNzcyhtdWx0aURyYWdFbGVtZW50LCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgICBpbml0aWFsRm9sZGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc29ydGFibGUuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgdW5zZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFJlbW92ZSBhbGwgYXV4aWxpYXJ5IG11bHRpZHJhZyBpdGVtcyBmcm9tIGVsLCBpZiBzb3J0aW5nIGVuYWJsZWRcblxuXG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkcmFnT3ZlcjogZnVuY3Rpb24gZHJhZ092ZXIoX3JlZjgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmOC50YXJnZXQsXG4gICAgICAgICAgY29tcGxldGVkID0gX3JlZjguY29tcGxldGVkLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWY4LmNhbmNlbDtcblxuICAgICAgaWYgKGZvbGRpbmcgJiYgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YodGFyZ2V0KSkge1xuICAgICAgICBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJldmVydDogZnVuY3Rpb24gcmV2ZXJ0KF9yZWY5KSB7XG4gICAgICB2YXIgZnJvbVNvcnRhYmxlID0gX3JlZjkuZnJvbVNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY5LnJvb3RFbCxcbiAgICAgICAgICBzb3J0YWJsZSA9IF9yZWY5LnNvcnRhYmxlLFxuICAgICAgICAgIGRyYWdSZWN0ID0gX3JlZjkuZHJhZ1JlY3Q7XG5cbiAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIFNldHVwIHVuZm9sZCBhbmltYXRpb25cbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgIHNvcnRhYmxlLmFkZEFuaW1hdGlvblN0YXRlKHtcbiAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgIHJlY3Q6IGZvbGRpbmcgPyBnZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpIDogZHJhZ1JlY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5mcm9tUmVjdCA9IGRyYWdSZWN0O1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5yZW1vdmVBbmltYXRpb25TdGF0ZShtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoIXRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSwgcm9vdEVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQ29tcGxldGVkOiBmdW5jdGlvbiBkcmFnT3ZlckNvbXBsZXRlZChfcmVmMTApIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYxMC5zb3J0YWJsZSxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjEwLmlzT3duZXIsXG4gICAgICAgICAgaW5zZXJ0aW9uID0gX3JlZjEwLmluc2VydGlvbixcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMC5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMC5wYXJlbnRFbCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMC5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTsgLy8gSWYgbGVhdmluZyBzb3J0OmZhbHNlIHJvb3QsIG9yIGFscmVhZHkgZm9sZGluZyAtIEZvbGQgdG8gbmV3IGxvY2F0aW9uXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEgJiYgKGZvbGRpbmcgfHwgIWlzT3duZXIgJiYgIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc29ydCAmJiAhcHV0U29ydGFibGUpKSB7XG4gICAgICAgICAgLy8gRm9sZDogU2V0IGFsbCBtdWx0aSBkcmFnIGVsZW1lbnRzJ3MgcmVjdHMgdG8gZHJhZ0VsJ3MgcmVjdCB3aGVuIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGludmlzaWJsZVxuICAgICAgICAgIHZhciBkcmFnUmVjdEFic29sdXRlID0gZ2V0UmVjdChkcmFnRWwkMSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0UmVjdChtdWx0aURyYWdFbGVtZW50LCBkcmFnUmVjdEFic29sdXRlKTsgLy8gTW92ZSBlbGVtZW50KHMpIHRvIGVuZCBvZiBwYXJlbnRFbCBzbyB0aGF0IGl0IGRvZXMgbm90IGludGVyZmVyZSB3aXRoIG11bHRpLWRyYWcgY2xvbmVzIGluc2VydGlvbiBpZiB0aGV5IGFyZSBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gd2hpbGUgZm9sZGluZywgYW5kIHNvIHRoYXQgd2UgY2FuIGNhcHR1cmUgdGhlbSBhZ2FpbiBiZWNhdXNlIG9sZCBzb3J0YWJsZSB3aWxsIG5vIGxvbmdlciBiZSBmcm9tU29ydGFibGVcblxuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9sZGluZyA9IHRydWU7XG4gICAgICAgIH0gLy8gQ2xvbmVzIG11c3QgYmUgc2hvd24gKGFuZCBjaGVjayB0byByZW1vdmUgbXVsdGkgZHJhZ3MpIGFmdGVyIGZvbGRpbmcgd2hlbiBpbnRlcmZlcmluZyBtdWx0aURyYWdFbGVtZW50cyBhcmUgbW92ZWQgb3V0XG5cblxuICAgICAgICBpZiAoIWlzT3duZXIpIHtcbiAgICAgICAgICAvLyBPbmx5IHJlbW92ZSBpZiBub3QgZm9sZGluZyAoZm9sZGluZyB3aWxsIHJlbW92ZSB0aGVtIGFueXdheXMpXG4gICAgICAgICAgaWYgKCFmb2xkaW5nKSB7XG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgY2xvbmVzSGlkZGVuQmVmb3JlID0gY2xvbmVzSGlkZGVuO1xuXG4gICAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5fc2hvd0Nsb25lKHNvcnRhYmxlKTsgLy8gVW5mb2xkIGFuaW1hdGlvbiBmb3IgY2xvbmVzIGlmIHNob3dpbmcgZnJvbSBoaWRkZW5cblxuXG4gICAgICAgICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWNsb25lc0hpZGRlbiAmJiBjbG9uZXNIaWRkZW5CZWZvcmUpIHtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjbG9uZSxcbiAgICAgICAgICAgICAgICAgIHJlY3Q6IGNsb25lc0Zyb21SZWN0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2xvbmUuZnJvbVJlY3QgPSBjbG9uZXNGcm9tUmVjdDtcbiAgICAgICAgICAgICAgICBjbG9uZS50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZShfcmVmMTEpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IF9yZWYxMS5kcmFnUmVjdCxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjExLmlzT3duZXIsXG4gICAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMTEuYWN0aXZlU29ydGFibGU7XG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWlzT3duZXIgJiYgYWN0aXZlU29ydGFibGUubXVsdGlEcmFnLmlzTXVsdGlEcmFnKSB7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0ID0gX2V4dGVuZHMoe30sIGRyYWdSZWN0KTtcbiAgICAgICAgdmFyIGRyYWdNYXRyaXggPSBtYXRyaXgoZHJhZ0VsJDEsIHRydWUpO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC50b3AgLT0gZHJhZ01hdHJpeC5mO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC5sZWZ0IC09IGRyYWdNYXRyaXguZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICBpZiAoZm9sZGluZykge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYxMikge1xuICAgICAgdmFyIGV2dCA9IF9yZWYxMi5vcmlnaW5hbEV2ZW50LFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYxMi5yb290RWwsXG4gICAgICAgICAgcGFyZW50RWwgPSBfcmVmMTIucGFyZW50RWwsXG4gICAgICAgICAgc29ydGFibGUgPSBfcmVmMTIuc29ydGFibGUsXG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZjEyLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgICAgICBvbGRJbmRleCA9IF9yZWYxMi5vbGRJbmRleCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMi5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICAgIGlmICghZXZ0KSByZXR1cm47XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBjaGlsZHJlbiA9IHBhcmVudEVsLmNoaWxkcmVuOyAvLyBNdWx0aS1kcmFnIHNlbGVjdGlvblxuXG4gICAgICBpZiAoIWRyYWdTdGFydGVkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm11bHRpRHJhZ0tleSAmJiAhdGhpcy5tdWx0aURyYWdLZXlEb3duKSB7XG4gICAgICAgICAgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCQxLCBvcHRpb25zLnNlbGVjdGVkQ2xhc3MsICF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpO1xuXG4gICAgICAgIGlmICghfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChkcmFnRWwkMSk7XG4gICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgdGFyZ2V0RWw6IGRyYWdFbCQxLFxuICAgICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICAgIH0pOyAvLyBNb2RpZmllciBhY3RpdmF0ZWQsIHNlbGVjdCBmcm9tIGxhc3QgdG8gZHJhZ0VsXG5cbiAgICAgICAgICBpZiAoZXZ0LnNoaWZ0S2V5ICYmIGxhc3RNdWx0aURyYWdTZWxlY3QgJiYgc29ydGFibGUuZWwuY29udGFpbnMobGFzdE11bHRpRHJhZ1NlbGVjdCkpIHtcbiAgICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBpbmRleChsYXN0TXVsdGlEcmFnU2VsZWN0KSxcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleChkcmFnRWwkMSk7XG5cbiAgICAgICAgICAgIGlmICh+bGFzdEluZGV4ICYmIH5jdXJyZW50SW5kZXggJiYgbGFzdEluZGV4ICE9PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgLy8gTXVzdCBpbmNsdWRlIGxhc3RNdWx0aURyYWdTZWxlY3QgKHNlbGVjdCBpdCksIGluIGNhc2UgbW9kaWZpZWQgc2VsZWN0aW9uIGZyb20gbm8gc2VsZWN0aW9uXG4gICAgICAgICAgICAgIC8vIChidXQgcHJldmlvdXMgc2VsZWN0aW9uIGV4aXN0ZWQpXG4gICAgICAgICAgICAgIHZhciBuLCBpO1xuXG4gICAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpID0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgIG4gPSBjdXJyZW50SW5kZXg7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICBuID0gbGFzdEluZGV4ICsgMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGNoaWxkcmVuW2ldKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoY2hpbGRyZW5baV0sIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGNoaWxkcmVuW2ldLFxuICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RNdWx0aURyYWdTZWxlY3QgPSBkcmFnRWwkMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpLCAxKTtcbiAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gbnVsbDtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBNdWx0aS1kcmFnIGRyb3BcblxuXG4gICAgICBpZiAoZHJhZ1N0YXJ0ZWQgJiYgdGhpcy5pc011bHRpRHJhZykge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7IC8vIERvIG5vdCBcInVuZm9sZFwiIGFmdGVyIGFyb3VuZCBkcmFnRWwgaWYgcmV2ZXJ0ZWRcblxuICAgICAgICBpZiAoKHBhcmVudEVsW2V4cGFuZG9dLm9wdGlvbnMuc29ydCB8fCBwYXJlbnRFbCAhPT0gcm9vdEVsKSAmJiBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwkMSksXG4gICAgICAgICAgICAgIG11bHRpRHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsJDEsICc6bm90KC4nICsgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICAgIGlmICghaW5pdGlhbEZvbGRpbmcgJiYgb3B0aW9ucy5hbmltYXRpb24pIGRyYWdFbCQxLnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcblxuICAgICAgICAgIGlmICghaW5pdGlhbEZvbGRpbmcpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICBkcmFnRWwkMS5mcm9tUmVjdCA9IGRyYWdSZWN0O1xuICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IGZvbGRpbmcgPyBnZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpIDogZHJhZ1JlY3Q7XG4gICAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LmZyb21SZWN0ID0gcmVjdDsgLy8gUHJlcGFyZSB1bmZvbGQgYW5pbWF0aW9uXG5cbiAgICAgICAgICAgICAgICAgIHRvU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHJlY3Q6IHJlY3RcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IC8vIE11bHRpIGRyYWcgZWxlbWVudHMgYXJlIG5vdCBuZWNlc3NhcmlseSByZW1vdmVkIGZyb20gdGhlIERPTSBvbiBkcm9wLCBzbyB0byByZWluc2VydFxuICAgICAgICAgICAgLy8gcHJvcGVybHkgdGhleSBtdXN0IGFsbCBiZSByZW1vdmVkXG5cblxuICAgICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSkge1xuICAgICAgICAgICAgICAgIHBhcmVudEVsLmluc2VydEJlZm9yZShtdWx0aURyYWdFbGVtZW50LCBjaGlsZHJlblttdWx0aURyYWdJbmRleF0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXgrKztcbiAgICAgICAgICAgIH0pOyAvLyBJZiBpbml0aWFsIGZvbGRpbmcgaXMgZG9uZSwgdGhlIGVsZW1lbnRzIG1heSBoYXZlIGNoYW5nZWQgcG9zaXRpb24gYmVjYXVzZSB0aGV5IGFyZSBub3dcbiAgICAgICAgICAgIC8vIHVuZm9sZGluZyBhcm91bmQgZHJhZ0VsLCBldmVuIHRob3VnaCBkcmFnRWwgbWF5IG5vdCBoYXZlIGhpcyBpbmRleCBjaGFuZ2VkLCBzbyB1cGRhdGUgZXZlbnRcbiAgICAgICAgICAgIC8vIG11c3QgYmUgZmlyZWQgaGVyZSBhcyBTb3J0YWJsZSB3aWxsIG5vdC5cblxuICAgICAgICAgICAgaWYgKG9sZEluZGV4ID09PSBpbmRleChkcmFnRWwkMSkpIHtcbiAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleCAhPT0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAodXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCd1cGRhdGUnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gTXVzdCBiZSBkb25lIGFmdGVyIGNhcHR1cmluZyBpbmRpdmlkdWFsIHJlY3RzIChzY3JvbGwgYmFyKVxuXG5cbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICB9IC8vIFJlbW92ZSBjbG9uZXMgaWYgbmVjZXNzYXJ5XG5cblxuICAgICAgaWYgKHJvb3RFbCA9PT0gcGFyZW50RWwgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgY2xvbmUucGFyZW50Tm9kZSAmJiBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBudWxsaW5nR2xvYmFsOiBmdW5jdGlvbiBudWxsaW5nR2xvYmFsKCkge1xuICAgICAgdGhpcy5pc011bHRpRHJhZyA9IGRyYWdTdGFydGVkID0gZmFsc2U7XG4gICAgICBtdWx0aURyYWdDbG9uZXMubGVuZ3RoID0gMDtcbiAgICB9LFxuICAgIGRlc3Ryb3lHbG9iYWw6IGZ1bmN0aW9uIGRlc3Ryb3lHbG9iYWwoKSB7XG4gICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuXG4gICAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fY2hlY2tLZXlEb3duKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5fY2hlY2tLZXlVcCk7XG4gICAgfSxcbiAgICBfZGVzZWxlY3RNdWx0aURyYWc6IGZ1bmN0aW9uIF9kZXNlbGVjdE11bHRpRHJhZyhldnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZHJhZ1N0YXJ0ZWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZHJhZ1N0YXJ0ZWQpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiBzZWxlY3Rpb24gaXMgaW4gdGhpcyBzb3J0YWJsZVxuXG4gICAgICBpZiAobXVsdGlEcmFnU29ydGFibGUgIT09IHRoaXMuc29ydGFibGUpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiB0YXJnZXQgaXMgbm90IGl0ZW0gaW4gdGhpcyBzb3J0YWJsZVxuXG4gICAgICBpZiAoZXZ0ICYmIGNsb3Nlc3QoZXZ0LnRhcmdldCwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5zb3J0YWJsZS5lbCwgZmFsc2UpKSByZXR1cm47IC8vIE9ubHkgZGVzZWxlY3QgaWYgbGVmdCBjbGlja1xuXG4gICAgICBpZiAoZXZ0ICYmIGV2dC5idXR0b24gIT09IDApIHJldHVybjtcblxuICAgICAgd2hpbGUgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgZWwgPSBtdWx0aURyYWdFbGVtZW50c1swXTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnNoaWZ0KCk7XG4gICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLnNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbDogdGhpcy5zb3J0YWJsZS5lbCxcbiAgICAgICAgICBuYW1lOiAnZGVzZWxlY3QnLFxuICAgICAgICAgIHRhcmdldEVsOiBlbCxcbiAgICAgICAgICBvcmlnaW5hbEV2dDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2NoZWNrS2V5RG93bjogZnVuY3Rpb24gX2NoZWNrS2V5RG93bihldnQpIHtcbiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGlEcmFnS2V5RG93biA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tLZXlVcDogZnVuY3Rpb24gX2NoZWNrS2V5VXAoZXZ0KSB7XG4gICAgICBpZiAoZXZ0LmtleSA9PT0gdGhpcy5vcHRpb25zLm11bHRpRHJhZ0tleSkge1xuICAgICAgICB0aGlzLm11bHRpRHJhZ0tleURvd24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhNdWx0aURyYWcsIHtcbiAgICAvLyBTdGF0aWMgbWV0aG9kcyAmIHByb3BlcnRpZXNcbiAgICBwbHVnaW5OYW1lOiAnbXVsdGlEcmFnJyxcbiAgICB1dGlsczoge1xuICAgICAgLyoqXG4gICAgICAgKiBTZWxlY3RzIHRoZSBwcm92aWRlZCBtdWx0aS1kcmFnIGl0ZW1cbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICBUaGUgZWxlbWVudCB0byBiZSBzZWxlY3RlZFxuICAgICAgICovXG4gICAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdChlbCkge1xuICAgICAgICB2YXIgc29ydGFibGUgPSBlbC5wYXJlbnROb2RlW2V4cGFuZG9dO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihlbCkpIHJldHVybjtcblxuICAgICAgICBpZiAobXVsdGlEcmFnU29ydGFibGUgJiYgbXVsdGlEcmFnU29ydGFibGUgIT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnU29ydGFibGUubXVsdGlEcmFnLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuXG4gICAgICAgICAgbXVsdGlEcmFnU29ydGFibGUgPSBzb3J0YWJsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGVsKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogRGVzZWxlY3RzIHRoZSBwcm92aWRlZCBtdWx0aS1kcmFnIGl0ZW1cbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICBUaGUgZWxlbWVudCB0byBiZSBkZXNlbGVjdGVkXG4gICAgICAgKi9cbiAgICAgIGRlc2VsZWN0OiBmdW5jdGlvbiBkZXNlbGVjdChlbCkge1xuICAgICAgICB2YXIgc29ydGFibGUgPSBlbC5wYXJlbnROb2RlW2V4cGFuZG9dLFxuICAgICAgICAgICAgaW5kZXggPSBtdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGVsKTtcbiAgICAgICAgaWYgKCFzb3J0YWJsZSB8fCAhc29ydGFibGUub3B0aW9ucy5tdWx0aURyYWcgfHwgIX5pbmRleCkgcmV0dXJuO1xuICAgICAgICB0b2dnbGVDbGFzcyhlbCwgc29ydGFibGUub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBldmVudFByb3BlcnRpZXM6IGZ1bmN0aW9uIGV2ZW50UHJvcGVydGllcygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgb2xkSW5kaWNpZXMgPSBbXSxcbiAgICAgICAgICBuZXdJbmRpY2llcyA9IFtdO1xuICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICBvbGRJbmRpY2llcy5wdXNoKHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgIGluZGV4OiBtdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXhcbiAgICAgICAgfSk7IC8vIG11bHRpRHJhZ0VsZW1lbnRzIHdpbGwgYWxyZWFkeSBiZSBzb3J0ZWQgaWYgZm9sZGluZ1xuXG4gICAgICAgIHZhciBuZXdJbmRleDtcblxuICAgICAgICBpZiAoZm9sZGluZyAmJiBtdWx0aURyYWdFbGVtZW50ICE9PSBkcmFnRWwkMSkge1xuICAgICAgICAgIG5ld0luZGV4ID0gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9sZGluZykge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCwgJzpub3QoLicgKyBfdGhpczMub3B0aW9ucy5zZWxlY3RlZENsYXNzICsgJyknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdJbmRleCA9IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3SW5kaWNpZXMucHVzaCh7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICBpbmRleDogbmV3SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBfdG9Db25zdW1hYmxlQXJyYXkobXVsdGlEcmFnRWxlbWVudHMpLFxuICAgICAgICBjbG9uZXM6IFtdLmNvbmNhdChtdWx0aURyYWdDbG9uZXMpLFxuICAgICAgICBvbGRJbmRpY2llczogb2xkSW5kaWNpZXMsXG4gICAgICAgIG5ld0luZGljaWVzOiBuZXdJbmRpY2llc1xuICAgICAgfTtcbiAgICB9LFxuICAgIG9wdGlvbkxpc3RlbmVyczoge1xuICAgICAgbXVsdGlEcmFnS2V5OiBmdW5jdGlvbiBtdWx0aURyYWdLZXkoa2V5KSB7XG4gICAgICAgIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdjdHJsJykge1xuICAgICAgICAgIGtleSA9ICdDb250cm9sJztcbiAgICAgICAgfSBlbHNlIGlmIChrZXkubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGtleSA9IGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHIoMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGluc2VydE11bHRpRHJhZ0VsZW1lbnRzKGNsb25lc0luc2VydGVkLCByb290RWwpIHtcbiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgIHZhciB0YXJnZXQgPSByb290RWwuY2hpbGRyZW5bbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICsgKGNsb25lc0luc2VydGVkID8gTnVtYmVyKGkpIDogMCldO1xuXG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShtdWx0aURyYWdFbGVtZW50LCB0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogSW5zZXJ0IG11bHRpLWRyYWcgY2xvbmVzXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IGVsZW1lbnRzSW5zZXJ0ZWQgIFdoZXRoZXIgdGhlIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGluc2VydGVkXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gcm9vdEVsXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRNdWx0aURyYWdDbG9uZXMoZWxlbWVudHNJbnNlcnRlZCwgcm9vdEVsKSB7XG4gIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSwgaSkge1xuICAgIHZhciB0YXJnZXQgPSByb290RWwuY2hpbGRyZW5bY2xvbmUuc29ydGFibGVJbmRleCArIChlbGVtZW50c0luc2VydGVkID8gTnVtYmVyKGkpIDogMCldO1xuXG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShjbG9uZSwgdGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpIHtcbiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgIG11bHRpRHJhZ0VsZW1lbnQucGFyZW50Tm9kZSAmJiBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gIH0pO1xufVxuXG5Tb3J0YWJsZS5tb3VudChuZXcgQXV0b1Njcm9sbFBsdWdpbigpKTtcblNvcnRhYmxlLm1vdW50KFJlbW92ZSwgUmV2ZXJ0KTtcblxuZXhwb3J0IGRlZmF1bHQgU29ydGFibGU7XG5leHBvcnQgeyBNdWx0aURyYWdQbHVnaW4gYXMgTXVsdGlEcmFnLCBTb3J0YWJsZSwgU3dhcFBsdWdpbiBhcyBTd2FwIH07XG4iLCJpbXBvcnQgU29ydGFibGUgZnJvbSAnc29ydGFibGVqcydcclxuaW1wb3J0IHskLCBwb3B1cCwgcG9zdH0gZnJvbSAnLi4vY29tbW9uJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydGFibGUoY29udGFpbmVyU2VsZWN0b3IsIGVsU2VsZWN0b3IsIG1vZGVsKSB7XHJcblxyXG4gIGxldCBjb250YWluZXIgPSAkKGNvbnRhaW5lclNlbGVjdG9yKVswXTtcclxuICAvLyBkZWJ1Z2dlclxyXG4gIGlmIChjb250YWluZXIpIHtcclxuICAgIC8vIGxldCBlbHMgPSAkKGVsU2VsZWN0b3IpO1xyXG4gICAgbGV0IHNvcnRhYmxlID0gU29ydGFibGUuY3JlYXRlKGNvbnRhaW5lciwge1xyXG4gICAgICBhbmltYXRpb246IDE1MCxcclxuICAgICAgb25FbmQ6IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICBsZXQgb2xkSSA9IGV2dC5vbGRJbmRleFxyXG4gICAgICAgIGxldCBuZXdJID0gZXZ0Lm5ld0luZGV4XHJcbiAgICAgICAgLy8gbGV0IHF1ZXN0aW9ucyA9IF9xdWVzdGlvbi5xdWVzdGlvbnMoKVxyXG4gICAgICAgIGlmIChvbGRJID4gbmV3SSkge1xyXG4gICAgICAgICAgc29ydChvbGRJKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzb3J0KG5ld0kpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhc3luYyBmdW5jdGlvbiBzb3J0KHVwVG9RZXN0aW9uTnVtYmVyKSB7XHJcbiAgICAgICAgICBsZXQgZWxzID0gJChlbFNlbGVjdG9yKTtcclxuICAgICAgICAgIGxldCBxdWVzdGlvbnNFbHMgPSBbXS5tYXAuY2FsbChlbHMsIGZ1bmN0aW9uIChlbCwgaSkge1xyXG4gICAgICAgICAgICAgIGlmIChpIC0gMSA8IHVwVG9RZXN0aW9uTnVtYmVyKSByZXR1cm4gZWxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG5cclxuICAgICAgICAgIGxldCB0b0NoYW5nZSA9IHF1ZXN0aW9uc0Vscy5tYXAoKGVsKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbC5pZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KGAvYWRtaW5zYy8ke21vZGVsfS9zb3J0YCwge3RvQ2hhbmdlfSlcclxuICAgICAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgICAgICAgaWYgKHJlcy5tc2cpIHtcclxuICAgICAgICAgICAgcG9wdXAuc2hvdyhyZXMubXNnKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcXVlc3Rpb25zRWxzLm1hcCgoZWwsIGkpID0+IHtcclxuICAgICAgICAgICAgJChlbCkuZmluZCgnLnNvcnQnKS5pbm5lclRleHQgPSBpICsgMVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbn0iLCJpbXBvcnQgeyQsIHBvcHVwLCBwb3N0fSBmcm9tICcuLi8uLi8uLi9jb21tb24nXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBfdGVzdCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5tb2RlbCA9ICdvcGVudGVzdCdcclxuICB9XHJcblxyXG4gIGFzeW5jIGNyZWF0ZSgpIHtcclxuICAgIGxldCB0ZXN0ID0gX3Rlc3Quc2VydmVyTW9kZWwoKVxyXG4gICAgdGVzdC5pZCA9IDBcclxuICAgIHRlc3QuaXNUZXN0ID0gMVxyXG4gICAgZGVidWdnZXJcclxuICAgIGxldCB1cmwgPSBgLyR7dGhpcy5tb2RlbH0vdXBkYXRlT3JDcmVhdGVgXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCh1cmwsIHRlc3QpXHJcbiAgICByZXMgPSBhd2FpdCBKU09OLnBhcnNlKHJlcylcclxuICAgIGRlYnVnZ2VyXHJcbiAgICBpZiAocmVzKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9hZG1pbnNjLyR7bW9kZWx9L2VkaXQvJHtyZXMuaWR9YFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3VycmVudFEoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogJCgnLm5hdi1hY3RpdmUnKVswXS5pbm5lclRleHQgLSAxLFxyXG4gICAgICBRRWw6ICQoJy5xdWVzdGlvbi5mbGV4MScpWzBdLFxyXG4gICAgICBuYXZMZW5ndGg6ICQoJ1tkYXRhLXBhZ2luYXRpb25dJykubGVuZ3RoLFxyXG4gICAgICBRUHJldmM6ICQoJy5xdWVzdGlvbi5mbGV4MScpWzBdLnByZXZpb3VzRWxlbWVudFNpYmxpbmcsXHJcbiAgICAgIFFOZXh0RWw6ICQoJy5xdWVzdGlvbi5mbGV4MScpWzBdLm5leHRFbGVtZW50U2libGluZyxcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICB2aWV3TW9kZWwoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogK3dpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcvJykucG9wKCksXHJcbiAgICAgIHRlc3RfbmFtZTogJCgnI3Rlc3RfbmFtZScpLnRleHQoKSxcclxuICAgICAgZW5hYmxlOiAkKCcjZW5hYmxlJylbMF0sXHJcbiAgICAgIHBhcmVudDogJCgnc2VsZWN0Jykuc2VsZWN0ZWRJbmRleFZhbHVlKCksXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgaWQoKSB7XHJcbiAgICByZXR1cm4gaWQgPz8gJCgnLnRlc3QtbmFtZScpWzBdLmRhdGFzZXQudGVzdGlkXHJcbiAgfVxyXG5cclxuXHJcbiAgY2hpbGRyZW4oKSB7XHJcbiAgICBsZXQgY2hpbGRyZW5MZW5naHQgPSAkKCcuY2hpbGRyZW4nKS5sZW5ndGhcclxuICAgIGlmIChjaGlsZHJlbkxlbmdodClcclxuICAgICAgcmV0dXJuIGNoaWxkcmVuTGVuZ2h0XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG5cclxuICBhc3luYyBwYXRoX2NyZWF0ZSgpIHtcclxuICAgIGxldCB0ZXN0X3BhdGggPSBfdGVzdC5zZXJ2ZXJNb2RlbCgpXHJcbiAgICB0ZXN0X3BhdGguaWQgPSAwXHJcbiAgICB0ZXN0X3BhdGguaXNUZXN0ID0gMFxyXG4gICAgbGV0IHVybCA9IGAvYWRtaW5zYy8ke21vZGVsfS9jcmVhdGVgXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCh1cmwsIHRlc3RfcGF0aClcclxuICAgIHJlcyA9IGF3YWl0IEpTT04ucGFyc2UocmVzKVxyXG4gICAgaWYgKHJlcykge1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYWRtaW5zYy8ke21vZGVsfS9lZGl0LyR7cmVzLmlkIC0gMX1gXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgbmFtZSgpIHtcclxuICAgIHJldHVybiAkKCcudGVzdC1uYW1lJylbMF0uaW5uZXJUZXh0XHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIHNlbGVjdGVkVmFsdWVDdXN0b21TZWxlY3QoY2xhc3NOYW1lKSB7XHJcblxyXG4gICAgbGV0IHNlbGVjdCA9ICQoYFtkYXRhLWZpZWxkPSR7Y2xhc3NOYW1lfV1gKVswXVxyXG4gICAgbGV0IHNlbGVjdGVkID0gWy4uLnNlbGVjdC5vcHRpb25zXS5maWx0ZXIoKG9wdCkgPT4gb3B0LnNlbGVjdGVkKVxyXG4gICAgaWYgKHNlbGVjdGVkKSB7XHJcbiAgICAgIHJldHVybiArc2VsZWN0ZWRbMF0udmFsdWVcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBzZXJ2ZXJNb2RlbCgpIHtcclxuICAgIGxldCBtb2RlbCA9IHtcclxuICAgICAgaWQ6ICt3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnLycpLnBvcCgpLFxyXG4gICAgICB0ZXN0X25hbWU6ICQoJyN0ZXN0X25hbWUnKVswXS52YWx1ZSxcclxuICAgICAgaXNUZXN0OiArJCgnW2lzVGVzdF0nKVswXS5nZXRBdHRyaWJ1dGUoJ2lzVGVzdCcpLFxyXG4gICAgfVxyXG5cclxuICAgIGxldCBmaWVsZHMgPSAkKCcuY3VzdG9tLXNlbGVjdCcpO1xyXG4gICAgW10uZm9yRWFjaC5jYWxsKGZpZWxkcywgZnVuY3Rpb24gKGZpZWxkKSB7XHJcbiAgICAgIG1vZGVsW2ZpZWxkLmRhdGFzZXRbJ2ZpZWxkJ11dID0gZmllbGQuZGF0YXNldFsnaWQnXVxyXG4gICAgfSlcclxuICAgIHJldHVybiBtb2RlbFxyXG4gIH1cclxuXHJcbiAgYXN5bmMgdXBkYXRlKCkge1xyXG4gICAgbGV0IG1vZGVsID0gX3Rlc3Quc2VydmVyTW9kZWwoKVxyXG4gICAgbGV0IHVybCA9IGAvYWRtaW5zYy8ke21vZGVsfS91cGRhdGUvJHttb2RlbC5pZH1gXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCh1cmwsIG1vZGVsKVxyXG4gICAgcmVzID0gYXdhaXQgSlNPTi5wYXJzZShyZXMpXHJcbiAgICBpZiAocmVzKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9hZG1pbnNjLyR7bW9kZWx9L2VkaXQvJHttb2RlbC5pZH1gXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgYXN5bmMgZGVsKCkge1xyXG4gICAgaWYgKF90ZXN0LmNoaWxkcmVuKCkpIHtcclxuICAgICAgcG9wdXAuc2hvdygn0KHQvdCw0YfQsNC70LAg0YPQtNCw0LvQuNGC0LUg0LLRgdC1INGC0LXRgdGC0Ysg0LjQtyDQv9Cw0L/QutC4JylcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlkID0gX3Rlc3QuaWQoKVxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9hZG1pbnNjLyR7bW9kZWx9L2RlbGV0ZScsIHtpZH0pXHJcbiAgICByZXMgPSBhd2FpdCBKU09OLnBhcnNlKHJlcylcclxuICAgIGlmIChyZXMubm90QWRtaW4pIHtcclxuICAgICAgcG9wdXAuc2hvdygn0JLQuNC00LjQvNC+0YHRgtGMINGC0LXRgdGC0LAg0YHQutGA0YvRgtCwLiDQp9GC0L7QsdGLINGD0LTQsNC70LjRgtGMINC/0L7Qu9C90L7RgdGC0YzRjiAtINC+0LHRgNCw0YLQuNGC0LXRgdGMINC6INCT0JQnKVxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBgL2FkbWluc2MvJHttb2RlbH0vZWRpdC80MDBgXHJcbiAgICAgIH0sIDQwMDApXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24gPSBgL2FkbWluc2MvJHttb2RlbH0vZWRpdC80MDBgXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0iLCJpbXBvcnQgeyQsIHBvcHVwLCBwb3N0fSBmcm9tICcuLi8uLi8uLi9jb21tb24nXHJcblxyXG5leHBvcnQgbGV0IF9hbnN3ZXIgPSB7XHJcblxyXG4gIGFzeW5jIGNyZWF0ZShidXR0b24pIHtcclxuXHJcbiAgICBsZXQgcXVlc3Rpb24gPSBidXR0b24uY2xvc2VzdCgnLnF1ZXN0aW9uLWVkaXQnKVxyXG4gICAgbGV0IG9wZW5xdWVzdGlvbl9pZCA9IHF1ZXN0aW9uLmlkXHJcbiAgICBsZXQgc29ydCA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbnN3ZXInKS5sZW5ndGggKyAxXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL29wZW5hbnN3ZXIvdXBkYXRlT3JDcmVhdGUnLFxyXG4gICAgICB7b3BlbnF1ZXN0aW9uX2lkLCBzb3J0fSlcclxuICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgbGV0IGlkID0gcmVzLmlkXHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgbGV0IGh0bWwgPSByZXMuaHRtbFxyXG4gICAgICBidXR0b24uaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlYmVnaW5cIiwgaHRtbClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBvcHVwLnNob3coJ9Ch0L7RhdGA0LDQvdC10L3QvicpXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgYXN5bmMgZGVsKHRhcmdldCkge1xyXG4gICAgbGV0IGRlbF9idXR0b24gPSB0YXJnZXQuY2xvc2VzdCgnLmRlbGV0ZScpXHJcbiAgICBpZiAoIWRlbF9idXR0b24pIHJldHVybiBmYWxzZVxyXG4gICAgaWYgKGNvbmZpcm0oXCLQo9C00LDQu9C40YLRjCDRjdGC0L7RgiDQvtGC0LLQtdGCP1wiKSkge1xyXG4gICAgICBsZXQgYW5zd2VyID0gZGVsX2J1dHRvbi5jbG9zZXN0KCcuYW5zd2VyJylcclxuICAgICAgbGV0IGlkID0gK2Fuc3dlci5kYXRhc2V0WydhbnN3ZXJJZCddXHJcbiAgICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KCcvb3BlbmFuc3dlci9kZWxldGUnLCB7aWR9KVxyXG4gICAgICByZXMgPSBKU09OLnBhcnNlKHJlcylcclxuICAgICAgaWYgKHJlcy5tc2cgPT09ICdvaycpIHtcclxuICAgICAgICBhbnN3ZXIucmVtb3ZlKClcclxuICAgICAgICBwb3B1cC5zaG93KCfQntGC0LLQtdGCINGD0LTQsNC70LXQvScpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG59XHJcbiIsImltcG9ydCAnLi90ZXN0LWVkaXQuc2NzcydcclxuaW1wb3J0ICcuLi9jb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuc2NzcydcclxuXHJcbmltcG9ydCAnLi90ZXN0LWVkaXQtbWVudS5zY3NzJ1xyXG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvcG9wdXAuc2NzcydcclxuXHJcbmltcG9ydCAnLi90ZXN0LXVwZGF0ZSdcclxuaW1wb3J0ICcuLi9BZG1pbi9hZG1pbidcclxuXHJcbmltcG9ydCB7JCwgcG9zdCwgcG9wdXAsIGRlYm91bmNlfSBmcm9tICcuLi9jb21tb24nXHJcblxyXG5pbXBvcnQge19vcGVucXVlc3Rpb259IGZyb20gXCIuL21vZGVsL29wZW50ZXN0L29wZW5xdWVzdGlvblwiXHJcbmltcG9ydCBzb3J0YWJsZSBmcm9tIFwiLi4vY29tcG9uZW50cy9zb3J0YWJsZVwiXHJcbmltcG9ydCBfdGVzdCBmcm9tIFwiLi9tb2RlbC9vcGVudGVzdC9vcGVudGVzdFwiO1xyXG5pbXBvcnQge19hbnN3ZXJ9IGZyb20gXCIuL21vZGVsL29wZW50ZXN0L29wZW5hbnN3ZXJcIjtcclxuXHJcblxyXG5sZXQgb3BlbnRlc3RFZGl0ID0gJCgnLm9wZW50ZXN0LWVkaXQtd3JhcHBlcicpWzBdXHJcbmlmIChvcGVudGVzdEVkaXQpIHtcclxuICBzb3J0YWJsZSgnLm9wZW50ZXN0LWVkaXQtd3JhcHBlciAucXVlc3Rpb25zJyxcclxuICAgICcub3BlbnRlc3QtZWRpdC13cmFwcGVyIC5xdWVzdGlvbi1lZGl0JyxcclxuICAgICdvcGVucXVlc3Rpb24nKVxyXG5cclxuXHJcbiAgb3BlbnRlc3RFZGl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcclxuICAgICh7dGFyZ2V0fSkgPT4ge1xyXG4gICAgICBjb25zdCB0ZXN0ID0gbmV3IF90ZXN0KClcclxuICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgY2FzZSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXN0LXBhdGhfX3VwZGF0ZScpOiB7XHJcbiAgICAgICAgICB0ZXN0LnVwZGF0ZSgpXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXN0X191cGRhdGUnKToge1xyXG4gICAgICAgICAgdGVzdC51cGRhdGUoKVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGVzdF9fc2F2ZScpOiB7XHJcbiAgICAgICAgICB0ZXN0LnVwZGF0ZSgpXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXN0X19kZWxldGUnKToge1xyXG4gICAgICAgICAgdGVzdC5kZWxldGUoKVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGVzdC1wYXRoX19jcmVhdGUnKToge1xyXG4gICAgICAgICAgdGVzdC5wYXRoX2NyZWF0ZSgpXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXN0X19jcmVhdGUnKToge1xyXG4gICAgICAgICAgdGVzdC5jcmVhdGUoKVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8gY2FzZSAhIXRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb25fX3NhdmUnKToge1xyXG4gICAgICAgIC8vICAgX29wZW5xdWVzdGlvbi5zYXZlKHRhcmdldClcclxuICAgICAgICAvLyAgIGJyZWFrO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBjYXNlICEhdGFyZ2V0LmNsb3Nlc3QoJy5xdWVzdGlvbl9fc2hvdy1hbnN3ZXJzJyk6IHtcclxuICAgICAgICAgIF9vcGVucXVlc3Rpb24uc2hvd0Fuc3dlcnModGFyZ2V0KVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgISF0YXJnZXQuY2xvc2VzdCgnLnF1ZXN0aW9uX19kZWxldGUnKToge1xyXG4gICAgICAgICAgX29wZW5xdWVzdGlvbi5kZWwodGFyZ2V0KVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncXVlc3Rpb25fX2NyZWF0ZS1idXR0b24nKToge1xyXG4gICAgICAgICAgX29wZW5xdWVzdGlvbi5jcmVhdGUodGFyZ2V0KVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgISF0YXJnZXQuY2xvc2VzdCgnLmRlbGV0ZScpOiB7XHJcbiAgICAgICAgICBfYW5zd2VyLmRlbCh0YXJnZXQpXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhbnN3ZXJfX2NyZWF0ZS1idXR0b24nKToge1xyXG4gICAgICAgICAgX2Fuc3dlci5jcmVhdGUodGFyZ2V0KVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlISF0YXJnZXQuY2xvc2VzdCgnLnF1ZXN0aW9uLWVkaXRfX3BhcmVudC1zZWxlY3QnKToge1xyXG4gICAgICAgICAgX29wZW5xdWVzdGlvbi5jaGFuZ2VQYXJlbnQodGFyZ2V0KVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gIClcclxuXHJcbiAgbGV0IGhhbmRsZUtleXVwID0gYXN5bmMgZnVuY3Rpb24gKHt0YXJnZXR9KSB7XHJcblxyXG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3RleHQnKSkge1xyXG4gICAgICBsZXQgYW5zd2VyID0gdGFyZ2V0LmNsb3Nlc3QoJy5hbnN3ZXInKVxyXG4gICAgICBpZiAoYW5zd2VyKSB7XHJcbiAgICAgICAgbGV0IGlkID0gYW5zd2VyLmRhdGFzZXQuYW5zd2VySWRcclxuICAgICAgICBsZXQgb3BlbnF1ZXN0aW9uX2lkID0gdGFyZ2V0LmNsb3Nlc3QoJy5xdWVzdGlvbi1lZGl0JykuaWRcclxuICAgICAgICBhbnN3ZXIgPSB0YXJnZXQuaW5uZXJUZXh0XHJcbiAgICAgICAgLy8gYW5zd2VyID0gYW5zd2VyLnF1ZXJ5U2VsZWN0b3IoJy50ZXh0JykuaW5uZXJUZXh0XHJcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9hZG1pbnNjL29wZW5hbnN3ZXIvdXBkYXRlT3JDcmVhdGUnLFxyXG4gICAgICAgICAge2lkLCBhbnN3ZXIsb3BlbnF1ZXN0aW9uX2lkfSlcclxuICAgICAgICByZXMgPSBKU09OLnBhcnNlKHJlcylcclxuICAgICAgICBpZiAocmVzLm1zZz09PSdvaycpe1xyXG4gICAgICAgICAgcG9wdXAuc2hvdygn0KHQvtGF0YDQsNC90LXQvScpXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBpZCA9IHRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb24tZWRpdCcpLmlkXHJcbiAgICAgICAgbGV0IHF1ZXN0aW9uID0gdGFyZ2V0LmlubmVyVGV4dFxyXG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KCcvYWRtaW5zYy9vcGVucXVlc3Rpb24vdXBkYXRlT3JDcmVhdGUnLFxyXG4gICAgICAgICAge2lkLCBxdWVzdGlvbn0pXHJcbiAgICAgICAgcmVzID0gYXdhaXQgSlNPTi5wYXJzZShyZXMpXHJcbiAgICAgICAgaWYgKHJlcy5tc2cpe1xyXG4gICAgICAgICAgcG9wdXAuc2hvdyhyZXMubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBsZXQgZGVib3VuY2VkSW5wdXQgPSBkZWJvdW5jZShoYW5kbGVLZXl1cClcclxuICAkKG9wZW50ZXN0RWRpdCkub24oJ2tleXVwJywgZGVib3VuY2VkSW5wdXQpXHJcblxyXG5cclxufVxyXG5cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IHskLCBwb3B1cCwgcG9zdH0gZnJvbSAnLi4vLi4vY29tbW9uJ1xyXG5cclxuZXhwb3J0IGxldCBfYW5zd2VyID0ge1xyXG5cclxuICBlbDogKGFkZF9idXR0b24pID0+IHtcclxuICAgIGxldCBhbnN3ZXJzID0gYWRkX2J1dHRvbi5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbnN3ZXInKVxyXG4gICAgbGV0IHByZXZfc29ydCA9IDBcclxuICAgIGlmIChhbnN3ZXJzLmxlbmd0aCkge1xyXG4gICAgICBwcmV2X3NvcnQgPSArJChhbnN3ZXJzW2Fuc3dlcnMubGVuZ3RoIC0gMV0pLmZpbmQoJy5zb3J0JykuaW5uZXJUZXh0XHJcbiAgICB9XHJcbiAgICBsZXQgZWwgPSAkKCcuYW5zd2VyX19jcmVhdGUnKS5maW5kKCcuYW5zd2VyJykuY2xvbmVOb2RlKHRydWUpXHJcbiAgICBlbC5jbGFzc0xpc3QuYWRkKCdhbnN3ZXInKVxyXG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnYW5zd2VyX19jcmVhdGUnKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZWw6IGVsLFxyXG4gICAgICBpZDogJ25ldycsXHJcbiAgICAgIHFfaWQ6ICthZGRfYnV0dG9uLmNsb3Nlc3QoJy5xdWVzdGlvbi1lZGl0JykuaWQsXHJcbiAgICAgIHByZXZpb3VzX3NvcnQ6IHByZXZfc29ydCxcclxuICAgICAgYW5zd2VyQ250OiBhbnN3ZXJzLmxlbmd0aCxcclxuICAgICAgc29ydDogJChlbCkuZmluZCgnLnNvcnQnKSxcclxuICAgICAgY2hlY2tlZDogJChlbCkuZmluZCgnaW5wdXQnKSxcclxuICAgICAgdGV4dDogJChlbCkuZmluZCgnLnRleHQnKSxcclxuICAgICAgZGVsZXRlOiAkKCQoZWwpLmZpbmQoJy5kZWxldGUnKSkub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF9hbnN3ZXIuZGVsKHRoaXMpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfSxcclxuICBnZXRNb2RlbEZvclNlcnZlcihlbCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYW5zd2VyOiAnJyxcclxuICAgICAgcGFyZW50X3F1ZXN0aW9uOiBlbC5xX2lkLFxyXG4gICAgICBjb3JyZWN0X2Fuc3dlcjogMCxcclxuICAgICAgcGljYTogJydcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBhc3luYyBjcmVhdGUoYnV0dG9uKSB7XHJcbiAgICAvLyBkZWJ1Z2dlclxyXG4gICAgbGV0IGFfaWQgPSBhd2FpdCBjcmVhdGVPblNlcnZlcihidXR0b24pXHJcbiAgICBzaG93KGFfaWQpXHJcblxyXG4gICAgYXN5bmMgZnVuY3Rpb24gY3JlYXRlT25TZXJ2ZXIoYnV0dG9uKSB7XHJcbiAgICAgIGxldCBuZXdFbCA9IF9hbnN3ZXIuZ2V0TW9kZWxGb3JTZXJ2ZXIoX2Fuc3dlci5lbChidXR0b24pKVxyXG5cclxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9hbnN3ZXIvY3JlYXRlJywgbmV3RWwpXHJcbiAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG5cclxuICAgICAgcmV0dXJuIHJlcy5pZFxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNob3coYV9pZCkge1xyXG4gICAgICBsZXQgZWwgPSBfYW5zd2VyLmVsKGJ1dHRvbilcclxuXHJcbiAgICAgIGVsLmNoZWNrZWQuY2hlY2tlZCA9IGZhbHNlXHJcbiAgICAgIGVsLmVsLmRhdGFzZXRbJ2Fuc3dlcklkJ10gPSBhX2lkXHJcbiAgICAgIGVsLnRleHQuaW5uZXJUZXh0ID0gJydcclxuICAgICAgZWwuc29ydC5pbm5lclRleHQgPSBlbC5hbnN3ZXJDbnQgKyAxXHJcblxyXG4gICAgICBlbC5lbC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXHJcbiAgICAgIGJ1dHRvbi5iZWZvcmUoZWwuZWwpXHJcbiAgICAgIGVsLmVsLnN0eWxlLm9wYWNpdHkgPSAxXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgYXN5bmMgZGVsKHRhcmdldCkge1xyXG4gICAgbGV0IGRlbF9idXR0b24gPSB0YXJnZXQuY2xvc2VzdCgnLmRlbGV0ZScpXHJcbiAgICBpZiAoIWRlbF9idXR0b24pIHJldHVybiBmYWxzZVxyXG4gICAgaWYgKGNvbmZpcm0oXCLQo9C00LDQu9C40YLRjCDRjdGC0L7RgiDQvtGC0LLQtdGCP1wiKSkge1xyXG4gICAgICBsZXQgcmVzID0gYXdhaXQgZGVsZXRlRnJvbVNlcnZlcihkZWxfYnV0dG9uKVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUZyb21TZXJ2ZXIoZGVsX2J1dHRvbikge1xyXG5cclxuICAgICAgbGV0IGFfaWQgPSArZGVsX2J1dHRvbi5jbG9zZXN0KCcuYW5zd2VyJykuZGF0YXNldFsnYW5zd2VySWQnXVxyXG4gICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL2Fuc3dlci9kZWxldGUnLCB7YV9pZH0pXHJcbiAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgICBpZiAocmVzLm1zZyA9PT0gJ29rJykge1xyXG4gICAgICAgIGRlbF9idXR0b24uY2xvc2VzdCgnLmFuc3dlcicpLnJlbW92ZSgpXHJcbiAgICAgICAgcG9wdXAuc2hvdygn0J7RgtCy0LXRgiDRg9C00LDQu9C10L0nKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxufVxyXG4iLCJpbXBvcnQgeyQsIHBvcHVwLCBwb3N0LCBhZGRUb29sdGlwfSBmcm9tIFwiLi4vLi4vY29tbW9uXCJcclxuaW1wb3J0IHtfYW5zd2VyfSBmcm9tIFwiLi9hbnN3ZXJcIjtcclxuXHJcbmV4cG9ydCBsZXQgX3F1ZXN0aW9uID0ge1xyXG5cclxuXHJcblxyXG5cclxuICBjaGFuZ2VQYXJlbnQ6IGFzeW5jIGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgIGRlYnVnZ2VyXHJcbiAgICBsZXQgb3B0ID0gdGFyZ2V0Lm9wdGlvbnNbdGFyZ2V0LnNlbGVjdGVkSW5kZXhdXHJcbiAgICBsZXQgaWQgPSB0YXJnZXQuY2xvc2VzdCgnLnF1ZXN0aW9uLWVkaXQnKS5pZFxyXG4gICAgbGV0IHRlc3RfaWQgPSBvcHQuZGF0YXNldFsncXVlc3Rpb25QYXJlbnRJZCddXHJcbiAgICBsZXQgdGVzdF9uYW1lID0gb3B0LnZhbHVlXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL2FkbWluc2MvcXVlc3Rpb24vY2hhbmdlUGFyZW50Jywge2lkLCB0ZXN0X2lkfSlcclxuICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgaWYgKHJlcy5tc2cgIT09ICdvaycpIHRocm93IChlKTtcclxuICAgIGxldCBxdWVzdGlvbiA9IHRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb24tZWRpdCcpXHJcbiAgICBxdWVzdGlvbi5yZW1vdmUoKVxyXG4gICAgcG9wdXAuc2hvdygn0J/QtdGA0LXQvNC10YnQtdC9INCyICcgKyB0ZXN0X25hbWUpXHJcbiAgICAvLyBkZWJ1Z2dlclxyXG4gIH0sXHJcblxyXG5cclxuICBzaG93VGlwOiAoYWN0aW9uLCBldmVudCkgPT4ge1xyXG4gICAgbGV0IGVsID0gZXZlbnQudGFyZ2V0XHJcbiAgICBsZXQgdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG5cclxuICAgIGlmIChhY3Rpb24gPT09ICdzYXZlLnN2ZycpIHtcclxuICAgICAgYWRkVG9vbHRpcChlbCwgJ9GB0L7RhdGA0LDQvdC40YLRjCcpXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgc2hvd0ZpcnN0OiAoKSA9PiB7XHJcbiAgICBsZXQgcXVlc3Rpb24gPSBfcXVlc3Rpb24uY2xvbmVFbXB0eU1vZGVsKClcclxuICAgIGlmICghcXVlc3Rpb24pIHJldHVyblxyXG5cclxuICAgIGxldCBtb2RlbCA9IF9xdWVzdGlvbi52aWV3TW9kZWwocXVlc3Rpb24pXHJcbiAgICBtb2RlbC5zb3J0LmlubmVyVGV4dCA9ICcxJ1xyXG4gICAgJChtb2RlbC5zYXZlKS5vbignY2xpY2snLCBfcXVlc3Rpb24uc2F2ZSlcclxuICAgICQobW9kZWwuZGVsKS5vbignY2xpY2snLCBfcXVlc3Rpb24uZGVsZXRlKVxyXG5cclxuICAgICQocXVlc3Rpb24pLmFkZENsYXNzKCdxdWVzdGlvbi1lZGl0JylcclxuICAgICQocXVlc3Rpb24pLnJlbW92ZUNsYXNzKCdxdWVzdGlvbl9fY3JlYXRlJylcclxuXHJcbiAgICBsZXQgcXVlc3Rpb25zID0gJCgnLnF1ZXN0aW9ucycpWzBdXHJcbiAgICBxdWVzdGlvbnMucHJlcGVuZChxdWVzdGlvbilcclxuICB9LFxyXG5cclxuICBjbG9uZUVtcHR5TW9kZWw6ICgpID0+IHtcclxuICAgIGxldCBxdWVzdGlvbiA9ICQoJy5xdWVzdGlvbnMgLnF1ZXN0aW9uX19jcmVhdGUgLnF1ZXN0aW9uLWVkaXQnKVswXVxyXG4gICAgaWYgKHF1ZXN0aW9uKSByZXR1cm4gcXVlc3Rpb24uY2xvbmVOb2RlKHRydWUpXHJcbiAgfSxcclxuXHJcbiAgc2hvd0Fuc3dlcnM6ICh0YXJnZXQpID0+IHtcclxuICAgIGxldCByb3cgPSB0YXJnZXQuY2xvc2VzdCgnLnF1ZXN0aW9uLWVkaXQnKVxyXG4gICAgbGV0IGFuc3dlcnMgPSAkKHJvdykuZmluZCgnLnF1ZXN0aW9uX19hbnN3ZXJzJylcclxuICAgIGFuc3dlcnMuY2xhc3NMaXN0LnRvZ2dsZSgnaGVpZ2h0JylcclxuICAgIGFuc3dlcnMuY2xhc3NMaXN0LnRvZ2dsZSgnc2NhbGUnKVxyXG4gICAgdGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ3JvdGF0ZScpXHJcbiAgfSxcclxuXHJcbiAgdmlld01vZGVsOiAoZWwpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiArZWwuaWQsXHJcbiAgICAgIGVsOiBlbCxcclxuICAgICAgc29ydDogZWwucXVlcnlTZWxlY3RvcignLnNvcnQnKSxcclxuICAgICAgc2F2ZTogZWwucXVlcnlTZWxlY3RvcignLnF1ZXN0aW9uX19zYXZlJyksXHJcbiAgICAgIHRleHQ6IGVsLnF1ZXJ5U2VsZWN0b3IoJy5xdWVzdGlvbl9fdGV4dCcpLFxyXG4gICAgICBkZWw6IGVsLnF1ZXJ5U2VsZWN0b3IoJy5xdWVzdGlvbl9fZGVsZXRlJyksXHJcbiAgICAgIGNyZWF0ZUFuc3dlckJ1dHRvbjogZWwucXVlcnlTZWxlY3RvcignLmFuc3dlcl9fY3JlYXRlLWJ1dHRvbicpLFxyXG4gICAgICBhZGRCdXR0b246ICQoJCgnLnF1ZXN0aW9ucycpWzBdKS5maW5kKCcucXVlc3Rpb25fX2NyZWF0ZS1idXR0b24nKSxcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBzZXJ2ZXJNb2RlbDogKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcXVlc3Rpb246IHtcclxuICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICBxdXN0aW9uOiAnJyxcclxuICAgICAgICBwYXJlbnQ6ICt3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnLycpLnBvcCgpLFxyXG4gICAgICAgIHNvcnQ6IF9xdWVzdGlvbi5sYXN0U29ydCgpLFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgcXVlc3Rpb25zOiAoKSA9PiB7XHJcbiAgICByZXR1cm4gJCgnLnF1ZXN0aW9ucz4ucXVlc3Rpb24tZWRpdCcpXHJcbiAgICAvLyByZXR1cm4gJCgnLnF1ZXN0aW9ucz4ucXVlc3Rpb24tZWRpdCcpLmVsXHJcbiAgfSxcclxuXHJcbiAgcXVlc3Rpb25zQ291bnQ6ICgpID0+IHtcclxuICAgIHJldHVybiAkKCcucXVlc3Rpb25zPi5xdWVzdGlvbi1lZGl0JykuZWwubGVuZ3RoXHJcbiAgfSxcclxuXHJcbiAgbGFzdFNvcnQ6ICgpID0+IHtcclxuICAgIGxldCBxcyA9IF9xdWVzdGlvbi5xdWVzdGlvbnMoKVxyXG4gICAgbGV0IGxlbmd0aCA9IHFzLmxlbmd0aCAtIDFcclxuICAgIGxldCBsYXN0ID0gK19xdWVzdGlvbi52aWV3TW9kZWwocXNbbGVuZ3RoXSkuc29ydC5pbm5lclRleHRcclxuICAgIHJldHVybiBsYXN0ICsgMVxyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZTpcclxuICAgIGFzeW5jIChlKSA9PiB7XHJcbiAgICAgIGxldCBxX2lkID0gYXdhaXQgX3F1ZXN0aW9uLmNyZWF0ZU9uU2VydmVyKGUpXHJcbiAgICAgIGlmIChxX2lkKSB7XHJcbiAgICAgICAgX3F1ZXN0aW9uLmNyZWF0ZU9uVmlldyhxX2lkKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICBjcmVhdGVPblNlcnZlcjpcclxuICAgIGFzeW5jICgpID0+IHtcclxuICAgICAgbGV0IHF1ZXN0aW9uID0gX3F1ZXN0aW9uLnNlcnZlck1vZGVsKClcclxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9xdWVzdGlvbi91cGRhdGVPckNyZWF0ZScsIHtxdWVzdGlvbjogcXVlc3Rpb24ucXVlc3Rpb24sIGFuc3dlcnM6IHt9fSlcclxuICAgICAgcmVzID0gYXdhaXQgSlNPTi5wYXJzZShyZXMpXHJcblxyXG4gICAgICByZXR1cm4gcmVzLmlkXHJcbiAgICB9LFxyXG5cclxuICBjcmVhdGVPblZpZXc6XHJcbiAgICAocV9pZCkgPT4ge1xyXG4gICAgICBsZXQgY2xvbmUgPSBfcXVlc3Rpb24uY2xvbmVFbXB0eU1vZGVsKClcclxuXHJcbiAgICAgIGxldCBtb2RlbCA9IF9xdWVzdGlvbi52aWV3TW9kZWwoY2xvbmUpXHJcbiAgICAgIG1vZGVsLnNvcnQuaW5uZXJUZXh0ID0gX3F1ZXN0aW9uLmxhc3RTb3J0KClcclxuICAgICAgbW9kZWwudGV4dC5pbm5lclRleHQgPSAnJ1xyXG4gICAgICBtb2RlbC5lbC5pZCA9IHFfaWRcclxuXHJcbiAgICAgIG1vZGVsLmFkZEJ1dHRvbi5iZWZvcmUoY2xvbmUpXHJcbiAgICB9LFxyXG5cclxuXHJcbiAgc2F2ZTpcclxuICAgIGFzeW5jICh0YXJnZXQpID0+IHtcclxuICAgICAgbGV0IHF1ZXN0aW9uID0gdGFyZ2V0LmNsb3Nlc3QoJy5xdWVzdGlvbi1lZGl0JylcclxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoXHJcbiAgICAgICAgJy9xdWVzdGlvbi9VcGRhdGVPckNyZWF0ZScsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcXVlc3Rpb246IF9xdWVzdGlvbi5nZXRNb2RlbEZvclNlcnZlcihxdWVzdGlvbiksXHJcbiAgICAgICAgICBhbnN3ZXJzOiBfcXVlc3Rpb24uZ2V0QW5zd2VycyhxdWVzdGlvbiksXHJcbiAgICAgICAgfSlcclxuICAgICAgcmVzID0gYXdhaXQgSlNPTi5wYXJzZShyZXMpXHJcbiAgICAgIHBvcHVwLnNob3cocmVzLm1zZylcclxuICAgIH0sXHJcblxyXG4gIGRlbGV0ZTpcclxuICAgIGFzeW5jICh0YXJnZXQpID0+IHtcclxuICAgICAgaWYgKGNvbmZpcm0oXCLQo9C00LDQu9C40YLRjCDQstC+0L/RgNC+0YEg0YHQviDQstGB0LXQvNC4INC10LPQviDQvtGC0LLQtdGC0LDQvNC4P1wiKSkge1xyXG4gICAgICAgIGxldCB2aWV3TW9kZWwgPSBfcXVlc3Rpb24udmlld01vZGVsKHRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb24tZWRpdCcpKVxyXG4gICAgICAgIGxldCBpZCA9IHZpZXdNb2RlbC5pZFxyXG5cclxuICAgICAgICBsZXQgZGVsZXRlZCA9IGF3YWl0IF9xdWVzdGlvbi5kZWxldGVGcm9tU2VydmVyKGlkKVxyXG4gICAgICAgIGlmIChkZWxldGVkKSB7XHJcbiAgICAgICAgICBfcXVlc3Rpb24uZGVsZXRlRnJvbVZpZXcodmlld01vZGVsKVxyXG4gICAgICAgICAgcG9wdXAuc2hvdyhkZWxldGVkLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gIGRlbGV0ZUZyb21WaWV3OlxyXG4gICAgYXN5bmMgKHZpZXdNb2RlbCkgPT4ge1xyXG4gICAgICB2aWV3TW9kZWwuZWwucmVtb3ZlKClcclxuICAgIH0sXHJcblxyXG4gIGRlbGV0ZUZyb21TZXJ2ZXI6XHJcbiAgICBhc3luYyAocV9pZCkgPT4ge1xyXG4gICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCgnL3F1ZXN0aW9uL2RlbGV0ZScsIHtxX2lkfSlcclxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKVxyXG4gICAgfSxcclxuXHJcbiAgZ2V0TW9kZWxGb3JTZXJ2ZXI6XHJcbiAgICAocXVlc3Rpb24pID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBpZDogK3F1ZXN0aW9uLmlkLFxyXG4gICAgICAgIHBhcmVudDogKyQoJy5xdWVzdGlvbnMnKVswXS5kYXRhc2V0LnRlc3RJZCxcclxuICAgICAgICBwaWNxOiAnJyxcclxuICAgICAgICBxdXN0aW9uOiAkKHF1ZXN0aW9uKS5maW5kKCcucXVlc3Rpb25fX3RleHQnKS5pbm5lclRleHQsXHJcbiAgICAgICAgc29ydDogKyQocXVlc3Rpb24pLmZpbmQoJy5zb3J0JykuaW5uZXJUZXh0LFxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gIGdldEFuc3dlcnM6XHJcbiAgICAocXVlc3Rpb24pID0+IHtcclxuICAgICAgbGV0IGFuc3dlckJsb2NrcyA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbnN3ZXInKVxyXG4gICAgICByZXR1cm4gWy4uLmFuc3dlckJsb2Nrc10ubWFwKChhKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGlkOiArYS5kYXRhc2V0WydhbnN3ZXJJZCddLFxyXG4gICAgICAgICAgYW5zd2VyOiBhLnF1ZXJ5U2VsZWN0b3IoJy50ZXh0JykuaW5uZXJUZXh0LFxyXG4gICAgICAgICAgY29ycmVjdF9hbnN3ZXI6ICthLnF1ZXJ5U2VsZWN0b3IoJ1t0eXBlPVwiY2hlY2tib3hcIl0nKS5jaGVja2VkLFxyXG4gICAgICAgICAgcGFyZW50X3F1ZXN0aW9uOiArcXVlc3Rpb24uaWQsXHJcbiAgICAgICAgICBwaWNhOiAnJyxcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHF1ZXN0aW9uKVxyXG4gICAgfSxcclxufVxyXG5cclxuIiwiaW1wb3J0ICcuL1dEU1NlbGVjdC5zY3NzJ1xyXG5pbXBvcnQgJy4vY3VzdG9tU2VsZWN0LnNjc3MnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXRFNTZWxlY3Qge1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbCkge1xyXG5cclxuICAgIGlmICghZWwpIHJldHVybiBmYWxzZVxyXG4gICAgaWYgKGVsLm11bHRpcGxlKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICB0aGlzLnRpdGxlID0gZWwudGl0bGUgPz8gJydcclxuICAgIHRoaXMuZmllbGQgPSBlbC5kYXRhc2V0WydmaWVsZCddXHJcbiAgICB0aGlzLm9wdGlvbnMgPSBnZXRGb3JtYXR0ZWRPcHRpb25zKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJvcHRpb25cIikpXHJcblxyXG4gICAgdGhpcy5zZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcbiAgICBpZiAoZWwuY2xhc3NOYW1lKSB0aGlzLnNlbC5jbGFzc0xpc3QuYWRkKGVsLmNsYXNzTmFtZSlcclxuXHJcbiAgICB0aGlzLmxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIilcclxuICAgIHRoaXMuYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcbiAgICB0aGlzLnNwYWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG5cclxuICAgIHRoaXMudWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIilcclxuICAgIHNldHVwKHRoaXMpXHJcbiAgICBlbC5hZnRlcih0aGlzLnNlbClcclxuICAgIC8vIGVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxyXG4gICAgZWwucmVtb3ZlKClcclxuICB9XHJcblxyXG4gIGdldCBzZWxlY3RlZE9wdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZmluZChvcHRpb24gPT4gb3B0aW9uLnNlbGVjdGVkKVxyXG4gIH1cclxuXHJcbiAgZ2V0IHNlbGVjdGVkT3B0aW9uSW5kZXgoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmluZGV4T2YodGhpcy5zZWxlY3RlZE9wdGlvbilcclxuICB9XHJcblxyXG4gIHNlbGVjdFZhbHVlKHZhbHVlKSB7XHJcbiAgICBjb25zdCBuZXh0ID0gdGhpcy5vcHRpb25zLmZpbmQob3B0aW9uID0+IHtcclxuICAgICAgcmV0dXJuIG9wdGlvbi52YWx1ZSA9PT0gdmFsdWVcclxuICAgIH0pXHJcbiAgICBjb25zdCBwcmV2ID0gdGhpcy5zZWxlY3RlZE9wdGlvblxyXG4gICAgcHJldi5zZWxlY3RlZCA9IGZhbHNlXHJcbiAgICAvLyBwcmV2LmVsZW1lbnQuc2VsZWN0ZWQgPSBmYWxzZVxyXG5cclxuICAgIG5leHQuc2VsZWN0ZWQgPSB0cnVlXHJcbiAgICAvLyBuZXh0LmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlXHJcblxyXG4gICAgdGhpcy5zcGFjZS5pbm5lclRleHQgPSBuZXh0LmxhYmVsXHJcbiAgICB0aGlzLmxhYmVsLmNsb3Nlc3QoJ1tjdXN0b20tc2VsZWN0XScpLmRhdGFzZXRbJ2lkJ10gPSBuZXh0LnZhbHVlXHJcbiAgICB0aGlzLmxhYmVsLmNsb3Nlc3QoJ1tjdXN0b20tc2VsZWN0XScpLmRhdGFzZXRbJ3ZhbHVlJ10gPSBuZXh0LnZhbHVlXHJcbiAgICB0aGlzLnVsXHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKGBbZGF0YS12YWx1ZT1cIiR7cHJldi52YWx1ZX1cIl1gKVxyXG4gICAgICAuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpXHJcbiAgICBjb25zdCBuZXdDdXN0b21FbGVtZW50ID0gdGhpcy51bC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgW2RhdGEtdmFsdWU9XCIke25leHQudmFsdWV9XCJdYFxyXG4gICAgKVxyXG4gICAgbmV3Q3VzdG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIilcclxuICAgIG5ld0N1c3RvbUVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiBcIm5lYXJlc3RcIn0pXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cChzZWxlY3QpIHtcclxuXHJcbiAgaWYgKHNlbGVjdC50aXRsZSkge1xyXG4gICAgc2VsZWN0LnRpdGxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuICAgIHNlbGVjdC50aXRsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRpdGxlXCIpXHJcbiAgICBzZWxlY3QudGl0bGVFbGVtZW50LmlubmVyVGV4dCA9IHNlbGVjdC50aXRsZVxyXG4gICAgc2VsZWN0LnNlbC5hcHBlbmQoc2VsZWN0LnRpdGxlRWxlbWVudClcclxuICB9XHJcblxyXG4gIC8vIHNlbGVjdC5zZWwuY2xhc3NMaXN0LmFkZChcImN1c3RvbS1zZWxlY3RcIilcclxuICBzZWxlY3Quc2VsLnNldEF0dHJpYnV0ZShcImN1c3RvbS1zZWxlY3RcIiwnJylcclxuICBpZihzZWxlY3QuZmllbGQpc2VsZWN0LnNlbC5kYXRhc2V0WydmaWVsZCddID0gc2VsZWN0LmZpZWxkXHJcbiAgc2VsZWN0LnNlbC5kYXRhc2V0WydpZCddID0gc2VsZWN0LnNlbGVjdGVkT3B0aW9uLnZhbHVlXHJcbiAgc2VsZWN0LnNlbC5kYXRhc2V0Wyd2YWx1ZSddID0gc2VsZWN0LnNlbGVjdGVkT3B0aW9uLnZhbHVlXHJcbiAgc2VsZWN0LnNlbC50YWJJbmRleCA9IDBcclxuXHJcbiAgLy8gc2VsZWN0LmxhYmVsLmNsYXNzTGlzdC5hZGQoXCJ2YWx1ZVwiKVxyXG4gIHNlbGVjdC5zZWwuYXBwZW5kKHNlbGVjdC5sYWJlbClcclxuXHJcbiAgc2VsZWN0LnNwYWNlLmNsYXNzTGlzdC5hZGQoXCJzcGFjZVwiKVxyXG4gIHNlbGVjdC5zcGFjZS5pbm5lclRleHQgPSBzZWxlY3Quc2VsZWN0ZWRPcHRpb24ubGFiZWxcclxuICBzZWxlY3QubGFiZWwuYXBwZW5kKHNlbGVjdC5zcGFjZSlcclxuXHJcbiAgc2VsZWN0LmFycm93LmNsYXNzTGlzdC5hZGQoXCJhcnJvd1wiKVxyXG4gIHNlbGVjdC5sYWJlbC5hcHBlbmQoc2VsZWN0LmFycm93KVxyXG5cclxuICBzZWxlY3QudWwuY2xhc3NMaXN0LmFkZChcIm9wdGlvbnNcIilcclxuICBzZWxlY3Qub3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiB7XHJcbiAgICBzZXRPcHRpb24ob3B0aW9uKVxyXG4gIH0pXHJcblxyXG4gIGZ1bmN0aW9uIHNldE9wdGlvbihvcHRpb24pIHtcclxuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpXHJcbiAgICBsaS5pbm5lclRleHQgPSBvcHRpb24ubGFiZWxcclxuICAgIGxpLmRhdGFzZXQudmFsdWUgPSBvcHRpb24udmFsdWVcclxuICAgIGxpLmNsYXNzTGlzdC50b2dnbGUoXCJzZWxlY3RlZFwiLCBvcHRpb24uc2VsZWN0ZWQpXHJcbiAgICBsaS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICBzZWxlY3Quc2VsZWN0VmFsdWUob3B0aW9uLnZhbHVlKVxyXG4gICAgICBzZWxlY3QudWwuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIilcclxuICAgIH0pXHJcbiAgICBzZWxlY3QudWwuYXBwZW5kKGxpKVxyXG4gIH1cclxuXHJcbiAgc2VsZWN0LnNlbC5hcHBlbmQoc2VsZWN0LnVsKVxyXG5cclxuICBzZWxlY3QubGFiZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgIHNlbGVjdC51bC5jbGFzc0xpc3QudG9nZ2xlKFwic2hvd1wiKVxyXG4gIH0pXHJcblxyXG4gIHNlbGVjdC5zZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4ge1xyXG4gICAgc2VsZWN0LnVsLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpXHJcbiAgfSlcclxuXHJcbiAgbGV0IGRlYm91bmNlVGltZW91dFxyXG4gIGxldCBzZWFyY2hUZXJtID0gXCJcIlxyXG4gIHNlbGVjdC5zZWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZSA9PiB7XHJcbiAgICBzd2l0Y2ggKGUuY29kZSkge1xyXG4gICAgICBjYXNlIFwiU3BhY2VcIjpcclxuICAgICAgICBzZWxlY3QudWwuY2xhc3NMaXN0LnRvZ2dsZShcInNob3dcIilcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIFwiQXJyb3dVcFwiOiB7XHJcbiAgICAgICAgY29uc3QgcHJldk9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW3NlbGVjdC5zZWxlY3RlZE9wdGlvbkluZGV4IC0gMV1cclxuICAgICAgICBpZiAocHJldk9wdGlvbikge1xyXG4gICAgICAgICAgc2VsZWN0LnNlbGVjdFZhbHVlKHByZXZPcHRpb24udmFsdWUpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBcIkFycm93RG93blwiOiB7XHJcbiAgICAgICAgY29uc3QgbmV4dE9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW3NlbGVjdC5zZWxlY3RlZE9wdGlvbkluZGV4ICsgMV1cclxuICAgICAgICBpZiAobmV4dE9wdGlvbikge1xyXG4gICAgICAgICAgc2VsZWN0LnNlbGVjdFZhbHVlKG5leHRPcHRpb24udmFsdWUpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBcIkVudGVyXCI6XHJcbiAgICAgIGNhc2UgXCJFc2NhcGVcIjpcclxuICAgICAgICBzZWxlY3QudWwuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIilcclxuICAgICAgICBicmVha1xyXG4gICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZW91dClcclxuICAgICAgICBzZWFyY2hUZXJtICs9IGUua2V5XHJcbiAgICAgICAgZGVib3VuY2VUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBzZWFyY2hUZXJtID0gXCJcIlxyXG4gICAgICAgIH0sIDUwMClcclxuXHJcbiAgICAgICAgY29uc3Qgc2VhcmNoZWRPcHRpb24gPSBzZWxlY3Qub3B0aW9ucy5maW5kKG9wdGlvbiA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gb3B0aW9uLmxhYmVsLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChzZWFyY2hUZXJtKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaWYgKHNlYXJjaGVkT3B0aW9uKSB7XHJcbiAgICAgICAgICBzZWxlY3Quc2VsZWN0VmFsdWUoc2VhcmNoZWRPcHRpb24udmFsdWUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkT3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgcmV0dXJuIFsuLi5vcHRpb25zXS5tYXAob3B0aW9uID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbHVlOiBvcHRpb24udmFsdWUsXHJcbiAgICAgIGxhYmVsOiBvcHRpb24ubGFiZWwsXHJcbiAgICAgIHNlbGVjdGVkOiBvcHRpb24uc2VsZWN0ZWQsXHJcbiAgICAgIGVsZW1lbnQ6IG9wdGlvbixcclxuICAgIH1cclxuICB9KVxyXG59IiwiaW1wb3J0IHskfSBmcm9tIFwiLi4vY29tbW9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhY2NvcmRpb25TaG93KCkge1xyXG5cclxuICBsZXQgY3VycmVudFRlc3RJZCA9ICQoYFtkYXRhLXRlc3RpZF1gKVswXVxyXG4gIGlmIChjdXJyZW50VGVzdElkKSB7XHJcbiAgICBjdXJyZW50VGVzdElkID0gK2N1cnJlbnRUZXN0SWQuZGF0YXNldFsndGVzdGlkJ11cclxuICAgIGxldCBtZW51SXRlbUNvbGxlY3Rpb24gPSAkKCcudGVzdC1lZGl0LmFjY29yZGlvbiBhJylcclxuICAgIEFycmF5LmZyb20obWVudUl0ZW1Db2xsZWN0aW9uKS5maWx0ZXIoKGEpID0+IHtcclxuICAgICAgaWYgKCthLmRhdGFzZXQuaWQgPT09IGN1cnJlbnRUZXN0SWQpIHtcclxuICAgICAgICBhLmNsYXNzTGlzdC5hZGQoJ2N1cnJlbnQnKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcblxyXG4gIGxldCBidXR0b24gPSAkKCcuYWNjb3JkaW9uLW9wZW4nKVswXVxyXG4gIGlmIChidXR0b24pIHtcclxuICAgICQoYnV0dG9uKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGxldCBtZW51ID0gJCgnLmFjY29yZGlvbl93cmFwJylbMF1cclxuICAgICAgbWVudS5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJylcclxuICAgIH0pXHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyQsIHBvcHVwLCBwb3N0fSBmcm9tICcuLi8uLi9jb21tb24nXHJcblxyXG5leHBvcnQgY29uc3QgX3Rlc3QgPSB7XHJcblxyXG4gIG5leHRROiAoKSA9PiB7XHJcbiAgICBsZXQgY3VycmVudCA9IF90ZXN0LmN1cnJlbnRRKClcclxuICAgIGlmIChjdXJyZW50LmlkID4gY3VycmVudC5uYXZMZW5ndGggLSAyKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBsZXQgYWltTmF2SWQgPSBfdGVzdC5haW1OYXZJZEZ1bmN0aW9uKGN1cnJlbnQuaWQsICduZXh0JylcclxuICAgIGxldCBhaW1RRWwgPSBfdGVzdC5haW1RRWxGdW5jdGlvbihjdXJyZW50LCAnbmV4dCcpXHJcblxyXG4gICAgX3Rlc3QucHVzaE5hdihjdXJyZW50LmlkLCBhaW1OYXZJZClcclxuICAgIF90ZXN0LnB1c2hRKGN1cnJlbnQuUUVsLCBhaW1RRWwpXHJcbiAgfSxcclxuXHJcbiAgcHJldlE6ICgpID0+IHtcclxuICAgIGxldCBjdXJyZW50ID0gX3Rlc3QuY3VycmVudFEoKVxyXG4gICAgaWYgKGN1cnJlbnQuaWQgPCAxKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBsZXQgYWltTmF2SWQgPSBfdGVzdC5haW1OYXZJZEZ1bmN0aW9uKGN1cnJlbnQuaWQsICdiYWNrJylcclxuICAgIGxldCBhaW1RRWwgPSBfdGVzdC5haW1RRWxGdW5jdGlvbihjdXJyZW50LCAnYmFjaycpXHJcblxyXG4gICAgX3Rlc3QucHVzaE5hdihjdXJyZW50LmlkLCBhaW1OYXZJZClcclxuICAgIF90ZXN0LnB1c2hRKGN1cnJlbnQuUUVsLCBhaW1RRWwpXHJcbiAgfSxcclxuXHJcbiAgcHVzaE5hdjogKGN1cnJlbnRJZCwgYWltTmF2SWQpID0+IHtcclxuICAgIGxldCBjdXJyTmF2RWwgPSAkKCdbZGF0YS1wYWdpbmF0aW9uXScpW2N1cnJlbnRJZF1cclxuICAgIGN1cnJOYXZFbC5jbGFzc0xpc3QudG9nZ2xlKCduYXYtYWN0aXZlJylcclxuXHJcbiAgICBsZXQgTmF2RWwgPSAkKCdbZGF0YS1wYWdpbmF0aW9uXScpW2FpbU5hdklkXVxyXG4gICAgTmF2RWwuY2xhc3NMaXN0LnRvZ2dsZSgnbmF2LWFjdGl2ZScpXHJcbiAgfSxcclxuXHJcbiAgcHVzaFE6IChjdXJyZW50RWwsIGFpbVFFbCkgPT4ge1xyXG4gICAgY3VycmVudEVsLmNsYXNzTGlzdC50b2dnbGUoJ2ZsZXgxJylcclxuICAgIGFpbVFFbC5jbGFzc0xpc3QudG9nZ2xlKCdmbGV4MScpXHJcbiAgfSxcclxuXHJcbiAgYWltTmF2SWRGdW5jdGlvbjogKGN1cnJlbnRJZCwgZGlyZWN0aW9uKSA9PiB7XHJcbiAgICBsZXQgZGlyID0gY3VycmVudElkXHJcbiAgICBzd2l0Y2ggKHRydWUpIHtcclxuICAgICAgY2FzZSBkaXJlY3Rpb24gPT09ICduZXh0JzpcclxuICAgICAgICByZXR1cm4gZGlyICs9IDFcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIGRpcmVjdGlvbiA9PT0gJ2JhY2snOlxyXG4gICAgICAgIHJldHVybiBkaXIgLT0gMVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgYWltUUVsRnVuY3Rpb246IChjdXJyZW50LCBkaXJlY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICBjYXNlIGRpcmVjdGlvbiA9PT0gJ25leHQnOlxyXG4gICAgICAgIHJldHVybiBjdXJyZW50LlFOZXh0RWxcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIGRpcmVjdGlvbiA9PT0gJ2JhY2snOlxyXG4gICAgICAgIHJldHVybiBjdXJyZW50LlFQcmV2Y1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgY3VycmVudFE6ICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiAkKCcubmF2LWFjdGl2ZScpWzBdLmlubmVyVGV4dCAtIDEsXHJcbiAgICAgIFFFbDogJCgnLnF1ZXN0aW9uLmZsZXgxJylbMF0sXHJcbiAgICAgIG5hdkxlbmd0aDogJCgnW2RhdGEtcGFnaW5hdGlvbl0nKS5sZW5ndGgsXHJcbiAgICAgIFFQcmV2YzogJCgnLnF1ZXN0aW9uLmZsZXgxJylbMF0ucHJldmlvdXNFbGVtZW50U2libGluZyxcclxuICAgICAgUU5leHRFbDogJCgnLnF1ZXN0aW9uLmZsZXgxJylbMF0ubmV4dEVsZW1lbnRTaWJsaW5nLFxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG5cclxuICB2aWV3TW9kZWw6ICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiArd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJy8nKS5wb3AoKSxcclxuICAgICAgdGVzdF9uYW1lOiAkKCcjdGVzdF9uYW1lJykudGV4dCgpLFxyXG4gICAgICBlbmFibGU6ICQoJyNlbmFibGUnKVswXSxcclxuICAgICAgcGFyZW50OiAkKCdzZWxlY3QnKS5zZWxlY3RlZEluZGV4VmFsdWUoKSxcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBpZDogKGlkKSA9PiB7XHJcbiAgICByZXR1cm4gaWQgPz8gJCgnLnRlc3QtbmFtZScpWzBdLmRhdGFzZXQudGVzdGlkXHJcbiAgfSxcclxuICBjaGlsZHJlbjogKCkgPT4ge1xyXG4gICAgbGV0IGNoaWxkcmVuTGVuZ2h0ID0gJCgnLmNoaWxkcmVuJykubGVuZ3RoXHJcbiAgICBpZiAoY2hpbGRyZW5MZW5naHQpXHJcbiAgICAgIHJldHVybiBjaGlsZHJlbkxlbmdodFxyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfSxcclxuXHJcbiAgcGF0aF9jcmVhdGU6IGFzeW5jICgpID0+IHtcclxuICAgIGxldCB0ZXN0X3BhdGggPSBfdGVzdC5zZXJ2ZXJNb2RlbCgpXHJcbiAgICB0ZXN0X3BhdGguaWQgPSAwXHJcbiAgICB0ZXN0X3BhdGguaXNUZXN0ID0gMFxyXG4gICAgbGV0IHVybCA9IGAvdGVzdC9jcmVhdGVgXHJcbiAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCh1cmwsIHRlc3RfcGF0aClcclxuICAgIHJlcyA9IGF3YWl0IEpTT04ucGFyc2UocmVzKVxyXG4gICAgaWYgKHJlcykge1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYWRtaW5zYy90ZXN0L2VkaXQvJHtyZXMuaWQgLSAxfWBcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBuYW1lOiAoKSA9PiB7XHJcbiAgICByZXR1cm4gJCgnLnRlc3QtbmFtZScpWzBdLmlubmVyVGV4dFxyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZTogYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IHRlc3QgPSBfdGVzdC5zZXJ2ZXJNb2RlbCgpXHJcbiAgICB0ZXN0LmlkID0gMFxyXG4gICAgdGVzdC5pc1Rlc3QgPSAxXHJcbiAgICBsZXQgdXJsID0gYC90ZXN0L3VwZGF0ZU9yQ3JlYXRlYFxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QodXJsLCB0ZXN0KVxyXG4gICAgcmVzID0gYXdhaXQgSlNPTi5wYXJzZShyZXMpXHJcbiAgICBkZWJ1Z2dlclxyXG4gICAgaWYgKHJlcykge1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYWRtaW5zYy90ZXN0L2VkaXQvJHtyZXMuaWR9YFxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHNlbGVjdGVkVmFsdWVDdXN0b21TZWxlY3QoY2xhc3NOYW1lKSB7XHJcbiAgICBsZXQgc2VsZWN0ID0gJChgW2RhdGEtZmllbGQ9JHtjbGFzc05hbWV9XWApWzBdXHJcbiAgICBsZXQgc2VsZWN0ZWQgPSBbLi4uc2VsZWN0Lm9wdGlvbnNdLmZpbHRlcigob3B0KT0+b3B0LnNlbGVjdGVkKVxyXG4gICAgaWYgKHNlbGVjdGVkKSB7XHJcbiAgICAgIHJldHVybiArc2VsZWN0ZWRbMF0udmFsdWVcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBzZXJ2ZXJNb2RlbDogKCkgPT4ge1xyXG5cclxuICAgIGxldCBtb2RlbCA9IHtcclxuICAgICAgaWQ6ICt3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnLycpLnBvcCgpLFxyXG4gICAgICB0ZXN0X25hbWU6ICQoJyN0ZXN0X25hbWUnKVswXS52YWx1ZSxcclxuICAgICAgaXNUZXN0OiArJCgnW2lzVGVzdF0nKVswXS5nZXRBdHRyaWJ1dGUoJ2lzVGVzdCcpLFxyXG4gICAgICAvLyBlbmFibGU6IF90ZXN0LnNlbGVjdGVkVmFsdWVDdXN0b21TZWxlY3QoJ2VuYWJsZScpLFxyXG4gICAgICAvLyBwYXJlbnQ6IF90ZXN0LnNlbGVjdGVkVmFsdWVDdXN0b21TZWxlY3QoJ3BhcmVudCcpLFxyXG4gICAgfVxyXG4gICAgLy8gZGVidWdnZXJcclxuICAgIGxldCBmaWVsZHMgPSAkKCcuY3VzdG9tLXNlbGVjdCcpO1xyXG4gICAgW10uZm9yRWFjaC5jYWxsKGZpZWxkcyxmdW5jdGlvbiAoZmllbGQpe1xyXG4gICAgICBtb2RlbFtmaWVsZC5kYXRhc2V0WydmaWVsZCddXT1maWVsZC5kYXRhc2V0WydpZCddXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIG1vZGVsXHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlOiBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgbW9kZWwgPSBfdGVzdC5zZXJ2ZXJNb2RlbCgpXHJcbiAgICBsZXQgdXJsID0gYC9hZG1pbnNjL3Rlc3QvdXBkYXRlLyR7bW9kZWwuaWR9YFxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QodXJsLCBtb2RlbClcclxuICAgIHJlcyA9IGF3YWl0IEpTT04ucGFyc2UocmVzKVxyXG4gICAgaWYgKHJlcykge1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYWRtaW5zYy90ZXN0L2VkaXQvJHttb2RlbC5pZH1gXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgZGVsZXRlOiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgaWYgKF90ZXN0LmNoaWxkcmVuKCkpIHtcclxuICAgICAgcG9wdXAuc2hvdygn0KHQvdCw0YfQsNC70LAg0YPQtNCw0LvQuNGC0LUg0LLRgdC1INGC0LXRgdGC0Ysg0LjQtyDQv9Cw0L/QutC4JylcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlkID0gX3Rlc3QuaWQoKVxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9hZG1pbnNjL3Rlc3QvZGVsZXRlJywge2lkfSlcclxuICAgIHJlcyA9IGF3YWl0IEpTT04ucGFyc2UocmVzKVxyXG4gICAgaWYgKHJlcy5ub3RBZG1pbikge1xyXG4gICAgICBwb3B1cC5zaG93KCfQktC40LTQuNC80L7RgdGC0Ywg0YLQtdGB0YLQsCDRgdC60YDRi9GC0LAuINCn0YLQvtCx0Ysg0YPQtNCw0LvQuNGC0Ywg0L/QvtC70L3QvtGB0YLRjNGOIC0g0L7QsdGA0LDRgtC40YLQtdGB0Ywg0Log0JPQlCcpXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcvYWRtaW5zYy90ZXN0L2VkaXQvNDAwJ1xyXG4gICAgICB9LCA0MDAwKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uID0gJy9hZG1pbnNjL3Rlc3QvZWRpdC80MDAnXHJcbiAgICB9XHJcblxyXG4gIH0sXHJcblxyXG59IiwiaW1wb3J0IHtfdGVzdH0gZnJvbSBcIi4vbW9kZWwvdGVzdFwiO1xyXG5pbXBvcnQge19xdWVzdGlvbn0gZnJvbSBcIi4vbW9kZWwvcXVlc3Rpb25cIjtcclxuaW1wb3J0IHtfYW5zd2VyfSBmcm9tIFwiLi9tb2RlbC9hbnN3ZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRlc3RFZGl0QWN0aW9ucyh0YXJnZXQsIHR5cGUpIHtcclxuXHJcbiAgaWYgKHR5cGUgPT09ICdjbGljaycpIHtcclxuICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICBjYXNlIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rlc3QtcGF0aF9fdXBkYXRlJyk6IHtcclxuICAgICAgICBfdGVzdC51cGRhdGUoKVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGVzdF9fdXBkYXRlJyk6IHtcclxuICAgICAgICBfdGVzdC51cGRhdGUoKVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGVzdF9fc2F2ZScpOiB7XHJcbiAgICAgICAgX3Rlc3QudXBkYXRlKClcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rlc3RfX2RlbGV0ZScpOiB7XHJcbiAgICAgICAgX3Rlc3QuZGVsZXRlKClcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rlc3QtcGF0aF9fY3JlYXRlJyk6IHtcclxuICAgICAgICBfdGVzdC5wYXRoX2NyZWF0ZSgpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXN0X19jcmVhdGUnKToge1xyXG4gICAgICAgIF90ZXN0LmNyZWF0ZSgpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhc2UgISF0YXJnZXQuY2xvc2VzdCgnLnF1ZXN0aW9uX19zYXZlJyk6IHtcclxuICAgICAgICBfcXVlc3Rpb24uc2F2ZSh0YXJnZXQpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAhIXRhcmdldC5jbG9zZXN0KCcucXVlc3Rpb25fX3Nob3ctYW5zd2VycycpOiB7XHJcbiAgICAgICAgX3F1ZXN0aW9uLnNob3dBbnN3ZXJzKHRhcmdldClcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICEhdGFyZ2V0LmNsb3Nlc3QoJy5xdWVzdGlvbl9fZGVsZXRlJyk6IHtcclxuICAgICAgICBfcXVlc3Rpb24uZGVsZXRlKHRhcmdldClcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3F1ZXN0aW9uX19jcmVhdGUtYnV0dG9uJyk6IHtcclxuICAgICAgICBfcXVlc3Rpb24uY3JlYXRlKClcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICEhdGFyZ2V0LmNsb3Nlc3QoJy5kZWxldGUnKToge1xyXG4gICAgICAgIF9hbnN3ZXIuZGVsKHRhcmdldClcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Fuc3dlcl9fY3JlYXRlLWJ1dHRvbicpOiB7XHJcbiAgICAgICAgX2Fuc3dlci5jcmVhdGUodGFyZ2V0KVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAodHlwZSA9PT0gJ2NoYW5nZScpIHtcclxuICAgICAgLy8gZGVidWdnZXJcclxuICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICBjYXNlICEhdGFyZ2V0LmNsb3Nlc3QoJy5xdWVzdGlvbi1lZGl0X19wYXJlbnQtc2VsZWN0Jyk6IHtcclxuICAgICAgICBfcXVlc3Rpb24uY2hhbmdlUGFyZW50KHRhcmdldClcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgJy4vdGVzdC1lZGl0LnNjc3MnXHJcbmltcG9ydCAnLi4vY29tcG9uZW50cy9mb290ZXIvZm9vdGVyLnNjc3MnXHJcblxyXG5pbXBvcnQgJy4vdGVzdC1lZGl0LW1lbnUuc2NzcydcclxuaW1wb3J0ICcuLi9jb21wb25lbnRzL3BvcHVwLnNjc3MnXHJcblxyXG5pbXBvcnQgJy4vdGVzdC11cGRhdGUnXHJcbi8vIGltcG9ydCAnLi9wYXRoLWNyZWF0ZSdcclxuaW1wb3J0ICcuLi9BZG1pbi9hZG1pbidcclxuXHJcbmltcG9ydCB7JH0gZnJvbSAnLi4vY29tbW9uJ1xyXG5cclxuaW1wb3J0IHtfcXVlc3Rpb259IGZyb20gXCIuL21vZGVsL3F1ZXN0aW9uXCJcclxuaW1wb3J0IHNvcnRhYmxlIGZyb20gXCIuLi9jb21wb25lbnRzL3NvcnRhYmxlXCJcclxuaW1wb3J0IFdEU1NlbGVjdCBmcm9tIFwiLi4vY29tcG9uZW50cy9zZWxlY3QvV0RTU2VsZWN0XCJcclxuaW1wb3J0IGFjY29yZGlvblNob3cgZnJvbSBcIi4vYWNjb3JkaW9uLXNob3dcIjtcclxuXHJcbmltcG9ydCB0ZXN0RWRpdEFjdGlvbnMgZnJvbSBcIi4vdGVzdEVkaXRBY3Rpb25zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZXN0RWRpdCgpIHtcclxuICBsZXQgdGVzdEVkaXQgPSAkKCcudGVzdC1lZGl0LXdyYXBwZXInKVxyXG4gIGlmICh0ZXN0RWRpdCkge1xyXG5cclxuICAgIHNvcnRhYmxlKCcudGVzdC1lZGl0LXdyYXBwZXIucXVlc3Rpb25zJylcclxuXHJcblxyXG4gICAgLy8gZGVidWdnZXJcclxuICAgIGxldCBjdXN0b21TZWxlY3RzID0gJCgnW2N1c3RvbS1zZWxlY3RdJyk7XHJcbiAgICBbXS5mb3JFYWNoLmNhbGwoY3VzdG9tU2VsZWN0cywgZnVuY3Rpb24gKHNlbGVjdCkge1xyXG4gICAgICBuZXcgV0RTU2VsZWN0KHNlbGVjdClcclxuICAgIH0pO1xyXG5cclxuLy8g0L/RgNC4INGB0L7Qt9C00LDQvdC40Lgg0L3QvtCy0L7Qs9C+INGC0LXRgdGC0LAg0L/QvtC60LDQt9Cw0YLRjCDQv9GD0YHRgtC+0Lkg0LLQvtC/0YDQvtGBXHJcbiAgICBpZiAoIV9xdWVzdGlvbi5xdWVzdGlvbnMoKS5sZW5ndGhcclxuICAgICAgJiYgL1xcL2FkbWluc2NcXC90ZXN0XFwvZWRpdC8udGVzdCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpKSB7XHJcbiAgICAgIF9xdWVzdGlvbi5zaG93Rmlyc3QoKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGRlYnVnZ2VyXHJcbiAgICBsZXQgdGVzdEVkaXRXcmFwcGVyID0gJCgnLnRlc3QtZWRpdC13cmFwcGVyJylbMF1cclxuICAgIGlmICh0ZXN0RWRpdFdyYXBwZXIpIHtcclxuICAgICAgdGVzdEVkaXRXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcclxuICAgICAgICAoe3RhcmdldH0pID0+IHtcclxuICAgICAgICAgIHRlc3RFZGl0QWN0aW9ucyh0YXJnZXQsICdjbGljaycpXHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICAgIHRlc3RFZGl0V3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLFxyXG4gICAgICAgICh7dGFyZ2V0fSkgPT4ge1xyXG4gICAgICAgICAgdGVzdEVkaXRBY3Rpb25zKHRhcmdldCwgJ2NoYW5nZScpXHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0ICcuL3Rlc3QtcGFnaW5hdGlvbi5zY3NzJ1xyXG5pbXBvcnQgeyR9IGZyb20gXCIuLi8uLi9jb21tb25cIjtcclxuXHJcblxyXG4kKCcucGFnaW5hdGlvbicpLm9uKCdjbGljaycsIGhhbmRsZUNsaWNrKVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQ2xpY2soe3RhcmdldH0pIHtcclxuICAgIC8vIGRlYnVnZ2VyXHJcbiAgICBpZiAoIXRhcmdldC5kYXRhc2V0LnBhZ2luYXRpb24pIHJldHVybjtcclxuXHJcbi8vLyBnZXQgY2xpY2tlZCBidXR0b24gUmV0dXJuIGlmIGNsaWNrZWQgaXMgYWN0aXZlXHJcbiAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbmF2LWFjdGl2ZScpKSByZXR1cm5cclxuXHJcbiAgICBsZXQgYWN0aXZlX2J0biA9ICQoJy5wYWdpbmF0aW9uIC5hY3RpdmUnKVswXVxyXG4vLy8vIGNoYW5nZSBhY3RpdmUgYnV0dG9uXHJcbiAgICBhY3RpdmVfYnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXHJcbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuXHJcbiAgICBsZXQgaWRfdG9faGlkZSA9IGFjdGl2ZV9idG4uZGF0YXNldFsncGFnaW5hdGlvbiddXHJcbiAgICAkKGAucXVlc3Rpb25bZGF0YS1pZD1cIiR7aWRfdG9faGlkZX1cIl1gKS5yZW1vdmVDbGFzcygnc2hvdycpXHJcblxyXG4gICAgbGV0IGlkX3RvX3Nob3cgPSB0YXJnZXQuZGF0YXNldFsncGFnaW5hdGlvbiddXHJcbiAgICAkKGAucXVlc3Rpb25bZGF0YS1pZD1cIiR7aWRfdG9fc2hvd31cIl1gKS5hZGRDbGFzcygnc2hvdycpXHJcbn1cclxuZnVuY3Rpb24gbmF2SW5pdCgpIHtcclxuICAgIGxldCBuYXZfYnV0dG9ucyA9ICQoJ1tkYXRhLXBhZ2luYXRpb25dJylcclxuICAgIGlmICghbmF2X2J1dHRvbnNbMF0pIHJldHVybiBmYWxzZVxyXG4gICAgQXJyYXkuZnJvbShuYXZfYnV0dG9ucykubWFwKChuYXYpPT57XHJcbiAgICAgICAgbmF2LmNsYXNzTGlzdC5yZW1vdmUoJ25hdi1hY3RpdmUnKVxyXG4gICAgfSlcclxuICAgIG5hdl9idXR0b25zWzBdLmNsYXNzTGlzdC5hZGQoJ25hdi1hY3RpdmUnKVxyXG59XHJcblxyXG5leHBvcnQgeyBuYXZJbml0fVxyXG5cclxuXHJcbiIsImltcG9ydCAnLi9kby5zY3NzJ1xyXG5cclxuaW1wb3J0IHtfdGVzdH0gZnJvbSBcIi4vbW9kZWwvdGVzdFwiXHJcbmltcG9ydCB7cG9zdCwgJH0gZnJvbSAnLi4vY29tbW9uJ1xyXG5pbXBvcnQge25hdkluaXR9IGZyb20gJy4uL2NvbXBvbmVudHMvdGVzdC1wYWdpbmF0aW9uL3Rlc3QtcGFnaW5hdGlvbidcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZXN0RG8oKSB7XHJcblxyXG4vL9Ch0LrRgNGL0YLRjCDQstGB0LUg0LLQvtC/0YDQvtGB0YtcclxuICAkKCcucXVlc3Rpb24nKS5yZW1vdmVDbGFzcyhcImZsZXgxXCIpXHJcblxyXG4vL9Cf0L7QutCw0LfRgtGMINC/0LXRgNCy0YvQuSDQstC+0L/RgNC+0YFcclxuICAkKCcucXVlc3Rpb246Zmlyc3QtY2hpbGQnKS5hZGRDbGFzcyhcImZsZXgxXCIpXHJcbi8vINCd0LDQttCw0YLRjCDQv9C10YDQstGD0Y7QutC90L7Qv9C60YMgbmF2aWdhdGlvblxyXG4gIG5hdkluaXQoKVxyXG4gICQoJy50ZXN0LWRvX19jb250ZW50IFt0eXBlPVwiY2hlY2tib3hcIl0nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgbGV0IGEgPSBlLnRhcmdldC5sYWJlbHNbMF1cclxuICAgIGEuY2xhc3NMaXN0LnRvZ2dsZSgncHVzaGVkJylcclxuICB9KVxyXG5cclxuXHJcbiAgJCgnI3ByZXYnKS5vbignY2xpY2snLCBfdGVzdC5wcmV2USlcclxuICAkKCcjbmV4dCcpLm9uKCdjbGljaycsIF90ZXN0Lm5leHRRKVxyXG5cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vLy8vLy8vLy8vICBSRVNVTFRTICBURVNUICDQl9Cw0LrQvtC90YfQuNGC0Ywg0YLQtdGB0YIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLy8g0LXRgdC70Lgg0Y3RgtC+INGA0LXQt9GD0LvRjNGC0LDRgiDRgtC10YHRgtCwLCDQtNC10LDQutGC0LjQstC40YDRg9C60Lwg0LrQvdC+0L/QutGDINCX0LDQutC+0L3Rh9C40YLRjCDRgtC10YHRglxyXG4gIGxldCBidXR0b24gPSAkKCcudGVzdC1kb19fZmluaXNoLWJ0bicpWzBdXHJcbiAgaWYgKGJ1dHRvbikge1xyXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5tYXRjaCgnXi90ZXN0L3Jlc3VsdC8uPycpKSB7XHJcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdpbmFjdGl2ZScpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAkKCcudGVzdC1kb19fZmluaXNoLWJ0bicpLm9uKCdjbGljaycsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgbGV0IGJ1dHRvbiA9IGUudGFyZ2V0O1xyXG4gICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2luYWN0aXZlJykpIHJldHVybiBmYWxzZVxyXG4gICAgaWYgKGJ1dHRvbi5pZCAhPT0gJ2J0bm4nKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBpZiAoYnV0dG9uLnRleHQgPT0gXCLQn9Cg0J7QmdCi0Jgg0KLQldCh0KIg0JfQkNCd0J7QktCeXCIpIHtcclxuICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBjb3JyQW5zd2VycyA9IGF3YWl0IHBvc3QoJy90ZXN0L2dldENvcnJlY3RBbnN3ZXJzJywge30pXHJcbiAgICBjb3JyQW5zd2VycyA9IEpTT04ucGFyc2UoY29yckFuc3dlcnMpXHJcbiAgICBsZXQgZXJyb3JDbnQgPSBjb2xvclZpZXcoY29yckFuc3dlcnMpXHJcbiAgICBsZXQgZGF0YSA9IG9ialRvU2VydmVyKGVycm9yQ250KVxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9hZG1pbnNjL3Rlc3RyZXN1bHQvY2FjaGVQYWdlU2VuZEVtYWlsJywgZGF0YSlcclxuICAgIGlmIChyZXM9PT0nb2snKSB7XHJcbiAgICAgICQoXCIjYnRublwiKVswXS5ocmVmID0gbG9jYXRpb24uaHJlZlxyXG4gICAgICAkKFwiI2J0bm5cIilbMF0udGV4dCA9IFwi0J/QoNCe0JnQotCYINCi0JXQodCiINCX0JDQndCe0JLQnlwiXHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgZnVuY3Rpb24gb2JqVG9TZXJ2ZXIoZXJyb3JDbnQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8vIHRva2VuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJ0b2tlblwiXScpLmdldEF0dHJpYnV0ZSgnY29udGVudCcpLFxyXG4gICAgICBxdWVzdGlvbkNudDogJCgnLnF1ZXN0aW9uJykubGVuZ3RoLFxyXG4gICAgICBlcnJvckNudDogZXJyb3JDbnQsXHJcbiAgICAgIGh0bWw6IGA8IURPQ1RZUEUgJHtkb2N1bWVudC5kb2N0eXBlLm5hbWV9PmAgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MLFxyXG4gICAgICB0ZXN0aWQ6ICQoJ1tkYXRhLXRlc3QtaWRdJylbMF0uZGF0YXNldC50ZXN0SWQsXHJcbiAgICAgIHRlc3RuYW1lOiAkKCcudGVzdC1uYW1lJylbMF0uaW5uZXJUZXh0LFxyXG4gICAgICB1c2VyOiAkKCcudXNlci1tZW51X19maW8nKVswXS5pbm5lclRleHQsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gY29sb3JWaWV3KGNvcnJlY3RBbnN3ZXJzKSB7XHJcbiAgICBsZXQgcSA9ICQoJy5xdWVzdGlvbicpO1xyXG4gICAgW10ubWFwLmNhbGwocSwgZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XHJcbiAgICAgIGxldCBhbnN3ZXJzID0gcXVlc3Rpb24ucXVlcnlTZWxlY3RvckFsbCgnLmEnKVxyXG4gICAgICBsZXQgZXJyb3JzID0gW107XHJcbiAgICAgIFtdLm1hcC5jYWxsKGFuc3dlcnMsIGZ1bmN0aW9uIChhbnN3ZXIpIHtcclxuICAgICAgICBsZXQgaW5wdXQgPSAkKGFuc3dlcikuZmluZCgnaW5wdXQnKVxyXG4gICAgICAgIGxldCBpZCA9IGFuc3dlci5kYXRhc2V0LmlkXHJcbiAgICAgICAgY2hlY2tDb3JyZWN0QW5zd2VycyhlcnJvcnMsIGlkLCBjb3JyZWN0QW5zd2VycywgaW5wdXQsIGFuc3dlcilcclxuICAgICAgfSlcclxuXHJcbiAgICAgIGxldCBpZCA9IHF1ZXN0aW9uLmRhdGFzZXRbJ2lkJ10gLy8gaWQgcXVlc3Rpb25cclxuICAgICAgbGV0IHBhZ2luSXRlbSA9ICQoYC5wYWdpbmF0aW9uIFtkYXRhLXBhZ2luYXRpb249JyR7K2lkfSddYClbMF1cclxuICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcclxuICAgICAgICAkKHBhZ2luSXRlbSkuYWRkQ2xhc3MoJ3JlZFNoYWRvdycpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJChwYWdpbkl0ZW0pLmFkZENsYXNzKCdncmVlblNoYWRvdycpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICByZXR1cm4gJCgnLnJlZFNoYWRvdycpLmxlbmd0aFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2hlY2tDb3JyZWN0QW5zd2VycyhlcnJvcnMsIGlkLCBjb3JyZWN0QW5zd2VycywgaW5wdXQsIGFuc3dlcikge1xyXG4gICAgbGV0IGNvcnJlY3RBbnNlciA9IGNvcnJlY3RBbnN3ZXJzLmluZGV4T2YoaWQpICE9PSAtMVxyXG5cclxuICAgIGlmIChpbnB1dC5jaGVja2VkICYmIGNvcnJlY3RBbnNlcikgey8vIGNoZWNrYm94INC90LDQttCw0YIuINCwINCyIGNvcnJlY3QgYW5zd2VyINC90LXRgtGDLiDQsiBjb3JyZWN0X2Fuc3dlcnMg0LXRgdGC0YwsINC10LPQviDQstGB0LXQs9C00LAg0L/QvtC00YHQstC10YfQuNCy0LDQtdC8INC30LXQu9C10L3Ri9C8XHJcbiAgICAgIGFuc3dlci5jbGFzc0xpc3QuYWRkKCdkb25lJyk7IC8vZ3JlZW4gY2hlY2sg0LfQtdC70LXQvdGL0Lkg0LfQvdCw0YfQtdC6XHJcbiAgICB9IGVsc2UgaWYgKGlucHV0LmNoZWNrZWQgJiYgIWNvcnJlY3RBbnNlcikgey8vIGNoZWNrYm94INC90LDQttCw0YIs0Lgg0LXRgdGC0Ywg0LIgY29ycmVjdCBhbnN3ZXIuINCyIGNvcnJlY3RfYW5zd2VycyDQvdC10YIsINC60L3QvtC/0LrQsCDQvdC1INC90LDQttCw0YLQsFxyXG4gICAgICBlcnJvcnMucHVzaCh0cnVlKVxyXG4gICAgfSBlbHNlIGlmICghaW5wdXQuY2hlY2tlZCAmJiBjb3JyZWN0QW5zZXIpIHsvLyDQutC90L7Qv9C60LAg0L3QtSDQvdCw0LbQsNGC0LAsINCyIGNvcnJlY3RfYW5zd2VycyDQtdGB0YLRjFxyXG4gICAgICBhbnN3ZXIuY2xhc3NMaXN0LmFkZCgnZG9uZScpOyAvL2dyZWVuIGNoZWNrINC30LXQu9C10L3Ri9C5INC30L3QsNGH0LXQulxyXG4gICAgICBlcnJvcnMucHVzaCh0cnVlKVxyXG4gICAgfSBlbHNlIGlmICghaW5wdXQuY2hlY2tlZCAmJiAhY29ycmVjdEFuc2VyKSB7Ly8g0LrQvdC+0L/QutCwINC90LUg0L3QsNC20LDRgtCwLCDQsiBjb3JyZWN0X2Fuc3dlcnMg0L3QtdGCXHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cclxuIiwiaW1wb3J0ICcuL3VzZXJzLnNjc3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdCgpe1xyXG5cclxufSIsIi8vIGltcG9ydCByaWdodHMgZnJvbSAnLi4vUmlnaHRzL3JpZ2h0cydcclxuaW1wb3J0IHVzZXJzIGZyb20gJy4vdXNlcnMnXHJcbi8vIGltcG9ydCByaWdodHMgZnJvbSBcIi4vcmlnaHRzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0aW5ncygpe1xyXG5cclxuICAvLyByaWdodHMoKVxyXG4gIHVzZXJzKClcclxuXHJcbn0iLCJpbXBvcnQgJy4vbGlzdC5zY3NzJztcclxuaW1wb3J0IHskLCBwb3N0LCBwb3B1cH0gZnJvbSAnLi4vLi4vY29tbW9uJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3QoKSB7XHJcbiAgLy8gZGVidWdnZXI7XHJcblxyXG4gIGNvbnN0IHRhYmxlcyA9ICQoJy5jdXN0b20tbGlzdF9fd3JhcHBlcicpXHJcbiAgaWYgKHRhYmxlcykge1xyXG4gICAgW10uZm9yRWFjaC5jYWxsKHRhYmxlcywgZnVuY3Rpb24gKHRhYmxlKSB7XHJcblxyXG4gICAgICBjb25zdCBjb250ZW50ZWRpdGFibGUgPSAkKCdbY29udGVudGVkaXRhYmxlXScpXHJcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCcuaGVhZCcpXHJcbiAgICAgIGNvbnN0IHNvcnRhYmxlcyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXNvcnRdJylcclxuICAgICAgY29uc3QgaW5wdXRzID0gJCh0YWJsZSkuZmluZEFsbCgnLmhlYWQgaW5wdXQnKVxyXG4gICAgICBjb25zdCBpZHMgPSAkKHRhYmxlKVswXS5xdWVyeVNlbGVjdG9yQWxsKCcuaWQ6bm90KC5oZWFkJylcclxuICAgICAgY29uc3QgbW9kZWxOYW1lID0gdGFibGUuZGF0YXNldFsnbW9kZWwnXVxyXG4gICAgICBjb25zdCByb3dzID0gW11cclxuXHJcbiAgICAgICQodGFibGUpLm9uKCdjbGljaycsIGhhbmRsZUNsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAkKHRhYmxlKS5vbigna2V5dXAnLCBoYW5kbGVLZXlVcC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgIC8vLyBERUJPVU5DRVxyXG4gICAgICBjb25zdCBkZWJvdW5jZSA9IChmbiwgdGltZSA9IDcwMCkgPT4ge1xyXG4gICAgICAgIGxldCB0aW1lb3V0O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBjb25zdCBmdW5jdGlvbkNhbGwgPSAoKSA9PiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb25DYWxsLCB0aW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGRlYm91bmNlZElucHV0ID0gZGVib3VuY2UoaGFuZGxlSW5wdXQpXHJcblxyXG5cclxuICAgICAgZnVuY3Rpb24gaGFuZGxlS2V5VXAoe3RhcmdldH0pIHtcclxuXHJcbiAgICAgICAgLy8gY29udGVudGVkaXRhYmxlXHJcbiAgICAgICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpKSB7XHJcbiAgICAgICAgICBkZWJvdW5jZWRJbnB1dCh0YWJsZSwgY29udGVudGVkaXRhYmxlLCB0YXJnZXQpXHJcblxyXG4gICAgICAgICAgLy8vIHNlYXJjaFxyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5oZWFkJykpIHtcclxuICAgICAgICAgIGxldCBoZWFkZXIgPSB0YXJnZXQuY2xvc2VzdCgnLmhlYWQnKVxyXG4gICAgICAgICAgbGV0IGluZGV4ID0gW10uZmluZEluZGV4LmNhbGwoaGVhZGVycywgKGVsLCBpLCBpbnB1dHMpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsID09PSBoZWFkZXJcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICBzZWFyY2goaW5kZXgsIHRhcmdldClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKHt0YXJnZXR9KSB7XHJcblxyXG4gICAgICAgIC8vLyBjcmVhdGVcclxuICAgICAgICBpZiAodGFyZ2V0LmNsYXNzTmFtZSA9PT0gJ2FkZC1tb2RlbCcpIHtcclxuICAgICAgICAgIG1vZGVsQ3JlYXRlKG1vZGVsTmFtZSlcclxuXHJcbiAgICAgICAgICAvLy8gZGVsZXRlXHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgIHRhcmdldC5jbGFzc05hbWUgPT09ICcuZGVsOm5vdCguaGVhZCknIHx8XHJcbiAgICAgICAgICB0YXJnZXQuY2xvc2VzdCgnLmRlbDpub3QoLmhlYWQpJykpIHtcclxuICAgICAgICAgIG1vZGVsRGVsKHRhcmdldC5jbG9zZXN0KCcuZGVsOm5vdCguaGVhZCknKSlcclxuXHJcbiAgICAgICAgICAvLy8gZWRpdFxyXG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmNsYXNzTmFtZSA9PT0gJy5lZGl0Om5vdCguaGVhZCknIHx8XHJcbiAgICAgICAgICB0YXJnZXQuY2xvc2VzdCgnLmVkaXQ6bm90KC5oZWFkKScpKSB7XHJcbiAgICAgICAgICBsZXQgaWQgPSB0YXJnZXQuY2xvc2VzdCgnLmVkaXQ6bm90KC5oZWFkKScpLmRhdGFzZXRbJ2lkJ11cclxuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGAvYWRtaW5zYy8ke21vZGVsTmFtZX0vZWRpdC8ke2lkfWA7XHJcblxyXG4gICAgICAgICAgLy8vIHNvcnRcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2hlYWQnKSkge1xyXG4gICAgICAgICAgbGV0IGhlYWRlciA9IHRhcmdldC5jbG9zZXN0KCcuaGVhZCcpXHJcbiAgICAgICAgICBsZXQgaW5kZXggPSBbXS5maW5kSW5kZXguY2FsbChoZWFkZXJzLCAoZWwsIGksIGlucHV0cykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZWwgPT09IGhlYWRlclxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIHNvcnRDb2x1bW4oaW5kZXgpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBERUxFVEVcclxuICAgICAgYXN5bmMgZnVuY3Rpb24gbW9kZWxEZWwoZWwpIHtcclxuICAgICAgICAvLyBkZWJ1Z2dlclxyXG4gICAgICAgIGlmICghY29uZmlybSgn0KPQtNCw0LvQuNGC0Ywg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPPycpKSByZXR1cm5cclxuICAgICAgICBsZXQgaWQgPSBlbC5kYXRhc2V0WydpZCddXHJcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoYC9hZG1pbnNjLyR7bW9kZWxOYW1lfS9kZWxldGVgLCB7aWR9KVxyXG4gICAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgICAgIGlmIChyZXMubXNnID09PSAnb2snKSB7XHJcbiAgICAgICAgICBkZWxWaWV3KGlkKVxyXG4gICAgICAgICAgcG9wdXAuc2hvdyhgaWQgOiAke2lkfSDRg9C00LDQu9C10L3QvmApXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBkZWxWaWV3KGlkKSB7XHJcbiAgICAgICAgbGV0IGFyciA9ICQoYFtkYXRhLWlkPScke2lkfSddYCk7XHJcbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGFyciwgZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICBlbC5yZW1vdmUoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICAvLyBDUkVBVEVcclxuICAgICAgYXN5bmMgZnVuY3Rpb24gbW9kZWxDcmVhdGUobW9kZWxOYW1lLCBlKSB7XHJcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoYC9hZG1pbnNjLyR7bW9kZWxOYW1lfS9jcmVhdGVgLCB7fSlcclxuICAgICAgICByZXMgPSBKU09OLnBhcnNlKHJlcylcclxuICAgICAgICBpZiAocmVzLmlkKSB7XHJcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAvYWRtaW5zYy8ke21vZGVsTmFtZX0vc2hvd2BcclxuICAgICAgICAgIC8vIG5ld1JvdyhyZXMuaWQgLSAxKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbmV3Um93KGlkKSB7XHJcbiAgICAgICAgbGV0IFJvdyA9IFsuLi5yb3dzWzBdXTtcclxuICAgICAgICBbXS5mb3JFYWNoLmNhbGwoUm93LCBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgIGxldCBuZXdFbCA9IGVsLmNsb25lTm9kZSh0cnVlKVxyXG4gICAgICAgICAgbGV0IHRhYmxlQ29udGVudCA9ICQodGFibGUpLmZpbmQoJy5jdXN0b20tbGlzdCcpXHJcbiAgICAgICAgICB0YWJsZUNvbnRlbnQuYXBwZW5kQ2hpbGQobmV3RWwpXHJcbiAgICAgICAgICBpZiAoWydpZCddLmluY2x1ZGVzKG5ld0VsLmNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgbmV3RWwuaW5uZXJUZXh0ID0gaWRcclxuICAgICAgICAgIH0gZWxzZSBpZiAoIVsnZGVsJywgJ2VkaXQnLCAnc2F2ZSddLmluY2x1ZGVzKG5ld0VsLmNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgbmV3RWwuaW5uZXJUZXh0ID0gJydcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG5ld0VsLmRhdGFzZXRbJ2lkJ10gPSBpZFxyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8vIFNFQVJDSFxyXG4gICAgICBmdW5jdGlvbiBzaG93QWxsUm93cygpIHtcclxuICAgICAgICBbXS5mb3JFYWNoLmNhbGwocm93cywgKHJvdykgPT4ge1xyXG4gICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHJvdywgZWwgPT4ge1xyXG4gICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHNlYXJjaChpbmRleCwgaW5wdXQpIHtcclxuICAgICAgICBzaG93QWxsUm93cygpXHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpbnB1dC52YWx1ZTtcclxuXHJcbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGlucHV0cywgKGlucCkgPT4ge1xyXG4gICAgICAgICAgaWYgKGlucCAhPT0gaW5wdXQpIGlucC52YWx1ZSA9ICcnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIFtdLmZvckVhY2guY2FsbChyb3dzLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICBjb25zdCBzdHIgPSByb3dbaW5kZXhdLmlubmVyVGV4dFxyXG4gICAgICAgICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChgJHt2YWx1ZX1gLCAnZ2knKVxyXG4gICAgICAgICAgaWYgKCFzdHIubWF0Y2gocmVnZXhwKSkge1xyXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwocm93LCBlbCA9PiB7XHJcbiAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gU09SVFxyXG4gICAgICBmdW5jdGlvbiBzb3J0Q29sdW1uKGluZGV4KSB7XHJcbiAgICAgICAgLy8g0J/QvtC70YPRh9C40YLRjCDRgtC10LrRg9GJ0LXQtSDQvdCw0L/RgNCw0LLQu9C10L3QuNC1XHJcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tpbmRleF0gfHwgJ2FzYydcclxuXHJcbiAgICAgICAgLy8g0KTQsNC60YLQvtGAINC/0L4g0L3QsNC/0YDQsNCy0LvQtdC90LjRjlxyXG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSAoZGlyZWN0aW9uID09PSAnYXNjJykgPyAxIDogLTFcclxuXHJcbiAgICAgICAgY29uc3QgbmV3Um93cyA9IEFycmF5LmZyb20ocm93cylcclxuXHJcbiAgICAgICAgbmV3Um93cy5zb3J0KGZ1bmN0aW9uIChyb3dBLCByb3dCKSB7XHJcbiAgICAgICAgICBjb25zdCBjZWxsQSA9IHJvd0FbaW5kZXhdLmlubmVySFRNTFxyXG4gICAgICAgICAgY29uc3QgY2VsbEIgPSByb3dCW2luZGV4XS5pbm5lckhUTUxcclxuXHJcbiAgICAgICAgICBjb25zdCBhID0gdHJhbnNmb3JtKGluZGV4LCBjZWxsQSlcclxuICAgICAgICAgIGNvbnN0IGIgPSB0cmFuc2Zvcm0oaW5kZXgsIGNlbGxCKVxyXG5cclxuICAgICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIGEgPiBiOlxyXG4gICAgICAgICAgICAgIHJldHVybiAxICogbXVsdGlwbGllclxyXG4gICAgICAgICAgICBjYXNlIGEgPCBiOlxyXG4gICAgICAgICAgICAgIHJldHVybiAtMSAqIG11bHRpcGxpZXJcclxuICAgICAgICAgICAgY2FzZSBhID09PSBiOlxyXG4gICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDQo9C00LDQu9C40YLRjCDRgdGC0LDRgNGL0LUg0YHRgtGA0L7QutC4XHJcbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKHJvd3MsIGZ1bmN0aW9uIChub2RlTGlzdCkge1xyXG4gICAgICAgICAgW10uZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBlbCA9PiB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZSgpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDQn9C+0LzQtdC90Y/RgtGMINC90LDQv9GA0LDQstC70LXQvdC40LVcclxuICAgICAgICBkaXJlY3Rpb25zW2luZGV4XSA9IGRpcmVjdGlvbiA9PT0gJ2FzYycgPyAnZGVzYycgOiAnYXNjJ1xyXG5cclxuICAgICAgICAvLyDQlNC+0LHQsNCy0LjRgtGMINC90L7QstGD0Y4g0YHRgtGA0L7QutGDXHJcbiAgICAgICAgbmV3Um93cy5mb3JFYWNoKGZ1bmN0aW9uIChuZXdSb3cpIHtcclxuICAgICAgICAgIG5ld1JvdyA9IEFycmF5LmZyb20obmV3Um93KTtcclxuICAgICAgICAgIG5ld1Jvdy5yZXZlcnNlKCk7XHJcbiAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobmV3Um93LCBlbCA9PiB7XHJcbiAgICAgICAgICAgIGhlYWRlcnNbaGVhZGVycy5sZW5ndGggLSAxXS5hZnRlcihlbClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLy8gZ2V0IHRhYmxlIHJvd3MgYXJyYXlcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgaWQgPSBpZHNbaV0uZGF0YXNldC5pZFxyXG4gICAgICAgIGxldCByb3cgPSAkKHRhYmxlKVswXS5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS1pZD0nJHtpZH0nXWApXHJcbiAgICAgICAgcm93cy5wdXNoKHJvdylcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g0J3QsNC/0YDQsNCy0LvQtdC90LjQtSDRgdC+0YDRgtC40YDQvtCy0LrQuFxyXG4gICAgICBjb25zdCBkaXJlY3Rpb25zID0gQXJyYXkuZnJvbShzb3J0YWJsZXMpLm1hcChmdW5jdGlvbiAoc29ydGFibGUpIHtcclxuICAgICAgICByZXR1cm4gJydcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyDQn9GA0LXQvtCx0YDQsNC30L7QstCw0YLRjCDRgdC+0LTQtdGA0LbQuNC80L7QtSDQtNCw0L3QvdC+0Lkg0Y/Rh9C10LnQutC4INCyINC30LDQtNCw0L3QvdC+0Lwg0YHRgtC+0LvQsdGG0LVcclxuICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtKGluZGV4LCBjb250ZW50KSB7XHJcbiAgICAgICAgLy8g0J/QvtC70YPRh9C40YLRjCDRgtC40L8g0LTQsNC90L3Ri9GFINGB0YLQvtC70LHRhtCwXHJcbiAgICAgICAgY29uc3QgdHlwZSA9IHNvcnRhYmxlc1tpbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKVxyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoY29udGVudClcclxuICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gY29udGVudFxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vLyBJTlBVVFxyXG4gICAgICBmdW5jdGlvbiBoYW5kbGVJbnB1dCh0YWJsZSwgY29udGVudGVkaXRhYmxlLCB0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIXRhcmdldC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpKSByZXR1cm4gZmFsc2VcclxuICAgICAgICBsZXQgbW9kZWwgPSBtYWtlU2VydmVyTW9kZWwodGFyZ2V0LCBtb2RlbE5hbWUpXHJcbiAgICAgICAgc2F2ZShtb2RlbClcclxuICAgICAgfVxyXG5cclxuICAgICAgYXN5bmMgZnVuY3Rpb24gc2F2ZShtb2RlbCkge1xyXG4gICAgICAgIGxldCB1cmwgPSBgL2FkbWluc2MvJHttb2RlbC5tb2RlbE5hbWV9L3VwZGF0ZWBcclxuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdCh1cmwsIG1vZGVsLm1vZGVsKVxyXG4gICAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgICAgIGlmIChyZXMubXNnID09PSAnb2snKSB7XHJcbiAgICAgICAgICBwb3B1cC5zaG93KCfQodC+0YXRgNCw0L3QtdC90L4hJylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIG1ha2VTZXJ2ZXJNb2RlbChlbCwgbW9kZWxOYW1lKSB7XHJcbiAgICAgICAgbGV0IGZpZWxkID0gZWwuZGF0YXNldFsnZmllbGQnXVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICB0b2tlbjogJCgpLFxyXG4gICAgICAgICAgICBpZDogZWwuZGF0YXNldC5pZCxcclxuICAgICAgICAgICAgW2ZpZWxkXTogZWwuaW5uZXJUZXh0XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgbW9kZWxOYW1lXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgfSlcclxuICB9XHJcbiAgLy8gfSlcclxufVxyXG4iLCJpbXBvcnQgJy4vcmlnaHRzLnNjc3MnO1xyXG5pbXBvcnQgeyQsIHBvcHVwLCBwb3N0fSBmcm9tICcuLi8uLi9jb21tb24nO1xyXG5pbXBvcnQgbGlzdCBmcm9tICdAY29tcG9uZW50cy9saXN0L2xpc3QnXHJcbi8vIGltcG9ydCBjb250ZW50ZWRpdGFibGUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jb250ZW50ZWRpdGFibGUnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByaWdodHMoKSB7XHJcbiAgLy8gZGVidWdnZXJcclxuICAvLyBjb250ZW50ZWRpdGFibGUoKVxyXG5cclxuXHJcblxyXG4gICQoJy5yaWdodHMtdGFibGUnKS5vbignY2xpY2snLCBoYW5kbGUpXHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZSh7dGFyZ2V0fSkge1xyXG4gICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuZGVsJykpIGRlbCh0YXJnZXQuY2xvc2VzdCgnLmRlbCcpKVxyXG4gICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuc2F2ZScpKSBzYXZlKHRhcmdldC5jbG9zZXN0KCcuc2F2ZScpKVxyXG5cclxuICAgIGZ1bmN0aW9uIG1vZGVsKGVsKSB7XHJcbiAgICAgIGxldCBkYXRhSWQgPSBlbC5kYXRhc2V0LmlkID8/ICduZXcnXHJcbiAgICAgIGxldCBmaWVsZHMgPSAkKGBbZGF0YS1pZD0nJHtkYXRhSWR9J11gKVxyXG4gICAgICBsZXQgbW9kZWwgPSB7fVxyXG4gICAgICBtb2RlbC50b1NlcnYgPSB7fVxyXG4gICAgICBtb2RlbC5lbXB0eSA9IHt9XHJcblxyXG4gICAgICBmaWVsZHMubWFwKChmKSA9PiB7XHJcbiAgICAgICAgaWYgKGYuY2xhc3NMaXN0LmNvbnRhaW5zKCdpZCcpKSB7XHJcbiAgICAgICAgICBtb2RlbC5pZCA9IGZcclxuICAgICAgICAgIG1vZGVsLnRvU2Vydi5pZCA9IGYuZGF0YXNldC5pZFxyXG4gICAgICAgIH0gZWxzZSBpZiAoZi5jbGFzc0xpc3QuY29udGFpbnMoJ25hbWUnKSkge1xyXG4gICAgICAgICAgbW9kZWwubmFtZSA9IGZcclxuICAgICAgICAgIG1vZGVsLnRvU2Vydi5uYW1lID0gZi5pbm5lclRleHQudHJpbSgpXHJcbiAgICAgICAgfSBlbHNlIGlmIChmLmNsYXNzTGlzdC5jb250YWlucygnZGVzY3JpcHRpb24nKSkge1xyXG4gICAgICAgICAgbW9kZWwuZGVzY3JpcHRpb24gPSBmXHJcbiAgICAgICAgICBtb2RlbC50b1NlcnYuZGVzY3JpcHRpb24gPSBmLmlubmVyVGV4dC50cmltKClcclxuICAgICAgICB9IGVsc2UgaWYgKGYuY2xhc3NMaXN0LmNvbnRhaW5zKCdzYXZlLnN2ZycpKSB7XHJcbiAgICAgICAgICBtb2RlbC5zYXZlID0gZlxyXG4gICAgICAgIH0gZWxzZSBpZiAoZi5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbCcpKSB7XHJcbiAgICAgICAgICBtb2RlbC5kZWwgPSBmXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgbW9kZWwuZW1wdHkuZGVsID0gbW9kZWwuaWQucHJldmlvdXNFbGVtZW50U2libGluZy5jbG9uZU5vZGUodHJ1ZSlcclxuICAgICAgbW9kZWwuZW1wdHkuc2F2ZSA9IG1vZGVsLmlkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZy5jbG9uZU5vZGUodHJ1ZSlcclxuICAgICAgbW9kZWwuZW1wdHkuZGVzY3JpcHRpb24gPSBtb2RlbC5pZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLnByZXZpb3VzRWxlbWVudFNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZy5jbG9uZU5vZGUodHJ1ZSlcclxuICAgICAgbW9kZWwuZW1wdHkubmFtZSA9IG1vZGVsLmlkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuY2xvbmVOb2RlKHRydWUpXHJcbiAgICAgIG1vZGVsLmVtcHR5LmlkID0gbW9kZWwuaWQucHJldmlvdXNFbGVtZW50U2libGluZy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLnByZXZpb3VzRWxlbWVudFNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmNsb25lTm9kZSh0cnVlKVxyXG5cclxuICAgICAgcmV0dXJuIG1vZGVsXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGRlbChlbCkge1xyXG4gICAgICBsZXQgbW9kID0gbW9kZWwoZWwpXHJcbiAgICAgIGlmIChtb2QudG9TZXJ2LmlkID09PSAnbmV3JykgcmV0dXJuXHJcbiAgICAgIGlmIChjb25maXJtKFwi0KPQtNCw0LvQuNGC0Ywg0L/RgNCw0LLQvj9cIikpIHtcclxuICAgICAgICBkZWxEb20obW9kKVxyXG4gICAgICAgIGRlbFNlcnZlcihtb2QpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBmdW5jdGlvbiBkZWxTZXJ2ZXIobW9kZWwpIHtcclxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9yaWdodC9kZWxldGUnLCB7aWQ6IG1vZGVsLnRvU2Vydi5pZH0pXHJcbiAgICAgIHJlcyA9IGF3YWl0IEpTT04ucGFyc2UocmVzKVxyXG4gICAgICBpZiAocmVzLm1zZyA9PT0gJ29rJykge1xyXG4gICAgICAgIHBvcHVwLnNob3coJ9Cj0LTQsNC70LXQvdC+JylcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlbERvbShtb2RlbCkge1xyXG4gICAgICBtb2RlbC5pZC5yZW1vdmUoKVxyXG4gICAgICBtb2RlbC5uYW1lLnJlbW92ZSgpXHJcbiAgICAgIG1vZGVsLmRlc2NyaXB0aW9uLnJlbW92ZSgpXHJcbiAgICAgIG1vZGVsLnNhdmUucmVtb3ZlKClcclxuICAgICAgbW9kZWwuZGVsLnJlbW92ZSgpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmUoZWwpIHtcclxuICAgICAgbGV0IG1vZCA9IG1vZGVsKGVsKVxyXG4gICAgICBpZiAobW9kLnRvU2Vydi5pZCAhPT0gJ25ldycpIHtcclxuICAgICAgICB1cGRhdGUobW9kLnRvU2VydilcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIW1vZC50b1NlcnYubmFtZSB8fCAhbW9kLnRvU2Vydi5kZXNjcmlwdGlvbikgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgY3JlYXRlKG1vZClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZSh0b1NlcnYpIHtcclxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHBvc3QoJy9yaWdodC91cGRhdGUnLCB0b1NlcnYpXHJcbiAgICAgIGlmIChhd2FpdCBKU09OLnBhcnNlKHJlcykudXBkYXRlZCkge1xyXG4gICAgICAgIHBvcHVwLnNob3coJ9Ce0LHQvdC+0LLQu9C10L3QvicpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbGVhck1vZGVsKG1vZGVsKXtcclxuICAgICAgbW9kZWwubmFtZS5pbm5lclRleHQgPSBcIlwiXHJcbiAgICAgIG1vZGVsLmRlc2NyaXB0aW9uLmlubmVyVGV4dCA9IFwiXCJcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVPbkRvbShtb2RlbCl7XHJcbiAgICAgIGxldCBsYXN0RWxlbWVudCA9ICQoXCIuaWRbZGF0YS1pZD0nbmV3J11cIilbMF1cclxuICAgICAgbGFzdEVsZW1lbnQuYmVmb3JlKG1vZGVsLmVtcHR5LmlkKVxyXG4gICAgICBsYXN0RWxlbWVudC5iZWZvcmUobW9kZWwuZW1wdHkubmFtZSlcclxuICAgICAgbGFzdEVsZW1lbnQuYmVmb3JlKG1vZGVsLmVtcHR5LmRlc2NyaXB0aW9uKVxyXG4gICAgICBsYXN0RWxlbWVudC5iZWZvcmUobW9kZWwuZW1wdHkuc2F2ZSlcclxuICAgICAgbGFzdEVsZW1lbnQuYmVmb3JlKG1vZGVsLmVtcHR5LmRlbClcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhc3NpZ25OZXdWYWx1ZXNPbkNsb25lKG1vZGVsLCBpZCl7XHJcbiAgICAgIG1vZGVsLmVtcHR5LmlkLmRhdGFzZXQuaWQgPSBpZFxyXG4gICAgICBtb2RlbC5lbXB0eS5pZC5pbm5lclRleHQgPSBpZFxyXG4gICAgICBtb2RlbC5lbXB0eS5uYW1lLmRhdGFzZXQuaWQgPSBpZFxyXG4gICAgICBtb2RlbC5lbXB0eS5uYW1lLmlubmVyVGV4dCA9IG1vZGVsLm5hbWUuaW5uZXJUZXh0LnRyaW0oKVxyXG4gICAgICBtb2RlbC5lbXB0eS5kZXNjcmlwdGlvbi5kYXRhc2V0LmlkID0gaWRcclxuICAgICAgbW9kZWwuZW1wdHkuZGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gbW9kZWwuZGVzY3JpcHRpb24uaW5uZXJUZXh0LnRyaW0oKVxyXG4gICAgICBtb2RlbC5lbXB0eS5zYXZlLmRhdGFzZXQuaWQgPSBpZFxyXG4gICAgICBtb2RlbC5lbXB0eS5kZWwuZGF0YXNldC5pZCA9IGlkXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZnVuY3Rpb24gY3JlYXRlKG1vZGVsKSB7XHJcbiAgICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KCcvcmlnaHQvY3JlYXRlJywgbW9kZWwudG9TZXJ2KVxyXG4gICAgICByZXMgPSBhd2FpdCBKU09OLnBhcnNlKHJlcylcclxuXHJcbiAgICAgIGlmIChyZXMuaWQpIHtcclxuXHJcbiAgICAgICAgYXNzaWduTmV3VmFsdWVzT25DbG9uZShtb2RlbCwgcmVzLmlkLTEpXHJcbiAgICAgICAgY3JlYXRlT25Eb20obW9kZWwpXHJcbiAgICAgICAgY2xlYXJNb2RlbChtb2RlbClcclxuXHJcbiAgICAgICAgcG9wdXAuc2hvdygn0KHQvtGF0YDQsNC90LXQvdC+JylcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gIH1cclxufSIsImltcG9ydCAnLi9jcmVhdGUvY3JlYXRlJ1xyXG5cclxuaW1wb3J0ICcuL3BsYW5uaW5nLnNjc3MnXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGxhbm5pbmcoKXtcclxuZGVidWdnZXJcclxuXHJcbn0iLCJpbXBvcnQgeyR9IGZyb20gJy4uL2NvbW1vbidcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNleCgpIHtcclxuICBmdW5jdGlvbiBzZXgoKSB7XHJcbiAgICBjb25zdCBzID0gJCgnW25hbWU9XCJzZXhcIl0nKVxyXG4gICAgZm9yIChsZXQgZiBvZiBzKSB7XHJcbiAgICAgIGlmIChmLmNoZWNrZWQpIHtcclxuICAgICAgICByZXR1cm4gZi52YWx1ZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJ20nXHJcbiAgfVxyXG59IiwiaW1wb3J0ICcuL3VzZXJzLnNjc3MnXHJcblxyXG5pbXBvcnQgeyQsIHBvcHVwLCBwb3N0fSBmcm9tICcuLi8uLi9jb21tb24nXHJcbmltcG9ydCBnZXRTZXggZnJvbSAnLi4vLi4vQXV0aC9nZXRTZXgnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VyKCkge1xyXG5cclxuICBsZXQgaXRlbSA9ICQoJ1tkYXRhLW1vZGVsPVwidXNlclwiXScpWzBdXHJcbiAgaWYgKGl0ZW0pIHtcclxuICAgICQoaXRlbSkub24oJ2NsaWNrJywgaGFuZGxlQ2xpY2spXHJcbiAgfVxyXG5cclxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVDbGljayh7dGFyZ2V0fSkge1xyXG4gICAgaWYgKCEhdGFyZ2V0LmNsb3Nlc3QoJyNzYXZlJykpIHtcclxuXHJcbiAgICAgIGxldCB3cmFwcGVyID0gJCgnLnVzZXItaXRlbScpWzBdXHJcbiAgICAgIGxldCBkYXRhID0gZ2V0TW9kZWwod3JhcHBlcilcclxuXHJcbiAgICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KCcvYWRtaW5zYy91c2VyL3VwZGF0ZScsIGRhdGEpXHJcbiAgICAgIGlmIChyZXMgPT09ICdvaycpIHtcclxuICAgICAgICBwb3B1cC5zaG93KCfQodC+0YXRgNCw0L3QtdC90L4nKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3JpZ2h0JykpIHtcclxuICAgICAgbGV0IHJpZ2h0cyA9ICQoJ2lucHV0LnJpZ2h0OmNoZWNrZWQnKVxyXG4gICAgICBsZXQgc3RyID0gJyc7XHJcbiAgICAgIFtdLm1hcC5jYWxsKHJpZ2h0cywgZnVuY3Rpb24gKHJpZ2h0KSB7XHJcbiAgICAgICAgbGV0IHMgPSByaWdodC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlubmVyVGV4dFxyXG4gICAgICAgIHN0cis9cysnLCdcclxuICAgICAgfSlcclxuICAgICAgICBsZXQgdGFiID0gdGFyZ2V0LmNsb3Nlc3QoJ1t0YWJdJylcclxuICAgICAgICB0YWIuZGF0YXNldC52YWx1ZSA9IHN0clxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmlnaHRzKCkge1xyXG4gICAgbGV0IHJpZ2h0ID0gJCgnLnJpZ2h0OmNoZWNrZWQnKVxyXG4gICAgbGV0IHJpZ2h0cyA9ICcnO1xyXG4gICAgW10ubWFwLmNhbGwocmlnaHQsIChyKSA9PiB7XHJcbiAgICAgIGxldCBzdHIgPSByLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaW5uZXJUZXh0ICsgJywnXHJcbiAgICAgIHJpZ2h0cyArPSBzdHJcclxuICAgIH0sIHJpZ2h0cylcclxuICAgIHJldHVybiByaWdodHNcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmZpcm0oKSB7XHJcbiAgICBjb25zdCBjb25maXJtID0gJCgnI2NvbmYgb3B0aW9uJylcclxuICAgIGZvciAobGV0IGYgb2YgY29uZmlybSkge1xyXG4gICAgICBpZiAoZi5zZWxlY3RlZCkge1xyXG4gICAgICAgIHJldHVybiBmLnZhbHVlXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAnMCdcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBnZXRNb2RlbCh0YXJnZXQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiAkKHRhcmdldCkuZmluZChcIiNpZFwiKS5pbm5lclRleHQsXHJcbiAgICAgIG5hbWU6ICQodGFyZ2V0KS5maW5kKCcjbmFtZScpLmlubmVyVGV4dCxcclxuICAgICAgc3VyTmFtZTogJCh0YXJnZXQpLmZpbmQoJyNzLW5hbWUnKS5pbm5lclRleHQsXHJcbiAgICAgIG1pZGRsZU5hbWU6ICQodGFyZ2V0KS5maW5kKCcjbS1uYW1lJykuaW5uZXJUZXh0LFxyXG4gICAgICBiaXJ0aERhdGU6ICQodGFyZ2V0KS5maW5kKCcjYmRheScpLmlubmVyVGV4dCxcclxuICAgICAgcGhvbmU6ICQodGFyZ2V0KS5maW5kKCcjcGhvbmUnKS5pbm5lclRleHQsXHJcbiAgICAgIGVtYWlsOiAkKHRhcmdldCkuZmluZCgnI2VtYWlsJykuaW5uZXJUZXh0LFxyXG4gICAgICBoaXJlZDogJCh0YXJnZXQpLmZpbmQoJyNoaXJlZCcpLmlubmVyVGV4dCxcclxuICAgICAgZmlyZWQ6ICQodGFyZ2V0KS5maW5kKCcjZmlyZWQnKS5pbm5lclRleHQsXHJcbiAgICAgIGNvbmZpcm06IGNvbmZpcm0oKSxcclxuICAgICAgc2V4OiBnZXRTZXgoKSxcclxuICAgICAgcmlnaHRzOiByaWdodHMoKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsImltcG9ydCAnLi9vcGVuX3Rlc3Quc2NzcydcclxuaW1wb3J0IHskLCBwb3B1cCwgcG9zdCwgZGVib3VuY2UsIElzSnNvblN0cmluZ30gZnJvbSBcIi4uL2NvbW1vblwiO1xyXG5cclxubGV0IG9wZW5UZXN0ID0gJCgnLm9wZW50ZXN0X3dyYXAnKVswXVxyXG5pZiAob3BlblRlc3QpIHtcclxuICAkKG9wZW5UZXN0KS5vbignY2xpY2snLCBoYW5kbGVDbGljaylcclxuICAkKG9wZW5UZXN0KS5vbigna2V5dXAnLCBoYW5kbGVLZXl1cClcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlS2V5dXAoe3RhcmdldH0pIHtcclxuICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGV4dGFyZWEnKSkge1xyXG4gICAgbGV0IGFjdGl2ZVBhZ2luYXRpb24gPSAkKCdbZGF0YS1wYWdpbmF0aW9uXS5hY3RpdmUnKVswXVxyXG4gICAgaWYgKCF0YXJnZXQuaW5uZXJUZXh0KSB7XHJcbiAgICAgIGFjdGl2ZVBhZ2luYXRpb24uY2xhc3NMaXN0LnJlbW92ZSgnZmlsbGVkJylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZVBhZ2luYXRpb24uY2xhc3NMaXN0LmFkZCgnZmlsbGVkJylcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKHt0YXJnZXR9KSB7XHJcbiAgbGV0IHRlc3RpZCA9IHRhcmdldC5kYXRhc2V0LmlkXHJcbiAgbGV0IGFjdGl2ZVF1ZXN0aW9uID0gJCgnLnF1ZXN0aW9uLnNob3cnKVswXVxyXG4gIGxldCBwYWdpbmF0aW9ucyA9ICQoJ1tkYXRhLXBhZ2luYXRpb25dJylcclxuICBsZXQgYWN0aXZlUGFnaW5hdGlvbiA9ICQoJ1tkYXRhLXBhZ2luYXRpb25dLmFjdGl2ZScpWzBdXHJcbiAgbGV0IGkgPSBwYWdpbmF0aW9ucy5pbmRleE9mKGFjdGl2ZVBhZ2luYXRpb24pXHJcblxyXG4gIGlmICh0YXJnZXQuaWQgPT09ICdwcmV2Jykge1xyXG4gICAgcHJldlF1ZXN0KClcclxuICB9IGVsc2UgaWYgKHRhcmdldC5pZCA9PT0gJ25leHQnKSB7XHJcbiAgICBuZXh0UXVlc3QoKVxyXG4gIH0gZWxzZSBpZiAodGFyZ2V0LmRhdGFzZXQucGFnaW5hdGlvbikge1xyXG4gICAgcGFnaW5hdGUoKVxyXG4gIH0gZWxzZSBpZiAodGFyZ2V0LmlkID09PSAnZmluaXNoJykge1xyXG4gICAgZmluaXNoKClcclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGZpbmlzaCgpIHtcclxuICAgIGxldCBxdWVzdGlvbnMgPSBhd2FpdCBnZXRBbnN3ZXJzKHRlc3RpZClcclxuICAgIHBhcnNlQW5zd2VycyhxdWVzdGlvbnMpXHJcbiAgICBsZXQgb2JqID0gY2FjaGVQYWdlKClcclxuICAgIGxldCByZXMgPSBhd2FpdCBwb3N0KCcvYWRtaW5zYy9vcGVudGVzdHJlc3VsdC9maW5pc2gnLCBvYmopXHJcbiAgICBpZiAoSXNKc29uU3RyaW5nKHJlcykpIHtcclxuICAgICAgcmVzID0gSlNPTi5wYXJzZShyZXMpXHJcbiAgICAgIGlmIChyZXMubXNnID09PSAnb2snKSB7XHJcbiAgICAgICAgcG9wdXAuc2hvdyhyZXMubXNnKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjYWNoZVBhZ2UoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0ZXN0SWQ6IHRlc3RpZCxcclxuICAgICAgcXVlc3Rpb25DbnQ6IHBhZ2luYXRpb25zLmxlbmd0aCxcclxuICAgICAgaHRtbDogYDwhRE9DVFlQRSAke2RvY3VtZW50LmRvY3R5cGUubmFtZX0+YCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUwsXHJcbiAgICAgIHRlc3RuYW1lOiAkKCcudGVzdC1uYW1lJylbMF0uaW5uZXJUZXh0LFxyXG4gICAgICB1c2VybmFtZTogJCgnLnVzZXItbWVudV9fZmlvJylbMF0uaW5uZXJUZXh0LFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFnaW5hdGUoKSB7XHJcbiAgICBpZiAodGFyZ2V0ID09PSBhY3RpdmVQYWdpbmF0aW9uKSByZXR1cm4gZmFsc2VcclxuICAgIGxldCBhaW1QYWdpbmF0aW9uID0gdGFyZ2V0XHJcbiAgICB0b2dnbGVRdWVzdGlvbihhaW1QYWdpbmF0aW9uLCBhY3RpdmVRdWVzdGlvbilcclxuICAgIHRvZ2dsZU5hdihhaW1QYWdpbmF0aW9uLCBhY3RpdmVQYWdpbmF0aW9uKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcHJldlF1ZXN0KCkge1xyXG4gICAgaWYgKGkgPCAxKSByZXR1cm4gZmFsc2VcclxuICAgIGxldCBhaW1QYWdpbmF0aW9uID0gcGFnaW5hdGlvbnNbaSAtIDFdXHJcbiAgICB0b2dnbGVRdWVzdGlvbihhaW1QYWdpbmF0aW9uLCBhY3RpdmVRdWVzdGlvbilcclxuICAgIHRvZ2dsZU5hdihhaW1QYWdpbmF0aW9uLCBhY3RpdmVQYWdpbmF0aW9uKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbmV4dFF1ZXN0KCkge1xyXG4gICAgaWYgKGkgPiBwYWdpbmF0aW9ucy5sZW5ndGggLSAyKSByZXR1cm4gZmFsc2VcclxuICAgIGxldCBhaW1QYWdpbmF0aW9uID0gcGFnaW5hdGlvbnNbaSArIDFdXHJcbiAgICB0b2dnbGVRdWVzdGlvbihhaW1QYWdpbmF0aW9uLCBhY3RpdmVRdWVzdGlvbilcclxuICAgIHRvZ2dsZU5hdihhaW1QYWdpbmF0aW9uLCBhY3RpdmVQYWdpbmF0aW9uKVxyXG4gIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHBhcnNlQW5zd2VycyhxdWVzdGlvbnMpIHtcclxuICBxdWVzdGlvbnMuZm9yRWFjaCgocSkgPT4ge1xyXG4gICAgbGV0IHFfaWQgPSBxLmlkXHJcbiAgICBsZXQgcV9lbCA9ICQoYHF1ZXN0aW9uW2RhdGEtaWQ9JyR7cV9pZH0nXWApXHJcbiAgICBsZXQgdXNlckEgPSBxX2VsLnF1ZXJ5U2VsZWN0b3IoJy50ZXh0YXJlYScpXHJcbiAgICBxLmFuc3dlcnMuZm9yRWFjaCgoYSkgPT4ge1xyXG4gICAgICBoaWdobGlnaHQoYSwgdXNlckFuc3dlciwgdHJ1ZSlcclxuXHJcbiAgICB9KS5iaW5kKHVzZXJBKVxyXG5cclxuICB9KVxyXG5cclxuXHJcbiAgLy8gbGV0IHVzZXJBbnN3ZXJzID0gJCgnLnRleHRhcmVhJylcclxuICAvLyB1c2VyQW5zd2Vycy5tYXAoKHVzZXJBbnN3ZXIpID0+IHtcclxuICAvLyAgIGxldCBhID0gYW5zd2Vyc1swXS5hbnN3ZXJcclxuICAvLyB9KVxyXG59XHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0QW5zd2VycyhpZCkge1xyXG4gIGxldCByZXMgPSBhd2FpdCBwb3N0KCcvYWRtaW5zYy9vcGVudGVzdHJlc3VsdC9nZXRhbnN3ZXJzJywge2lkfSlcclxuICByZXMgPSBKU09OLnBhcnNlKHJlcylcclxuICByZXR1cm4gcmVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZU5hdihhaW1QYWdpbmF0aW9uLCBhY3RpdmVQYWdpbmF0aW9uKSB7XHJcbiAgYWN0aXZlUGFnaW5hdGlvbi5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKVxyXG4gIGFpbVBhZ2luYXRpb24uY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJylcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlUXVlc3Rpb24oYWltUGFnaW5hdGlvbklkLCBhY3RpdmVRdWVzdGlvbikge1xyXG4gIGxldCBhaW1RdWVzdGlvbklkID0gYWltUGFnaW5hdGlvbklkLmRhdGFzZXQucGFnaW5hdGlvblxyXG4gIGxldCBhaW1RdWVzdGlvbiA9ICQoYC5xdWVzdGlvbltkYXRhLWlkPScke2FpbVF1ZXN0aW9uSWR9J11gKVswXVxyXG4gIGFpbVF1ZXN0aW9uLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKVxyXG4gIGFjdGl2ZVF1ZXN0aW9uLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKVxyXG59XHJcblxyXG5mdW5jdGlvbiBoaWdobGlnaHQod29yZCwgZWwsIGFkZEV2ZW50TGlzKSB7XHJcbiAgaGlsaXRlcih3b3JkLCBlbCwgYWRkRXZlbnRMaXMpO1xyXG4gIHBsYWNlQ2FyZXRBdEVuZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRleHRCb3hcIikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwbGFjZUNhcmV0QXRFbmQoZWwpIHtcclxuICBlbC5mb2N1cygpO1xyXG4gIGlmICh0eXBlb2Ygd2luZG93LmdldFNlbGVjdGlvbiAhPSBcInVuZGVmaW5lZFwiICYmXHJcbiAgICB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlUmFuZ2UgIT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcclxuICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhlbCk7XHJcbiAgICByYW5nZS5jb2xsYXBzZShmYWxzZSk7XHJcbiAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xyXG4gICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSAhPSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICB2YXIgdGV4dFJhbmdlID0gZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTtcclxuICAgIHRleHRSYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChlbCk7XHJcbiAgICB0ZXh0UmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xyXG4gICAgdGV4dFJhbmdlLnNlbGVjdCgpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGlsaXRlcih3b3JkLCBlbGVtZW50LCBhZGRFdmVudExpcykge1xyXG4gIHZhciByZ3hwID0gbmV3IFJlZ0V4cCh3b3JkLCAnZycpO1xyXG4gIHZhciByZXBsID0gJzxzcGFuIHN0eWxlPVwiY29sb3I6cmVkO1wiPicgKyB3b3JkICsgJzwvc3Bhbj4nO1xyXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gZWxlbWVudC5pbm5lckhUTUwucmVwbGFjZShyZ3hwLCByZXBsKTtcclxuICBhZGRFdmVudExpcyAmJiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiByZW1vdmUoKSB7XHJcbiAgICByZW1vdmVIaWdobGlnaHQoKTtcclxuICAgIGhpZ2hsaWdodChmYWxzZSk7XHJcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCByZW1vdmUpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVIaWdobGlnaHQoZSkge1xyXG4gIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0Qm94XCIpO1xyXG4gIGxldCBpID0gZWxlbWVudC5pbm5lckhUTUwucmVwbGFjZUFsbCgnPHNwYW4gc3R5bGU9XCJjb2xvcjojNmNhM2ZlO2ZvbnQtd2VpZ2h0OiA2MDBcIj4nLCBcIlwiKTtcclxuICBpID0gaS5yZXBsYWNlQWxsKCc8L3NwYW4+JywgXCJcIik7XHJcbiAgZWxlbWVudC5pbm5lckhUTUwgPSBpO1xyXG4gIHBsYWNlQ2FyZXRBdEVuZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRleHRCb3hcIikpXHJcbn1cclxuIiwiaW1wb3J0ICcuL3JhZGlvLnNjc3MnXHJcbmltcG9ydCB7JH0gZnJvbSAnLi4vLi4vY29tbW9uJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFkaW8oKXtcclxuICBsZXQgcmFkaW9zID0gJCgnW2N1c3RvbS1yYWRpb10nKTtcclxuXHJcbiAgW10ubWFwLmNhbGwocmFkaW9zLCBmdW5jdGlvbiAocmFkaW8pIHtcclxuICAgICQocmFkaW8pLm9uKCdjbGljaycsaGFuZGxlQ2xpY2spXHJcblxyXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soe3RhcmdldH0pIHtcclxuICAgICAgbGV0IHRhcmcgPSB0YXJnZXQuY2xvc2VzdChcImxhYmVsXCIpXHJcbiAgICAgIHJhZGlvLmRhdGFzZXQudmFsdWUgPSB0YXJnLmRhdGFzZXQudmFsdWVcclxuICAgIH1cclxuXHJcbiAgfSlcclxuXHJcbn0iLCJpbXBvcnQgJy4vbXVsdGlzZWxlY3Quc2NzcydcclxuaW1wb3J0IHskfSBmcm9tICcuLi8uLi9jb21tb24nXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtdWx0aXNlbGVjdCgpIHtcclxuXHJcbiAgZnVuY3Rpb24gZ2V0U2VsZWN0ZWQoKXtcclxuICAgIGlmIChtdWx0aSl7XHJcbiAgICAgIGxldCBzZWxlY3RlZCA9IFtdLm1hcC5jYWxsKG11bHRpLCBmdW5jdGlvbiAoc2VsZWN0KSB7XHJcbiAgICAgICAgbGV0IGNoaXBzID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jaGlwLXdyYXAnKTtcclxuICAgICAgICBsZXQgb2JqcyA9IFtdLm1hcC5jYWxsKGNoaXBzLCBmdW5jdGlvbiAoY2hpcCkge1xyXG4gICAgICAgICAgcmV0dXJuIGNoaXAuZGF0YXNldC5pZDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIGxldCBvYmogPSB7fVxyXG4gICAgICAgIG9iai5maWVsZCA9ICBzZWxlY3QuZGF0YXNldC5maWVsZFxyXG4gICAgICAgIG9iai5pZHMgPSBvYmpzXHJcbiAgICAgICAgcmV0dXJuIG9ialxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgLy8gZGVidWdnZXJcclxuICB9XHJcblxyXG4gIGxldCBtdWx0aSA9ICQoJ1ttdWx0aS1zZWxlY3RdICcpXHJcbiAgaWYgKG11bHRpKSB7XHJcblxyXG4gICAgW10uZm9yRWFjaC5jYWxsKG11bHRpLCBmdW5jdGlvbiAoc2VsZWN0KSB7XHJcblxyXG4gICAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljaywgZmFsc2UpXHJcbiAgICAgIHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlQmx1ciwgZmFsc2UpXHJcblxyXG4gICAgICBmdW5jdGlvbiBoYW5kbGVCbHVyKHt0YXJnZXR9KSB7XHJcbiAgICAgICAgbGV0IHNob3cgPSAkKHRoaXMpLmZpbmQoJy5zaG93JylcclxuICAgICAgICBpZiAoc2hvdykge1xyXG4gICAgICAgICAgc2hvdy5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKHt0YXJnZXR9KSB7XHJcbiAgICAgICAgbGV0IG11bHRpID0gdGFyZ2V0LmNsb3Nlc3QoJ1ttdWx0aS1zZWxlY3RdJylcclxuLy8g0L7RgtC60YDRi9GC0Ywg0LLRi9Cx0L7RgCDRjdC70LXQvNC10L3RgtC+0LJcclxuICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5hcnJvdycpfHxbJ2NoaXAtd3JhcCddLmluY2x1ZGVzKHRhcmdldC5jbGFzc05hbWUpKSAge1xyXG4gICAgICAgICAgLy8gbGV0IG11bHRpc2VsZWN0ID0gdGFyZ2V0LmNsb3Nlc3QoJ1ttdWx0aS1zZWxlY3RdICcpXHJcbiAgICAgICAgICBsZXQgdWwgPSBtdWx0aS5xdWVyeVNlbGVjdG9yKCd1bCcpXHJcbiAgICAgICAgICB1bC5jbGFzc0xpc3QudG9nZ2xlKCdzaG93JylcclxuXHJcbi8vINC90LDQttCw0YLQuNC1INC/0L4g0LrRgNC10YHRgtC40LrRgyDRh9C40L/QsFxyXG4gICAgICAgIH0gZWxzZSBpZiAoWydkZWwnXS5pbmNsdWRlcyh0YXJnZXQuY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgbGV0IGlkID0gdGFyZ2V0LmNsb3Nlc3QoJy5jaGlwJykuZGF0YXNldC5pZFxyXG4gICAgICAgICAgdG9nZ2xlQmFja2dyb3VuZChpZClcclxuICAgICAgICAgIGxldCBjaGlwID0gdGFyZ2V0LmNsb3Nlc3QoJy5jaGlwJylcclxuICAgICAgICAgIGNoaXAucmVtb3ZlKClcclxuXHJcbi8vINCy0YvQsdC+0YAg0Y3Qu9C10LzQtdC90YLQsCwg0L/RgNC+0LLQtdGA0LrQsCDRgdGD0YnQtdGB0YLQstC+0LLQsNC90LjRjyDRh9C40L/QsCDQuCDQtdCz0L4g0LTQvtCx0LDQstC70LXQvdC40LVcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdsYWJlbCcpIHtcclxuICAgICAgICAgIGxldCBpZCA9IHRhcmdldC5kYXRhc2V0LmlkO1xyXG4gICAgICAgICAgLy8gbGV0IG0gPSB0YXJnZXQuY2xvc2VzdCgnW211bHRpLXNlbGVjdF0gJylcclxuICAgICAgICAgIGxldCBjaGlwcyA9IG11bHRpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jaGlwJyk7XHJcbiAgICAgICAgICBsZXQgZXhpc3QgPSBbXS5zb21lLmNhbGwoY2hpcHMsIChjaGlwKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBjaGlwLmRhdGFzZXQuaWQgPT09IGlkXHJcbiAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgIGxldCB3cmFwID0gJChtdWx0aSkuZmluZCgnLmNoaXAtd3JhcCcpXHJcbiAgICAgICAgICBpZiAoIWV4aXN0KSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdzZWxlY3RlZCcpXHJcbiAgICAgICAgICAgIGxldCBjaGlwID0gY3JlYXRlQ2hpcChpZClcclxuICAgICAgICAgICAgd3JhcC5hcHBlbmQoY2hpcClcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdzZWxlY3RlZCcpXHJcbiAgICAgICAgICAgIHdyYXAucXVlcnlTZWxlY3RvcihgW2RhdGEtaWQ9JyR7aWR9J11gKS5yZW1vdmUoKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiB0b2dnbGVCYWNrZ3JvdW5kKGlkKSB7XHJcbiAgICAgICAgICAvLyBsZXQgbXVsdGkgPSB0YXJnZXQuY2xvc2VzdCgnW211bHRpLXNlbGVjdF0gJylcclxuICAgICAgICAgICQobXVsdGkpLmZpbmQoYGxhYmVsW2RhdGEtaWQ9JyR7aWR9J11gKS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVDaGlwKGlkKSB7XHJcbiAgICAgICAgICBsZXQgY2hpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgICAgICBjaGlwLmNsYXNzTGlzdC5hZGQoJ2NoaXAnKVxyXG4gICAgICAgICAgY2hpcC5pbm5lclRleHQgPSB0YXJnZXQuaW5uZXJUZXh0XHJcbiAgICAgICAgICBjaGlwLmRhdGFzZXRbJ2lkJ10gPSBpZFxyXG5cclxuICAgICAgICAgIGxldCBkZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgICAgICAgZGVsLmNsYXNzTGlzdC5hZGQoJ2RlbCcpXHJcbiAgICAgICAgICBkZWwuaW5uZXJUZXh0ID0gJ1gnXHJcblxyXG4gICAgICAgICAgY2hpcC5hcHBlbmQoZGVsKVxyXG5cclxuICAgICAgICAgIHJldHVybiBjaGlwXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxufSIsImltcG9ydCAnLi9jYXRhbG9nLWl0ZW0uc2Nzcyc7XHJcbmltcG9ydCB7JCwgcG9zdCwgcG9wdXB9IGZyb20gJy4uLy4uL2NvbW1vbic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXRhbG9nSXRlbSgpIHtcclxuICBsZXQgY3VzdG9tQ2F0YWxvZ0l0ZW0gPSAkKCcuaXRlbV93cmFwJylbMF1cclxuICBpZiAoY3VzdG9tQ2F0YWxvZ0l0ZW0pIHtcclxuICAgICQoY3VzdG9tQ2F0YWxvZ0l0ZW0pLm9uKCdjbGljaycsIGhhbmRsZUNsaWNrLmJpbmQodGhpcykpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjaGVja1JlcXVpcmVkKCkge1xyXG4gICAgbGV0IHJlcXVpcmVkID0gJCgnW3JlcXVpcmVkXScpO1xyXG4gICAgbGV0IGVyckNvdW50ID0gMDtcclxuICAgIFtdLmZvckVhY2guY2FsbChyZXF1aXJlZCwgZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgIGlmICghZWwuaW5uZXJUZXh0KXtcclxuICAgICAgICBlbC5zdHlsZS5ib3JkZXJDb2xvciA9ICdyZWQnXHJcbiAgICAgICAgaWYgKCQoZWwpLmZpbmQoJy5lcnJvcicpKXJldHVyblxyXG4gICAgICAgIGxldCBlcnJvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgICAgZXJyb3IuaW5uZXJUZXh0PSfQl9Cw0L/QvtC70L3QuNGC0LUg0L/QvtC70LUnXHJcbiAgICAgICAgZXJyb3IuY2xhc3NMaXN0LmFkZCgnZXJyb3InKVxyXG4gICAgICAgIGVsLmNsb3Nlc3QoJy52YWx1ZScpLmFwcGVuZENoaWxkKGVycm9yKVxyXG4gICAgICAgIGVyckNvdW50KytcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBlcnJDb3VudFxyXG4gIH1cclxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVDbGljayh7dGFyZ2V0fSkge1xyXG5cclxuICAgIGxldCBpdGVtID0gY3VzdG9tQ2F0YWxvZ0l0ZW1cclxuICAgIGxldCBtb2RlbE5hbWUgPSBpdGVtLmRhdGFzZXQubW9kZWxcclxuICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLnNhdmUnKSkge1xyXG4gICAgICBpZiAoY2hlY2tSZXF1aXJlZCgpKSByZXR1cm4gZmFsc2VcclxuICAgICAgbGV0IG1vZGVsID0gZ2V0TW9kZWwoKVxyXG4gICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdChgL2FkbWluc2MvJHttb2RlbE5hbWV9L3VwZGF0ZW9yY3JlYXRlYCwgey4uLm1vZGVsfSlcclxuICAgICAgcmVzID0gSlNPTi5wYXJzZShyZXMpXHJcbiAgICAgIGlmIChyZXMuaWQpIHtcclxuICAgICAgICAvLyB3aW5kb3cubG9jYXRpb24gPSAnL2FkbWluc2Mvb3BlbnRlc3QvZWRpdCdcclxuXHJcbiAgICAgICAgcG9wdXAuc2hvdygn0KHQvtGF0YDQsNC90LXQvdC+JylcclxuICAgICAgfWVsc2UgaWYocmVzLmVycm9yKXtcclxuICAgICAgICBwb3B1cC5zaG93KHJlcy5lcnJvcilcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0YXJnZXQuY2xvc2VzdCgnLmRlbCcpKSB7XHJcbiAgICAgIGxldCBpZCA9IGl0ZW0uZGF0YXNldC5pZFxyXG4gICAgICBsZXQgcmVzID0gYXdhaXQgcG9zdChgL2FkbWluc2MvJHttb2RlbE5hbWV9L2RlbGV0ZWAsIHtpZH0pXHJcbiAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKVxyXG4gICAgICBpZiAocmVzLm1zZyA9PT0gJ29rJykge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYC9hZG1pbnNjLyR7bW9kZWxOYW1lfWBcclxuICAgICAgfVxyXG4gICAgfWVsc2UgaWYoKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3RhYicpKSl7XHJcbiAgICAgIGxldCB2aXNpYmxlU2VjdGlvbiA9ICQoYHNlY3Rpb24uc2hvd2ApWzBdXHJcbiAgICAgIHZpc2libGVTZWN0aW9uLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKVxyXG4gICAgICBsZXQgc2VjdGlvbiA9ICQoYHNlY3Rpb25bZGF0YS1pZD0nJHt0YXJnZXQuZGF0YXNldC5pZH0nXWApWzBdXHJcbiAgICAgIHNlY3Rpb24uY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpXHJcbiAgICAgIGxldCBhY3RpdmVUYWIgPSAkKGAudGFiLmFjdGl2ZWApWzBdXHJcbiAgICAgIGFjdGl2ZVRhYi5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKVxyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldE1vZGVsKCkge1xyXG4gICAgbGV0IGZpZWxkcyA9ICQoJ1tkYXRhLWZpZWxkXScpO1xyXG4gICAgbGV0IG9iaiA9IHt9O1xyXG4gICAgLy8gZGVidWdnZXI7XHJcbiAgICBbXS5tYXAuY2FsbChmaWVsZHMsIChmaWVsZCkgPT4ge1xyXG4gICAgICBpZiAoZmllbGQuaGFzQXR0cmlidXRlKCdtdWx0aS1zZWxlY3QnKSkge1xyXG4gICAgICAgIGxldCBjaGlwcyA9IGZpZWxkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jaGlwJyk7XHJcbiAgICAgICAgbGV0IGlkcyA9IFtdLm1hcC5jYWxsKGNoaXBzLCAoY2hpcCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGNoaXAuZGF0YXNldC5pZFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgb2JqW2ZpZWxkLmRhdGFzZXQuZmllbGRdID0gaWRzLnRvU3RyaW5nKClcclxuICAgICAgfSBlbHNlIGlmIChmaWVsZC5oYXNBdHRyaWJ1dGUoJ2N1c3RvbS1zZWxlY3QnKSl7XHJcbiAgICAgICAgb2JqW2ZpZWxkLmRhdGFzZXQuZmllbGRdID0gZmllbGQuZGF0YXNldC52YWx1ZVxyXG4gICAgICB9IGVsc2UgaWYgKGZpZWxkLmhhc0F0dHJpYnV0ZSgnY3VzdG9tLXJhZGlvJykpe1xyXG4gICAgICAgIG9ialtmaWVsZC5kYXRhc2V0LmZpZWxkXSA9IGZpZWxkLmRhdGFzZXQudmFsdWVcclxuICAgICAgfSBlbHNlIGlmIChmaWVsZC5oYXNBdHRyaWJ1dGUoJ3RhYicpKXtcclxuICAgICAgICBvYmpbZmllbGQuZGF0YXNldC5maWVsZF0gPSBmaWVsZC5kYXRhc2V0LnZhbHVlXHJcbiAgICAgIH0gZWxzZSBpZiAoZmllbGQudHlwZSA9PT0gJ2RhdGUnKXtcclxuICAgICAgICBvYmpbZmllbGQuZGF0YXNldC5maWVsZF0gPSBmaWVsZC52YWx1ZVxyXG4gICAgICB9ZWxzZSB7XHJcbiAgICAgICAgb2JqW2ZpZWxkLmRhdGFzZXQuZmllbGRdID0gZmllbGQuaW5uZXJUZXh0XHJcbiAgICAgIH1cclxuICAgIH0sIG9iailcclxuICAgIGxldCBpc1Rlc3QgPSAkKCdbZGF0YS1pc1Rlc3RdJylbMF1cclxuICAgIGlmIChpc1Rlc3Qpe1xyXG4gICAgICBvYmouaXNUZXN0ID0gK2lzVGVzdC5kYXRhc2V0LmlzdGVzdFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9ialxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgJy4vdG9vbHRpcC5zY3NzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9vbHRpcHMoKSB7XHJcblxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBzaG93VGlwLCB0cnVlKVxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBoaWRlVGlwLCB0cnVlKVxyXG5cclxuXHJcbiAgZnVuY3Rpb24gc2hvd1RpcCh7dGFyZ2V0fSkge1xyXG4vLyBkZWJ1Z2dlclxyXG4gICAgLy8g0LXRgdC70Lgg0YMg0L3QsNGBINC10YHRgtGMINC/0L7QtNGB0LrQsNC30LrQsC4uLlxyXG4gICAgaWYgKCF0YXJnZXQuZGF0YXNldHx8IXRhcmdldC5kYXRhc2V0LnRvb2x0aXApIHJldHVybjtcclxuXHJcbiAgICBsZXQgdG9vbHRpcEh0bWwgPSB0YXJnZXQuZGF0YXNldC50b29sdGlwXHJcbiAgICAvLyAuLi7RgdC+0LfQtNCw0LTQuNC8INGN0LvQtdC80LXQvdGCINC00LvRjyDQv9C+0LTRgdC60LDQt9C60LhcclxuICAgIGxldCB0b29sdGlwRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdG9vbHRpcEVsZW0uY2xhc3NOYW1lID0gJ3Rvb2x0aXAnO1xyXG4gICAgdG9vbHRpcEVsZW0uaW5uZXJIVE1MID0gdG9vbHRpcEh0bWw7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0b29sdGlwRWxlbSk7XHJcblxyXG4gICAgLy8g0YHQv9C+0LfQuNGG0LjQvtC90LjRgNGD0LXQvCDQtdCz0L4g0YHQstC10YDRhdGDINC+0YIg0LDQvdC90L7RgtC40YDRg9C10LzQvtCz0L4g0Y3Qu9C10LzQtdC90YLQsCAodG9wLWNlbnRlcilcclxuICAgIGxldCBjb29yZHMgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgbGV0IGxlZnQgPSBjb29yZHMubGVmdCArICh0YXJnZXQub2Zmc2V0V2lkdGggLSB0b29sdGlwRWxlbS5vZmZzZXRXaWR0aCkgLyAyO1xyXG4gICAgaWYgKGxlZnQgPCAwKSBsZWZ0ID0gMDsgLy8g0L3QtSDQt9Cw0LXQt9C20LDRgtGMINC30LAg0LvQtdCy0YvQuSDQutGA0LDQuSDQvtC60L3QsFxyXG5cclxuICAgIGxldCB0b3AgPSBjb29yZHMudG9wIC0gdG9vbHRpcEVsZW0ub2Zmc2V0SGVpZ2h0IC0gNTtcclxuICAgIGlmICh0b3AgPCAwKSB7IC8vINC10YHQu9C4INC/0L7QtNGB0LrQsNC30LrQsCDQvdC1INC/0L7QvNC10YnQsNC10YLRgdGPINGB0LLQtdGA0YXRgywg0YLQviDQvtGC0L7QsdGA0LDQttCw0YLRjCDQtdGRINGB0L3QuNC30YNcclxuICAgICAgdG9wID0gY29vcmRzLnRvcCArIHRhcmdldC5vZmZzZXRIZWlnaHQgKyA1O1xyXG4gICAgfVxyXG5cclxuICAgIHRvb2x0aXBFbGVtLnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcclxuICAgIHRvb2x0aXBFbGVtLnN0eWxlLnRvcCA9IHRvcCArICdweCc7XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gaGlkZVRpcCgpIHtcclxuICAgIGxldCB0b29sdGlwcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b29sdGlwJylcclxuICAgIGlmICh0b29sdGlwcykge1xyXG4gICAgICBbXS5mb3JFYWNoLmNhbGwodG9vbHRpcHMsICh0aXApID0+IHtcclxuICAgICAgICAgIHRpcC5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiIsImltcG9ydCAnLi9hZG1pbi5zY3NzJ1xyXG5cclxuaW1wb3J0ICcuLi9jb21wb25lbnRzL2hlYWRlci9oZWFkZXItYWRtJ1xyXG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvYWNjb3JkaW9uL2FjY29yZGlvbidcclxuaW1wb3J0ICcuLi9jb21wb25lbnRzL2FkbWluX3NpZGViYXInXHJcbmltcG9ydCBcIi4vbW9kZWwvY2FjaGVcIjtcclxuaW1wb3J0IHskfSBmcm9tIFwiLi4vY29tbW9uXCI7XHJcblxyXG5pbXBvcnQgdGVzdFJlc3VsdHMgZnJvbSAnLi4vVGVzdC90ZXN0X3Jlc3VsdHMvdGVzdF9yZXN1bHRzJ1xyXG5pbXBvcnQgJy4uL1Rlc3Qvb3BlbnRlc3QtZWRpdCdcclxuaW1wb3J0IHRlc3RFZGl0IGZyb20gJy4uL1Rlc3QvdGVzdC1lZGl0J1xyXG5pbXBvcnQgdGVzdERvIGZyb20gJy4uL1Rlc3QvZG8nXHJcbmltcG9ydCBzZXR0aW5ncyBmcm9tICcuL1NldHRpbmdzL3NldHRpbmdzJ1xyXG5pbXBvcnQgcmlnaHRzIGZyb20gJy4vUmlnaHRzL3JpZ2h0cydcclxuaW1wb3J0IHBsYW5uaW5nIGZyb20gJy4vUGxhbm5pbmcvcGxhbm5pbmcnXHJcbmltcG9ydCB1c2VyIGZyb20gJy4vdXNlci91c2VyJ1xyXG5pbXBvcnQgJy4uL1Rlc3Qvb3Blbl90ZXN0J1xyXG5cclxuaW1wb3J0IHJhZGlvIGZyb20gJ0Bjb21wb25lbnRzL3JhZGlvL3JhZGlvJ1xyXG5pbXBvcnQgbGlzdCBmcm9tICdAY29tcG9uZW50cy9saXN0L2xpc3QnXHJcbmltcG9ydCBtdWx0aXNlbGVjdCBmcm9tICdAY29tcG9uZW50cy9tdWx0aXNlbGVjdC9tdWx0aXNlbGVjdCdcclxuaW1wb3J0IGNhdGFsb2dJdGVtIGZyb20gJ0Bjb21wb25lbnRzL2NhdGFsb2ctaXRlbS9jYXRhbG9nLWl0ZW0nXHJcbmltcG9ydCBjYXRhbG9nRGF0ZSBmcm9tICdAY29tcG9uZW50cy9kYXRlL2RhdGUnXHJcbmltcG9ydCB0b29sdGlwcyBmcm9tIFwiLi4vY29tcG9uZW50cy90b29sdGlwL3Rvb2x0aXBcIjtcclxuaW1wb3J0IGFjY29yZGlvblNob3cgZnJvbSBcIi4uL1Rlc3QvYWNjb3JkaW9uLXNob3dcIjtcclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgbmF2aWdhdGUod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKVxyXG4gIHJhZGlvKClcclxuICBsaXN0KClcclxuICBtdWx0aXNlbGVjdCgpXHJcbiAgY2F0YWxvZ0l0ZW0oKVxyXG4gIHRvb2x0aXBzKClcclxuXHJcblxyXG4gIGFjY29yZGlvblNob3coKVxyXG5cclxuICB0ZXN0RWRpdCgpXHJcblxyXG4gIC8vIG9wZW50ZXN0RWRpdCgpXHJcblxyXG4gIGZ1bmN0aW9uIG5hdmlnYXRlKHN0cikge1xyXG4gICAgLy8gZGVidWdnZXJcclxuICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICBjYXNlIC9cXC9hZG1pbnNjXFwvc2V0dGluZ3MvLnRlc3Qoc3RyKTpcclxuICAgICAgY2FzZSAvXFwvYWRtaW5zY1xcL3JpZ2h0XFwvbGlzdC8udGVzdChzdHIpOlxyXG4gICAgICBjYXNlIC9cXC9hZG1pbnNjXFwvcG9zdFxcL2xpc3QvLnRlc3Qoc3RyKTpcclxuICAgICAgY2FzZSAvXFwvYWRtaW5zY1xcL3RvZG9cXC9saXN0Ly50ZXN0KHN0cik6XHJcbiAgICAgICAgcmlnaHRzKClcclxuICAgICAgICAkKFwiW2hyZWY9Jy9hZG1pbnNjL3NldHRpbmdzJ11cIikuYWRkQ2xhc3MoJ2N1cnJlbnQnKVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAvXFwvYWRtaW5zY1xcL3Rlc3RyZXN1bHRcXC9yZXN1bHRzLy50ZXN0KHN0cik6XHJcbiAgICAgICAgdGVzdFJlc3VsdHMoKVxyXG4gICAgICAgICQoXCJbaHJlZj0nL2FkbWluc2MvdGVzdC9yZXN1bHRzJ11cIikuYWRkQ2xhc3MoJ2N1cnJlbnQnKVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAvXFwvYXV0aFxcL3Byb2ZpbGUvLnRlc3Qoc3RyKTpcclxuICAgICAgICB1c2VyKClcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgL1xcL2FkbWluc2NcXC9jcm0vLnRlc3Qoc3RyKTpcclxuICAgICAgICAkKFwiW2hyZWY9Jy9hZG1pbnNjL2NybSddXCIpLmFkZENsYXNzKCdjdXJyZW50JylcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgL1xcL2FkbWluc2NcXC9jYXRhbG9nLy50ZXN0KHN0cik6XHJcbiAgICAgICAgJChcIltocmVmPScvYWRtaW5zYy9jYXRhbG9nJ11cIikuYWRkQ2xhc3MoJ2N1cnJlbnQnKVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAvXFwvYWRtaW5zY1xcL3BsYW5uaW5nLy50ZXN0KHN0cik6XHJcbiAgICAgICAgcGxhbm5pbmcoKVxyXG4gICAgICAgICQoXCJbaHJlZj0nL2FkbWluc2MvcGxhbm5pbmcnXVwiKS5hZGRDbGFzcygnY3VycmVudCcpXHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlIC9cXC9hZG1pbnNjXFwvdGVzdFxcL3BhdGhzaG93Ly50ZXN0KHN0cik6XHJcbiAgICAgIGNhc2UgL1xcL2FkbWluc2NcXC90ZXN0XFwvZWRpdC8udGVzdChzdHIpOlxyXG4gICAgICAgICQoXCJbaHJlZj0nL2FkbWluc2MvdGVzdC9lZGl0J11cIikuYWRkQ2xhc3MoJ2N1cnJlbnQnKVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAvXFwvdGVzdC8udGVzdChzdHIpIHx8IC9cXC90ZXN0XFwvcmVzdWx0Ly50ZXN0KHN0cik6XHJcbiAgICAgICAgdGVzdERvKClcclxuICAgICAgICAkKFwiW2hyZWY9Jy90ZXN0L2RvJ11cIikuYWRkQ2xhc3MoJ2N1cnJlbnQnKVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAvXFwvYWRtaW5zY1xcL1NpdGVtYXAvLnRlc3Qoc3RyKTpcclxuICAgICAgICBzZXR0aW5ncygpXHJcbiAgICAgICAgJChcIltocmVmPScvYWRtaW5zYy9zZXR0aW5ncyddXCIpLmFkZENsYXNzKCdjdXJyZW50JylcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgJChcIltocmVmPScvYWRtaW5zYyddXCIpLmFkZENsYXNzKCdjdXJyZW50JylcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG59KVxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiZGVib3VuY2UiLCJmbiIsInRpbWUiLCJ0aW1lb3V0IiwiZnVuY3Rpb25DYWxsIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiSXNKc29uU3RyaW5nIiwic3RyIiwiSlNPTiIsInBhcnNlIiwiZSIsImRyb3BEb3duIiwiZWxlbWVudElkIiwiZHJvcGRvd24iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic2hvd0Ryb3Bkb3duIiwiZWxlbWVudCIsImV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsIndpbmRvdyIsImRpc3BhdGNoRXZlbnQiLCJ2YWxpZGF0ZSIsInNvcnQiLCJlcnJvciIsIm5leHRFbGVtZW50U2libGluZyIsImFyIiwidmFsdWUiLCJtYXRjaCIsImlubmVyVGV4dCIsInN0eWxlIiwib3BhY2l0eSIsImVtYWlsIiwidGV4dCIsInJlIiwicmVzIiwidGVzdCIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwicGFzc3dvcmQiLCJwb3B1cCIsInNob3ciLCJ0eHQiLCJjYWxsYmFjayIsImNsb3NlIiwiZWwiLCJwb3B1cF9faXRlbSIsImFwcGVuZCIsIiQiLCJhZGRFdmVudExpc3RlbmVyIiwiYm9keSIsImhpZGVEZWxheSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsInJlbW92ZURlbGF5IiwidGFyZ2V0IiwiY29udGFpbnMiLCJjbG9zZXN0IiwidGFnTmFtZSIsImNsYXNzTmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJ1bmlxIiwiYXJyYXkiLCJBcnJheSIsImZyb20iLCJTZXQiLCJnZXQiLCJrZXkiLCJwIiwibG9jYXRpb24iLCJzZWFyY2giLCJSZWdFeHAiLCJwb3N0IiwidXJsIiwiZGF0YSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidG9rZW4iLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicmVxIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIkZvcm1EYXRhIiwic2VuZCIsInN0cmluZ2lmeSIsIm9uZXJyb3IiLCJFcnJvciIsIm9ubG9hZCIsInJlc3BvbnNlIiwiaW5uZXJIVE1MIiwiRWxlbWVudENvbGxlY3Rpb24iLCJhdHRyTmFtZSIsImF0dHJWYWwiLCJzZXRBdHRyaWJ1dGUiLCJsZW5ndGgiLCJzZWxlY3RlZE9wdGlvbnMiLCJvcHRpb25zIiwiY2hlY2tlZCIsImF0dHIiLCJ2YWwiLCJhcnIiLCJmb3JFYWNoIiwicyIsInB1c2giLCJhcHBlbmRDaGlsZCIsIml0ZW0iLCJmaWx0ZXJlZCIsImZpbHRlciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvbiIsImNiT3JTZWxlY3RvciIsImNiIiwiZWxlbSIsInJlYWR5IiwiaXNSZWFkeSIsInNvbWUiLCJyZWFkeVN0YXRlIiwic2VsZWN0b3IiLCJhZGRUb29sdGlwIiwiYXJncyIsImNhbGwiLCJvbm1vdXNlZW50ZXIiLCJ0aXAiLCJtZXNzYWdlIiwiYmluZCIsIm9ubW91c2VsZWF2ZSIsImFjY29yZGlvbnMiLCJjaGVja2JveGVzIiwiY2giLCJoYW5kbGUiLCJsaSIsImFjY29yZGlvbiIsInVsIiwiZmluZCIsInJvdGF0ZUFycm93Iiwic2xpZGVVcCIsInBhcmVudCIsImNsb3NlU2libGluZ3MiLCJzbGlkZURvd24iLCJtYXhIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJ0b2dnbGUiLCJpbmNyZWFzZVBhcmVudCIsInVsSGVpZ2h0IiwicGFyZW50SGVpZ2h0IiwicGFyc2VJbnQiLCJzaWRlYmFyIiwiX2NhY2hlIiwiY2xlYXJDYWNoZSIsImNhY2hlIiwiX3Rlc3RSZXN1bHQiLCJkZWxTZXJ2ZXIiLCJpZCIsImRlbERvbSIsIm1hcCIsImkiLCJkZWxldGUiLCJjb25maXJtIiwidGVzdFJlc3VsdHMiLCJoYW5kbGVDbGljayIsImRhdGFzZXQiLCJyb3ciLCJvcGVucXVlc3Rpb24iLCJ0ZXN0SWQiLCJjcmVhdGUiLCJvcGVudGVzdF9pZCIsInF1ZXN0aW9uQ250IiwibW9kZWwiLCJjbG9uZSIsImNsb25lRW1wdHlNb2RlbCIsImFkZEJ0biIsImJlZm9yZSIsInF1ZXN0aW9uIiwicSIsImNsb25lTm9kZSIsImFucyIsImFuc3dlciIsInVwVG9RZXN0aW9uTnVtYmVyIiwicXVlc3Rpb25zRWxzIiwicXVlc3Rpb25zIiwidG9DaGFuZ2UiLCJtc2ciLCJjaGFuZ2VQYXJlbnQiLCJ0ZXN0X2lkIiwidGVzdF9uYW1lIiwic2hvd0Fuc3dlcnMiLCJhbnN3ZXJzIiwiZGVsIiwiX29wZW5xdWVzdGlvbiIsIlNvcnRhYmxlIiwic29ydGFibGUiLCJjb250YWluZXJTZWxlY3RvciIsImVsU2VsZWN0b3IiLCJjb250YWluZXIiLCJhbmltYXRpb24iLCJvbkVuZCIsImV2dCIsIm9sZEkiLCJvbGRJbmRleCIsIm5ld0kiLCJuZXdJbmRleCIsImVscyIsIl90ZXN0IiwiY29uc3RydWN0b3IiLCJzZXJ2ZXJNb2RlbCIsImlzVGVzdCIsImhyZWYiLCJjdXJyZW50USIsIlFFbCIsIm5hdkxlbmd0aCIsIlFQcmV2YyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJRTmV4dEVsIiwidmlld01vZGVsIiwic3BsaXQiLCJwb3AiLCJlbmFibGUiLCJzZWxlY3RlZEluZGV4VmFsdWUiLCJ0ZXN0aWQiLCJjaGlsZHJlbiIsImNoaWxkcmVuTGVuZ2h0IiwicGF0aF9jcmVhdGUiLCJ0ZXN0X3BhdGgiLCJuYW1lIiwic2VsZWN0ZWRWYWx1ZUN1c3RvbVNlbGVjdCIsInNlbGVjdCIsInNlbGVjdGVkIiwib3B0IiwiZmllbGRzIiwiZmllbGQiLCJ1cGRhdGUiLCJub3RBZG1pbiIsIl9hbnN3ZXIiLCJidXR0b24iLCJvcGVucXVlc3Rpb25faWQiLCJodG1sIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiZGVsX2J1dHRvbiIsIm9wZW50ZXN0RWRpdCIsImhhbmRsZUtleXVwIiwiYW5zd2VySWQiLCJkZWJvdW5jZWRJbnB1dCIsImFkZF9idXR0b24iLCJwYXJlbnROb2RlIiwicHJldl9zb3J0IiwicV9pZCIsInByZXZpb3VzX3NvcnQiLCJhbnN3ZXJDbnQiLCJnZXRNb2RlbEZvclNlcnZlciIsInBhcmVudF9xdWVzdGlvbiIsImNvcnJlY3RfYW5zd2VyIiwicGljYSIsImFfaWQiLCJjcmVhdGVPblNlcnZlciIsIm5ld0VsIiwiZGlzcGxheSIsImRlbGV0ZUZyb21TZXJ2ZXIiLCJfcXVlc3Rpb24iLCJzZWxlY3RlZEluZGV4Iiwic2hvd1RpcCIsImFjdGlvbiIsInNob3dGaXJzdCIsInNhdmUiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwicHJlcGVuZCIsImNyZWF0ZUFuc3dlckJ1dHRvbiIsImFkZEJ1dHRvbiIsInF1c3Rpb24iLCJsYXN0U29ydCIsInF1ZXN0aW9uc0NvdW50IiwicXMiLCJsYXN0IiwiY3JlYXRlT25WaWV3IiwiZ2V0QW5zd2VycyIsImRlbGV0ZWQiLCJkZWxldGVGcm9tVmlldyIsInBpY3EiLCJhbnN3ZXJCbG9ja3MiLCJhIiwiV0RTU2VsZWN0IiwibXVsdGlwbGUiLCJ0aXRsZSIsImdldEZvcm1hdHRlZE9wdGlvbnMiLCJzZWwiLCJsYWJlbCIsImFycm93Iiwic3BhY2UiLCJzZXR1cCIsImFmdGVyIiwic2VsZWN0ZWRPcHRpb24iLCJvcHRpb24iLCJzZWxlY3RlZE9wdGlvbkluZGV4IiwiaW5kZXhPZiIsInNlbGVjdFZhbHVlIiwibmV4dCIsInByZXYiLCJuZXdDdXN0b21FbGVtZW50Iiwic2Nyb2xsSW50b1ZpZXciLCJibG9jayIsInRpdGxlRWxlbWVudCIsInRhYkluZGV4Iiwic2V0T3B0aW9uIiwiZGVib3VuY2VUaW1lb3V0Iiwic2VhcmNoVGVybSIsImNvZGUiLCJwcmV2T3B0aW9uIiwibmV4dE9wdGlvbiIsInNlYXJjaGVkT3B0aW9uIiwic3RhcnRzV2l0aCIsImFjY29yZGlvblNob3ciLCJjdXJyZW50VGVzdElkIiwibWVudUl0ZW1Db2xsZWN0aW9uIiwibWVudSIsIm5leHRRIiwiY3VycmVudCIsImFpbU5hdklkIiwiYWltTmF2SWRGdW5jdGlvbiIsImFpbVFFbCIsImFpbVFFbEZ1bmN0aW9uIiwicHVzaE5hdiIsInB1c2hRIiwicHJldlEiLCJjdXJyZW50SWQiLCJjdXJyTmF2RWwiLCJOYXZFbCIsImN1cnJlbnRFbCIsImRpcmVjdGlvbiIsImRpciIsInRlc3RFZGl0QWN0aW9ucyIsInR5cGUiLCJ0ZXN0RWRpdCIsImN1c3RvbVNlbGVjdHMiLCJwYXRobmFtZSIsInRlc3RFZGl0V3JhcHBlciIsInBhZ2luYXRpb24iLCJhY3RpdmVfYnRuIiwiaWRfdG9faGlkZSIsImlkX3RvX3Nob3ciLCJuYXZJbml0IiwibmF2X2J1dHRvbnMiLCJuYXYiLCJ0ZXN0RG8iLCJsYWJlbHMiLCJyZWxvYWQiLCJjb3JyQW5zd2VycyIsImVycm9yQ250IiwiY29sb3JWaWV3Iiwib2JqVG9TZXJ2ZXIiLCJkb2N0eXBlIiwiZG9jdW1lbnRFbGVtZW50Iiwib3V0ZXJIVE1MIiwidGVzdG5hbWUiLCJ1c2VyIiwiY29ycmVjdEFuc3dlcnMiLCJlcnJvcnMiLCJpbnB1dCIsImNoZWNrQ29ycmVjdEFuc3dlcnMiLCJwYWdpbkl0ZW0iLCJjb3JyZWN0QW5zZXIiLCJpbml0IiwidXNlcnMiLCJzZXR0aW5ncyIsImxpc3QiLCJ0YWJsZXMiLCJ0YWJsZSIsImNvbnRlbnRlZGl0YWJsZSIsImhlYWRlcnMiLCJzb3J0YWJsZXMiLCJpbnB1dHMiLCJmaW5kQWxsIiwiaWRzIiwibW9kZWxOYW1lIiwicm93cyIsImhhbmRsZUtleVVwIiwiaGFuZGxlSW5wdXQiLCJoYXNBdHRyaWJ1dGUiLCJoZWFkZXIiLCJpbmRleCIsImZpbmRJbmRleCIsIm1vZGVsQ3JlYXRlIiwibW9kZWxEZWwiLCJzb3J0Q29sdW1uIiwiZGVsVmlldyIsIm5ld1JvdyIsIlJvdyIsInRhYmxlQ29udGVudCIsImluY2x1ZGVzIiwic2hvd0FsbFJvd3MiLCJpbnAiLCJyZWdleHAiLCJkaXJlY3Rpb25zIiwibXVsdGlwbGllciIsIm5ld1Jvd3MiLCJyb3dBIiwicm93QiIsImNlbGxBIiwiY2VsbEIiLCJ0cmFuc2Zvcm0iLCJiIiwibm9kZUxpc3QiLCJyZXZlcnNlIiwiY29udGVudCIsInBhcnNlRmxvYXQiLCJtYWtlU2VydmVyTW9kZWwiLCJyaWdodHMiLCJkYXRhSWQiLCJ0b1NlcnYiLCJlbXB0eSIsImYiLCJ0cmltIiwiZGVzY3JpcHRpb24iLCJtb2QiLCJ1cGRhdGVkIiwiY2xlYXJNb2RlbCIsImNyZWF0ZU9uRG9tIiwibGFzdEVsZW1lbnQiLCJhc3NpZ25OZXdWYWx1ZXNPbkNsb25lIiwicGxhbm5pbmciLCJnZXRTZXgiLCJzZXgiLCJ3cmFwcGVyIiwiZ2V0TW9kZWwiLCJyaWdodCIsInRhYiIsInIiLCJzdXJOYW1lIiwibWlkZGxlTmFtZSIsImJpcnRoRGF0ZSIsInBob25lIiwiaGlyZWQiLCJmaXJlZCIsIm9wZW5UZXN0IiwiYWN0aXZlUGFnaW5hdGlvbiIsImFjdGl2ZVF1ZXN0aW9uIiwicGFnaW5hdGlvbnMiLCJwcmV2UXVlc3QiLCJuZXh0UXVlc3QiLCJwYWdpbmF0ZSIsImZpbmlzaCIsInBhcnNlQW5zd2VycyIsIm9iaiIsImNhY2hlUGFnZSIsInVzZXJuYW1lIiwiYWltUGFnaW5hdGlvbiIsInRvZ2dsZVF1ZXN0aW9uIiwidG9nZ2xlTmF2IiwicV9lbCIsInVzZXJBIiwiaGlnaGxpZ2h0IiwidXNlckFuc3dlciIsImFpbVBhZ2luYXRpb25JZCIsImFpbVF1ZXN0aW9uSWQiLCJhaW1RdWVzdGlvbiIsIndvcmQiLCJhZGRFdmVudExpcyIsImhpbGl0ZXIiLCJwbGFjZUNhcmV0QXRFbmQiLCJmb2N1cyIsImdldFNlbGVjdGlvbiIsImNyZWF0ZVJhbmdlIiwicmFuZ2UiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJjb2xsYXBzZSIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwidGV4dFJhbmdlIiwibW92ZVRvRWxlbWVudFRleHQiLCJyZ3hwIiwicmVwbCIsInJlcGxhY2UiLCJyZW1vdmVIaWdobGlnaHQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVwbGFjZUFsbCIsInJhZGlvIiwicmFkaW9zIiwidGFyZyIsIm11bHRpc2VsZWN0IiwiZ2V0U2VsZWN0ZWQiLCJtdWx0aSIsImNoaXBzIiwib2JqcyIsImNoaXAiLCJoYW5kbGVCbHVyIiwidG9nZ2xlQmFja2dyb3VuZCIsImV4aXN0Iiwid3JhcCIsImNyZWF0ZUNoaXAiLCJjYXRhbG9nSXRlbSIsImN1c3RvbUNhdGFsb2dJdGVtIiwiY2hlY2tSZXF1aXJlZCIsInJlcXVpcmVkIiwiZXJyQ291bnQiLCJib3JkZXJDb2xvciIsInZpc2libGVTZWN0aW9uIiwic2VjdGlvbiIsImFjdGl2ZVRhYiIsInRvU3RyaW5nIiwiaXN0ZXN0IiwidG9vbHRpcHMiLCJoaWRlVGlwIiwidG9vbHRpcCIsInRvb2x0aXBIdG1sIiwidG9vbHRpcEVsZW0iLCJjb29yZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0Iiwib2Zmc2V0V2lkdGgiLCJ0b3AiLCJvZmZzZXRIZWlnaHQiLCJjYXRhbG9nRGF0ZSIsIm5hdmlnYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///857\n")}},__webpack_exports__={};__webpack_modules__[857]()})();