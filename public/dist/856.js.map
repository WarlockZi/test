{"version":3,"file":"856.js","mappings":"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","sources":["webpack://my-webpack-project/./public/src/Admin/Category/PropertyTable.js","webpack://my-webpack-project/./public/src/Admin/Category/Category.js"],"sourcesContent":["import {$, post} from \"../../common\";\r\nimport SelectNew from \"../../components/select/SelectNew\";\r\n\r\nexport default class PropertyTable {\r\n  constructor($el) {\r\n    this.$el = $el;\r\n    this.$rows = this.$el.querySelector('.rows');\r\n    this.rows = this.$el.querySelectorAll('.rows>.row');\r\n    this.$addBtn = this.$el.querySelector('.add-property');\r\n    this.setup()\r\n  }\r\n\r\n  setup() {\r\n    if (this.$addBtn) this.$addBtn.onclick = this.newRow.bind(this);\r\n\r\n    this.rows.forEach((row) => {\r\n      if (!row.classList.contains('none')) {\r\n        new SelectNew($(row).find('[custom-select]'))\r\n      }\r\n    });\r\n\r\n    this.$rows.addEventListener('customSelect.changed', this.propertyChange.bind(this));\r\n    this.$rows.addEventListener('click', this.handleClick.bind(this))\r\n  }\r\n\r\n  async handleClick({target}) {\r\n    {\r\n      if (target.classList.contains('del')) {\r\n        this.deleteRow(target)\r\n      } else if (target.classList.contains('edit')) {\r\n        this.editProperty(target)\r\n      }\r\n    }\r\n  }\r\n\r\n  async editProperty(target) {\r\n    let id = target.closest('.row').querySelector('[select-new]').dataset.value;\r\n   location.href = `/adminsc/property/edit/${id}`\r\n  }\r\n\r\n  async deleteRow(target) {\r\n    let $row = target.closest('.row');\r\n    let $selector = $($row).find('[select-new]');\r\n    let id = +$selector.dataset.value;\r\n    let data = this.dto();\r\n    data.morphed.new_id = 0;\r\n    data.morphed.old_id = id;\r\n    let res = await post(`/adminsc/category/changeProperty`, data);\r\n    if (res?.ok) $row.remove()\r\n  }\r\n\r\n  async propertyChange(obj) {\r\n    {\r\n      let data = this.dto(obj);\r\n      let res = await post(`/adminsc/category/changeProperty`, data)\r\n    }\r\n  }\r\n\r\n  dto(obj = {}) {\r\n    return {\r\n      category_id: this.$el.closest(`[data-model=\"category\"]`).dataset.id,\r\n      morphed: {\r\n        old_id: +obj?.detail?.prev?.value,\r\n        new_id: +obj?.detail?.next?.value\r\n      }\r\n    }\r\n  }\r\n\r\n  newRow() {\r\n    let $clone = this.$rows.querySelector('.none .row').cloneNode(true);\r\n    new SelectNew($($clone).find('[custom-select]'));\r\n    this.$rows.append($clone)\r\n  }\r\n\r\n\r\n}","import '../Product/product.scss'\r\nimport './category.scss'\r\nimport PropertyTable from \"./PropertyTable\";\r\nimport {$, post} from \"../../common\";\r\nimport SelectNew from \"../../components/select/SelectNew\";\r\nimport Morph from \"../../components/morph/morph\";\r\n\r\nexport default class Category {\r\n  constructor($el) {\r\n    this.$el = $el;\r\n    this.id = $el.dataset.id\r\n    this.$properties_table = this.$el.querySelector('.properties');\r\n    this.$parent_category = $(`[data-field='category_id']`).first();\r\n    this.$mainImage = this.$el.querySelector('.mainImage');\r\n    this.setup();\r\n    this.dto = this.dto()\r\n  }\r\n\r\n\r\n  setup(){\r\n    if (this.$properties_table) {\r\n      new PropertyTable(this.$properties_table)\r\n    }\r\n    if (this.$parent_category) {\r\n      const parentSelector = new SelectNew(this.$parent_category);\r\n      parentSelector.sel.addEventListener('customSelect.changed', this.attachCategory.bind(this))\r\n    }\r\n    const dnds = $('[data-dnd]');\r\n    dnds.forEach((dnd) => {\r\n      if (dnd.parentNode.dataset.morphModel) {\r\n        let m = new Morph(dnd, $category)\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  dto() {\r\n    return {\r\n      id: this.$el.dataset.id,\r\n    }\r\n  }\r\n\r\n\r\n  attachCategory({detail}) {\r\n    debugger;\r\n    let data = {\r\n      id: this.id,\r\n      category_id: +detail.next.value,\r\n    };\r\n    post('/adminsc/category/updateOrCreate', data)\r\n\r\n  }\r\n\r\n// let dto = {\r\n//   id: +$category.dataset.id,\r\n// };\r\n\r\n// async function addMainImg(files) {\r\n//   let catId = $('.item-wrap')[0].dataset.id;\r\n//   let slugNameId = 1;\r\n//   let imagable = new Imageable();\r\n//   let morph = await new Morph(imagable, new Category(catId, slugNameId), files);\r\n//\r\n//   let src = await post(imagable.urlOne, morph?.data);\r\n//   let appendTo = \".image[data-model='category']\";\r\n//   let appendOneImage = morph.appendOneImage(appendTo, src?.arr[0])\r\n// }\r\n}"],"names":["PropertyTable","constructor","$el","this","$rows","querySelector","rows","querySelectorAll","$addBtn","setup","onclick","newRow","bind","forEach","row","classList","contains","SelectNew","$","find","addEventListener","propertyChange","handleClick","target","deleteRow","editProperty","id","closest","dataset","value","location","href","$row","data","dto","morphed","new_id","old_id","res","post","ok","remove","obj","category_id","detail","prev","next","$clone","cloneNode","append","Category","$properties_table","$parent_category","first","$mainImage","sel","attachCategory","dnd","parentNode","morphModel","Morph","$category"],"sourceRoot":""}